
normal_mice_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014abc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08014c50  08014c50  00024c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801523c  0801523c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801523c  0801523c  0002523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015244  08015244  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015244  08015244  00025244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015248  08015248  00025248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801524c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cde8  200001dc  08015428  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cfc4  08015428  0003cfc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb04  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004acb  00000000  00000000  0004bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  000507e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00052160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002782f  00000000  00000000  00053890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247f0  00000000  00000000  0007b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa98  00000000  00000000  0009f8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f347  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b28  00000000  00000000  0017f398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c34 	.word	0x08014c34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08014c34 	.word	0x08014c34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <control_test_motor>:

char modeacc;
volatile char g_acc_flag;

void control_test_motor(uint8_t WallMode)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	72bb      	strb	r3, [r7, #10]
	pl_motor_standby(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f001 fbbe 	bl	8002728 <pl_motor_standby>
	pl_motor_start();
 8000fac:	f001 fc26 	bl	80027fc <pl_motor_start>

//	float v_e=straight_table(-180, -100, -100, -500, 7000, mode);
	float v_e=straight_table(540, 200, 200, 600, 7000, mode);
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8001014 <control_test_motor+0x88>
 8000fb6:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001018 <control_test_motor+0x8c>
 8000fba:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800101c <control_test_motor+0x90>
 8000fbe:	eddf 0a17 	vldr	s1, [pc, #92]	; 800101c <control_test_motor+0x90>
 8000fc2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001020 <control_test_motor+0x94>
 8000fc6:	f000 fde7 	bl	8001b98 <straight_table>
 8000fca:	ed87 0a03 	vstr	s0, [r7, #12]

//	float v_e=straight_table(180, 150, 600, 600, 7000);
//	slalom_table(v_e,90, 0, 0, 400, 7000);
//	v_e=straight_table(180, v_e, 150, 600, 7000);
	pl_motor_stop();
 8000fce:	f001 fc29 	bl	8002824 <pl_motor_stop>
	HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f00b fa87 	bl	800c4e8 <HAL_Delay>

	pl_motor_start();
 8000fda:	f001 fc0f 	bl	80027fc <pl_motor_start>
	v_e=turning_table(360, 240, 240, 600, 7000);
 8000fde:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8001014 <control_test_motor+0x88>
 8000fe2:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001018 <control_test_motor+0x8c>
 8000fe6:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001024 <control_test_motor+0x98>
 8000fea:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001024 <control_test_motor+0x98>
 8000fee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001028 <control_test_motor+0x9c>
 8000ff2:	f000 fecb 	bl	8001d8c <turning_table>
 8000ff6:	ed87 0a03 	vstr	s0, [r7, #12]

	pl_motor_stop();
 8000ffa:	f001 fc13 	bl	8002824 <pl_motor_stop>
	HAL_Delay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f00b fa71 	bl	800c4e8 <HAL_Delay>
	pl_motor_standby(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f001 fb8e 	bl	8002728 <pl_motor_standby>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	45dac000 	.word	0x45dac000
 8001018:	44160000 	.word	0x44160000
 800101c:	43480000 	.word	0x43480000
 8001020:	44070000 	.word	0x44070000
 8001024:	43700000 	.word	0x43700000
 8001028:	43b40000 	.word	0x43b40000

0800102c <control_test_motor2>:

void control_test_motor2(uint8_t turn_mode,uint8_t WallMode,uint8_t count)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	4613      	mov	r3, r2
 800103c:	717b      	strb	r3, [r7, #5]
	MOTOR_MODE mode;
//	mode.WallControlMode=0;
	mode.WallControlMode=WallMode;
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8001042:	2300      	movs	r3, #0
 8001044:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	pl_motor_start();
 800104e:	f001 fbd5 	bl	80027fc <pl_motor_start>

if(turn_mode==0){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d115      	bne.n	8001084 <control_test_motor2+0x58>
	straight_table(180*count, 100, 100, 600, 7000, mode);
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	22b4      	movs	r2, #180	; 0xb4
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 80010d8 <control_test_motor2+0xac>
 800106e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80010dc <control_test_motor2+0xb0>
 8001072:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80010e0 <control_test_motor2+0xb4>
 8001076:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80010e0 <control_test_motor2+0xb4>
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f000 fd8b 	bl	8001b98 <straight_table>
 8001082:	e01c      	b.n	80010be <control_test_motor2+0x92>
}else if (turn_mode==1){
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10c      	bne.n	80010a4 <control_test_motor2+0x78>
	turning_table(360*5, 120, 120, 600, 7000);
 800108a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80010d8 <control_test_motor2+0xac>
 800108e:	eddf 1a13 	vldr	s3, [pc, #76]	; 80010dc <control_test_motor2+0xb0>
 8001092:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80010e4 <control_test_motor2+0xb8>
 8001096:	eddf 0a13 	vldr	s1, [pc, #76]	; 80010e4 <control_test_motor2+0xb8>
 800109a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80010e8 <control_test_motor2+0xbc>
 800109e:	f000 fe75 	bl	8001d8c <turning_table>
 80010a2:	e00c      	b.n	80010be <control_test_motor2+0x92>
}else{
	straight_table(BACK_TO_CENTER, 100, 100, 600, 7000, mode);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80010d8 <control_test_motor2+0xac>
 80010aa:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80010dc <control_test_motor2+0xb0>
 80010ae:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80010e0 <control_test_motor2+0xb4>
 80010b2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80010e0 <control_test_motor2+0xb4>
 80010b6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80010ec <control_test_motor2+0xc0>
 80010ba:	f000 fd6d 	bl	8001b98 <straight_table>
}

	pl_motor_stop();
 80010be:	f001 fbb1 	bl	8002824 <pl_motor_stop>
	HAL_Delay(500);
 80010c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c6:	f00b fa0f 	bl	800c4e8 <HAL_Delay>
	pl_motor_standby(0);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f001 fb2c 	bl	8002728 <pl_motor_standby>
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	45dac000 	.word	0x45dac000
 80010dc:	44160000 	.word	0x44160000
 80010e0:	42c80000 	.word	0x42c80000
 80010e4:	42f00000 	.word	0x42f00000
 80010e8:	44e10000 	.word	0x44e10000
 80010ec:	41f40000 	.word	0x41f40000

080010f0 <motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void motor_init(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

	modeacc=0;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <motor_init+0x1c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	g_acc_flag=0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <motor_init+0x20>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]


}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000238 	.word	0x20000238
 8001110:	20000239 	.word	0x20000239
 8001114:	00000000 	.word	0x00000000

08001118 <interrupt_Motor>:



void interrupt_Motor(void){
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af02      	add	r7, sp, #8

	if (modeacc == 0) {
		//g_WallControl_mode=0;
		//g_acc_flag=0;
	}
	if (modeacc == 1) {
 800111e:	4bc4      	ldr	r3, [pc, #784]	; (8001430 <interrupt_Motor+0x318>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	f040 8088 	bne.w	8001238 <interrupt_Motor+0x120>
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001128:	4bc2      	ldr	r3, [pc, #776]	; (8001434 <interrupt_Motor+0x31c>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa0b 	bl	8000548 <__aeabi_f2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	4bbf      	ldr	r3, [pc, #764]	; (8001434 <interrupt_Motor+0x31c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	a3b5      	add	r3, pc, #724	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa57 	bl	80005f8 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff f89b 	bl	800028c <__adddf3>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd43 	bl	8000be8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	4ab3      	ldr	r2, [pc, #716]	; (8001434 <interrupt_Motor+0x31c>)
 8001166:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001168:	4bb2      	ldr	r3, [pc, #712]	; (8001434 <interrupt_Motor+0x31c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9eb 	bl	8000548 <__aeabi_f2d>
 8001172:	4604      	mov	r4, r0
 8001174:	460d      	mov	r5, r1
 8001176:	4baf      	ldr	r3, [pc, #700]	; (8001434 <interrupt_Motor+0x31c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9e4 	bl	8000548 <__aeabi_f2d>
 8001180:	a3a5      	add	r3, pc, #660	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa37 	bl	80005f8 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff f87b 	bl	800028c <__adddf3>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd23 	bl	8000be8 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4aa3      	ldr	r2, [pc, #652]	; (8001434 <interrupt_Motor+0x31c>)
 80011a6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80011a8:	4ba3      	ldr	r3, [pc, #652]	; (8001438 <interrupt_Motor+0x320>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9cb 	bl	8000548 <__aeabi_f2d>
 80011b2:	4604      	mov	r4, r0
 80011b4:	460d      	mov	r5, r1
 80011b6:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <interrupt_Motor+0x320>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9c4 	bl	8000548 <__aeabi_f2d>
 80011c0:	a395      	add	r3, pc, #596	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff f85b 	bl	800028c <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fd03 	bl	8000be8 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a94      	ldr	r2, [pc, #592]	; (8001438 <interrupt_Motor+0x320>)
 80011e6:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <interrupt_Motor+0x320>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b90      	ldr	r3, [pc, #576]	; (8001438 <interrupt_Motor+0x320>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	a385      	add	r3, pc, #532	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f9f7 	bl	80005f8 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff f83b 	bl	800028c <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a84      	ldr	r2, [pc, #528]	; (8001438 <interrupt_Motor+0x320>)
 8001226:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidStraight,&g_TargetStraight);
 8001228:	4b84      	ldr	r3, [pc, #528]	; (800143c <interrupt_Motor+0x324>)
 800122a:	4a82      	ldr	r2, [pc, #520]	; (8001434 <interrupt_Motor+0x31c>)
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	f000 f962 	bl	80014fc <cal_table>
	}
	if (modeacc == 2){
 8001238:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <interrupt_Motor+0x318>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b02      	cmp	r3, #2
 800123e:	f040 808b 	bne.w	8001358 <interrupt_Motor+0x240>
		g_WallControl_mode=0;
 8001242:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <interrupt_Motor+0x328>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		g_TargetStraight.displacement += g_TargetStraight.velocity*INTERRUPT_TIME;// + g_TargetStraight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001248:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <interrupt_Motor+0x31c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	4b77      	ldr	r3, [pc, #476]	; (8001434 <interrupt_Motor+0x31c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	a36d      	add	r3, pc, #436	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f80b 	bl	800028c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	4a6b      	ldr	r2, [pc, #428]	; (8001434 <interrupt_Motor+0x31c>)
 8001286:	6093      	str	r3, [r2, #8]
		g_TargetStraight.velocity += g_TargetStraight.acceleration*INTERRUPT_TIME;
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <interrupt_Motor+0x31c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <interrupt_Motor+0x31c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f954 	bl	8000548 <__aeabi_f2d>
 80012a0:	a35d      	add	r3, pc, #372	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f9a7 	bl	80005f8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7fe ffeb 	bl	800028c <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc93 	bl	8000be8 <__aeabi_d2f>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <interrupt_Motor+0x31c>)
 80012c6:	6013      	str	r3, [r2, #0]
		g_TargetTurning.displacement += g_TargetTurning.velocity*INTERRUPT_TIME;// + g_TargetTurning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80012c8:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <interrupt_Motor+0x320>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
 80012d6:	4b58      	ldr	r3, [pc, #352]	; (8001438 <interrupt_Motor+0x320>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f934 	bl	8000548 <__aeabi_f2d>
 80012e0:	a34d      	add	r3, pc, #308	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f987 	bl	80005f8 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ffcb 	bl	800028c <__adddf3>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc73 	bl	8000be8 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <interrupt_Motor+0x320>)
 8001306:	6093      	str	r3, [r2, #8]
		g_TargetTurning.velocity += g_TargetTurning.acceleration*INTERRUPT_TIME;
 8001308:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <interrupt_Motor+0x320>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f91b 	bl	8000548 <__aeabi_f2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	4b48      	ldr	r3, [pc, #288]	; (8001438 <interrupt_Motor+0x320>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	a33d      	add	r3, pc, #244	; (adr r3, 8001418 <interrupt_Motor+0x300>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffab 	bl	800028c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc53 	bl	8000be8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <interrupt_Motor+0x320>)
 8001346:	6013      	str	r3, [r2, #0]
		cal_table(g_TrapezoidTurning,&g_TargetTurning);
 8001348:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <interrupt_Motor+0x32c>)
 800134a:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <interrupt_Motor+0x320>)
 800134c:	9201      	str	r2, [sp, #4]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	f000 f8d2 	bl	80014fc <cal_table>
	}
	float PID_wall = calWallConrol();
 8001358:	f000 ffba 	bl	80022d0 <calWallConrol>
 800135c:	ed87 0a03 	vstr	s0, [r7, #12]
	float velocity_l = g_TargetStraight.velocity + g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 + PID_wall;
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <interrupt_Motor+0x31c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ef 	bl	8000548 <__aeabi_f2d>
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <interrupt_Motor+0x320>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	a329      	add	r3, pc, #164	; (adr r3, 8001420 <interrupt_Motor+0x308>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f93b 	bl	80005f8 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001392:	f7ff fa5b 	bl	800084c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	a322      	add	r3, pc, #136	; (adr r3, 8001428 <interrupt_Motor+0x310>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f928 	bl	80005f8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <interrupt_Motor+0x330>)
 80013b6:	f7ff fa49 	bl	800084c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe ff63 	bl	800028c <__adddf3>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff f8ba 	bl	8000548 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7fe ff56 	bl	800028c <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbfe 	bl	8000be8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
		pl_motor_mode_L(velocity_l);
 80013f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f4:	f001 f9c4 	bl	8002780 <pl_motor_mode_L>
		pl_motor_count_L(velocity_l);
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	f001 fa22 	bl	8002844 <pl_motor_count_L>
	float velocity_r = g_TargetStraight.velocity - g_TargetTurning.velocity * TREAD_WIDTH / 2 * M_PI / 180 - PID_wall;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <interrupt_Motor+0x31c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f89f 	bl	8000548 <__aeabi_f2d>
 800140a:	4604      	mov	r4, r0
 800140c:	460d      	mov	r5, r1
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <interrupt_Motor+0x320>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	e01b      	b.n	800144c <interrupt_Motor+0x334>
 8001414:	f3af 8000 	nop.w
 8001418:	d2f1a9fc 	.word	0xd2f1a9fc
 800141c:	3f50624d 	.word	0x3f50624d
 8001420:	147ae148 	.word	0x147ae148
 8001424:	405487ae 	.word	0x405487ae
 8001428:	54442d18 	.word	0x54442d18
 800142c:	400921fb 	.word	0x400921fb
 8001430:	20000238 	.word	0x20000238
 8001434:	200001f8 	.word	0x200001f8
 8001438:	20000204 	.word	0x20000204
 800143c:	20000210 	.word	0x20000210
 8001440:	2000039c 	.word	0x2000039c
 8001444:	20000224 	.word	0x20000224
 8001448:	40668000 	.word	0x40668000
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	a326      	add	r3, pc, #152	; (adr r3, 80014ec <interrupt_Motor+0x3d4>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8ce 	bl	80005f8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146c:	f7ff f9ee 	bl	800084c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	a31e      	add	r3, pc, #120	; (adr r3, 80014f4 <interrupt_Motor+0x3dc>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8bb 	bl	80005f8 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <interrupt_Motor+0x3d0>)
 8001490:	f7ff f9dc 	bl	800084c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7fe fef4 	bl	8000288 <__aeabi_dsub>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4614      	mov	r4, r2
 80014a6:	461d      	mov	r5, r3
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff f84d 	bl	8000548 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7fe fee7 	bl	8000288 <__aeabi_dsub>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb91 	bl	8000be8 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	607b      	str	r3, [r7, #4]
	    pl_motor_mode_R(velocity_r);
 80014ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80014ce:	f001 f977 	bl	80027c0 <pl_motor_mode_R>
	    pl_motor_count_R(velocity_r);
 80014d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014d6:	f001 f9c9 	bl	800286c <pl_motor_count_R>



}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	f3af 8000 	nop.w
 80014e8:	40668000 	.word	0x40668000
 80014ec:	147ae148 	.word	0x147ae148
 80014f0:	405487ae 	.word	0x405487ae
 80014f4:	54442d18 	.word	0x54442d18
 80014f8:	400921fb 	.word	0x400921fb

080014fc <cal_table>:

void cal_table(TRAPEZOID input,TARGET *target){
 80014fc:	b084      	sub	sp, #16
 80014fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	f107 0420 	add.w	r4, r7, #32
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800150e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	f2c0 819b 	blt.w	8001854 <cal_table+0x358>
	switch (g_acc_flag) {
 800151e:	4bcc      	ldr	r3, [pc, #816]	; (8001850 <cal_table+0x354>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b06      	cmp	r3, #6
 8001526:	f200 832e 	bhi.w	8001b86 <cal_table+0x68a>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <cal_table+0x34>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	08001b81 	.word	0x08001b81
 8001534:	0800154d 	.word	0x0800154d
 8001538:	080016bf 	.word	0x080016bf
 800153c:	080017dd 	.word	0x080017dd
 8001540:	08001b81 	.word	0x08001b81
 8001544:	08001809 	.word	0x08001809
 8001548:	0800182b 	.word	0x0800182b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	ed93 7a00 	vldr	s14, [r3]
 8001552:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	db0a      	blt.n	8001576 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8001560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001564:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8001566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800156e:	4bb8      	ldr	r3, [pc, #736]	; (8001850 <cal_table+0x354>)
 8001570:	2202      	movs	r2, #2
 8001572:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8001574:	e307      	b.n	8001b86 <cal_table+0x68a>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8001576:	ed97 7a08 	vldr	s14, [r7, #32]
 800157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800158e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001592:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001596:	ee66 7a27 	vmul.f32	s15, s12, s15
 800159a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800159e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80015a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80015ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015b2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80015b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80015ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 80015be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	d900      	bls.n	80015ca <cal_table+0xce>
		break;
 80015c8:	e2dd      	b.n	8001b86 <cal_table+0x68a>
				time_over=((2*target->velocity*target->velocity
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80015de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ea:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80015ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80015f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80015fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001606:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800160a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001612:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800161c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001620:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	4604      	mov	r4, r0
 8001630:	460d      	mov	r5, r1
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff87 	bl	8000548 <__aeabi_f2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f7fe ffd9 	bl	80005f8 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4690      	mov	r8, r2
 800164c:	4699      	mov	r9, r3
 800164e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001656:	ee17 0a90 	vmov	r0, s15
 800165a:	f7fe ff75 	bl	8000548 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4640      	mov	r0, r8
 8001664:	4649      	mov	r1, r9
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe09 	bl	8000288 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fab3 	bl	8000be8 <__aeabi_d2f>
 8001682:	4602      	mov	r2, r0
 8001684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001686:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8001688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80016a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016ac:	eef1 7a67 	vneg.f32	s15, s15
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <cal_table+0x354>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]
		break;
 80016bc:	e263      	b.n	8001b86 <cal_table+0x68a>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 80016be:	ed97 7a08 	vldr	s14, [r7, #32]
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c8:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80016cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80016d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80016d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80016dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016ec:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80016f0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80016f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80016f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	d900      	bls.n	8001704 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8001702:	e240      	b.n	8001b86 <cal_table+0x68a>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	ed93 7a02 	vldr	s14, [r3, #8]
 800170a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800170e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001712:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8001716:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800171a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800171e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001722:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001726:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800172a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800172e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001732:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001736:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800173a:	edd7 7a08 	vldr	s15, [r7, #32]
 800173e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8001748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fef7 	bl	8000548 <__aeabi_f2d>
 800175a:	4604      	mov	r4, r0
 800175c:	460d      	mov	r5, r1
 800175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f7fe ff43 	bl	80005f8 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4690      	mov	r8, r2
 8001778:	4699      	mov	r9, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe fee4 	bl	8000548 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4640      	mov	r0, r8
 8001786:	4649      	mov	r1, r9
 8001788:	f7fe ff36 	bl	80005f8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4620      	mov	r0, r4
 8001792:	4629      	mov	r1, r5
 8001794:	f7fe fd78 	bl	8000288 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff fa22 	bl	8000be8 <__aeabi_d2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 80017c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017ca:	eef1 7a67 	vneg.f32	s15, s15
 80017ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d0:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <cal_table+0x354>)
 80017d6:	2203      	movs	r2, #3
 80017d8:	701a      	strb	r2, [r3, #0]
		break;
 80017da:	e1d4      	b.n	8001b86 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d900      	bls.n	80017f2 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80017f0:	e1c9      	b.n	8001b86 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 80017f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <cal_table+0x354>)
 8001802:	2204      	movs	r2, #4
 8001804:	701a      	strb	r2, [r3, #0]
		break;
 8001806:	e1be      	b.n	8001b86 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	ed93 7a02 	vldr	s14, [r3, #8]
 800180e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	db06      	blt.n	800182a <cal_table+0x32e>
			target->acceleration = 0;
 800181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <cal_table+0x354>)
 8001826:	2204      	movs	r2, #4
 8001828:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001830:	edd7 7a08 	vldr	s15, [r7, #32]
 8001834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	da00      	bge.n	8001840 <cal_table+0x344>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800183e:	e1a2      	b.n	8001b86 <cal_table+0x68a>
			target->acceleration = 0;
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <cal_table+0x354>)
 800184a:	2204      	movs	r2, #4
 800184c:	701a      	strb	r2, [r3, #0]
		break;
 800184e:	e19a      	b.n	8001b86 <cal_table+0x68a>
 8001850:	20000239 	.word	0x20000239
	}
}else{
	switch (g_acc_flag) {
 8001854:	4bcf      	ldr	r3, [pc, #828]	; (8001b94 <cal_table+0x698>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b06      	cmp	r3, #6
 800185c:	f200 8193 	bhi.w	8001b86 <cal_table+0x68a>
 8001860:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <cal_table+0x36c>)
 8001862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001866:	bf00      	nop
 8001868:	08001b85 	.word	0x08001b85
 800186c:	08001885 	.word	0x08001885
 8001870:	080019f7 	.word	0x080019f7
 8001874:	08001b0d 	.word	0x08001b0d
 8001878:	08001b39 	.word	0x08001b39
 800187c:	08001b39 	.word	0x08001b39
 8001880:	08001b5b 	.word	0x08001b5b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800188e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d80a      	bhi.n	80018ae <cal_table+0x3b2>
				target->velocity = input.count_velocity;
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80018a6:	4bbb      	ldr	r3, [pc, #748]	; (8001b94 <cal_table+0x698>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 80018ac:	e16b      	b.n	8001b86 <cal_table+0x68a>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80018ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80018b2:	eeb1 7a67 	vneg.f32	s14, s15
 80018b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80018ca:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80018ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80018da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80018de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80018ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018ee:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80018f2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80018fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	d900      	bls.n	8001906 <cal_table+0x40a>
		break;
 8001904:	e13f      	b.n	8001b86 <cal_table+0x68a>
				time_over=(-(2*target->velocity*target->velocity
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800191a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800191e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800192a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800192e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800193a:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800193e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001942:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001946:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800194a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800194e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001952:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 800195c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001960:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	4604      	mov	r4, r0
 8001970:	460d      	mov	r5, r1
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fde7 	bl	8000548 <__aeabi_f2d>
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f7fe fe39 	bl	80005f8 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4690      	mov	r8, r2
 800198c:	4699      	mov	r9, r3
 800198e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001996:	ee17 0a90 	vmov	r0, s15
 800199a:	f7fe fdd5 	bl	8000548 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc6b 	bl	800028c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	ed93 7a00 	vldr	s14, [r3]
 80019ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80019d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80019e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80019ee:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <cal_table+0x698>)
 80019f0:	2203      	movs	r2, #3
 80019f2:	701a      	strb	r2, [r3, #0]
		break;
 80019f4:	e0c7      	b.n	8001b86 <cal_table+0x68a>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80019fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a00:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8001a04:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8001a10:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a24:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8001a28:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a2c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8001a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	d900      	bls.n	8001a3c <cal_table+0x540>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8001a3a:	e0a4      	b.n	8001b86 <cal_table+0x68a>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001a46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8001a4e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001a52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a62:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8001a66:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a6e:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8001a72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8001a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a84:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd5b 	bl	8000548 <__aeabi_f2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd55 	bl	8000548 <__aeabi_f2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	f7fe fda7 	bl	80005f8 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4690      	mov	r8, r2
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fd9a 	bl	80005f8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f886 	bl	8000be8 <__aeabi_d2f>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8001afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <cal_table+0x698>)
 8001b06:	2203      	movs	r2, #3
 8001b08:	701a      	strb	r2, [r3, #0]
		break;
 8001b0a:	e03c      	b.n	8001b86 <cal_table+0x68a>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	da00      	bge.n	8001b22 <cal_table+0x626>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8001b20:	e031      	b.n	8001b86 <cal_table+0x68a>
			target->velocity = input.end_velocity;
 8001b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <cal_table+0x698>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	701a      	strb	r2, [r3, #0]
		break;
 8001b36:	e026      	b.n	8001b86 <cal_table+0x68a>
	case 4:
		//終了(0でもいいかも)
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d806      	bhi.n	8001b5a <cal_table+0x65e>
			target->acceleration = 0;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <cal_table+0x698>)
 8001b56:	2204      	movs	r2, #4
 8001b58:	701a      	strb	r2, [r3, #0]
		}
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	d900      	bls.n	8001b70 <cal_table+0x674>
		}
	}

}

}
 8001b6e:	e00a      	b.n	8001b86 <cal_table+0x68a>
			target->acceleration = 0;
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <cal_table+0x698>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	e002      	b.n	8001b86 <cal_table+0x68a>
		break;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <cal_table+0x68a>
		break;
 8001b84:	bf00      	nop
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001b90:	b004      	add	sp, #16
 8001b92:	4770      	bx	lr
 8001b94:	20000239 	.word	0x20000239

08001b98 <straight_table>:


float straight_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE mode) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001ba2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001ba6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001baa:	edc7 1a02 	vstr	s3, [r7, #8]
 8001bae:	ed87 2a01 	vstr	s4, [r7, #4]
 8001bb2:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001bc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001bcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001bd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd8:	edc7 7a07 	vstr	s15, [r7, #28]

	g_WallControl_mode=mode.WallControlMode;
 8001bdc:	783a      	ldrb	r2, [r7, #0]
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <straight_table+0x1dc>)
 8001be0:	701a      	strb	r2, [r3, #0]
	//g_WallControlStatus=mode.WallControlStatus;
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d505      	bpl.n	8001bfc <straight_table+0x64>
 8001bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf4:	eef1 7a67 	vneg.f32	s15, s15
 8001bf8:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidStraight.displacement = input_displacement;
 8001bfc:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <straight_table+0x1e0>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	6013      	str	r3, [r2, #0]
	g_TrapezoidStraight.start_velocity = input_start_velocity;
 8001c02:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <straight_table+0x1e0>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6053      	str	r3, [r2, #4]
	g_TrapezoidStraight.end_velocity = input_end_velocity;
 8001c08:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <straight_table+0x1e0>)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6093      	str	r3, [r2, #8]
	g_TrapezoidStraight.count_velocity = input_count_velocity;
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <straight_table+0x1e0>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
	g_TrapezoidStraight.acceleration = input_acceleration;
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <straight_table+0x1e0>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetStraight.acceleration = input_acceleration;
 8001c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	db03      	blt.n	8001c30 <straight_table+0x98>
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <straight_table+0x1e4>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6053      	str	r3, [r2, #4]
 8001c2e:	e006      	b.n	8001c3e <straight_table+0xa6>
	}else{g_TargetStraight.acceleration = -input_acceleration;}
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	eef1 7a67 	vneg.f32	s15, s15
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <straight_table+0x1e4>)
 8001c3a:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetStraight.velocity = input_start_velocity;
 8001c3e:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <straight_table+0x1e4>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6013      	str	r3, [r2, #0]
	g_TargetStraight.displacement = 0;
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <straight_table+0x1e4>)
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
	g_TargetTurning.velocity = 0;
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <straight_table+0x1e8>)
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
	g_TargetTurning.acceleration = 0;
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <straight_table+0x1e8>)
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
	g_TargetTurning.displacement = 0;
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <straight_table+0x1e8>)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <straight_table+0x1ec>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = input_acceleration;}
 8001c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	dd0e      	ble.n	8001c96 <straight_table+0xfe>
 8001c78:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	dd05      	ble.n	8001c96 <straight_table+0xfe>
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <straight_table+0x1ec>)
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <straight_table+0x1e4>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = -input_acceleration;}
 8001c96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dd14      	ble.n	8001cce <straight_table+0x136>
 8001ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca8:	eef1 7a67 	vneg.f32	s15, s15
 8001cac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	d509      	bpl.n	8001cce <straight_table+0x136>
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <straight_table+0x1ec>)
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc4:	eef1 7a67 	vneg.f32	s15, s15
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <straight_table+0x1e4>)
 8001cca:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetStraight.acceleration = -input_acceleration;}
 8001cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	d514      	bpl.n	8001d06 <straight_table+0x16e>
 8001cdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce0:	eef1 7a67 	vneg.f32	s15, s15
 8001ce4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	dd09      	ble.n	8001d06 <straight_table+0x16e>
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <straight_table+0x1ec>)
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfc:	eef1 7a67 	vneg.f32	s15, s15
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <straight_table+0x1e4>)
 8001d02:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetStraight.acceleration = input_acceleration;}
 8001d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	d50e      	bpl.n	8001d32 <straight_table+0x19a>
 8001d14:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	d505      	bpl.n	8001d32 <straight_table+0x19a>
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <straight_table+0x1ec>)
 8001d28:	2206      	movs	r2, #6
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <straight_table+0x1e4>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <straight_table+0x1f0>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]



	//pl_motor_start();
	while (g_acc_flag!=4){
 8001d38:	e00a      	b.n	8001d50 <straight_table+0x1b8>
//		printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_motorCount_l,g_motorCount_r,g_motorCount_l,g_motorCount_l);
		if(mode.calMazeMode==1){
 8001d3a:	78bb      	ldrb	r3, [r7, #2]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <straight_table+0x1ae>
			maze_maker();
 8001d40:	f007 fec0 	bl	8009ac4 <maze_maker>
 8001d44:	e004      	b.n	8001d50 <straight_table+0x1b8>
		}else if(mode.calMazeMode==2){
 8001d46:	78bb      	ldrb	r3, [r7, #2]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d101      	bne.n	8001d50 <straight_table+0x1b8>
			maze_makerBack();
 8001d4c:	f008 f882 	bl	8009e54 <maze_makerBack>
	while (g_acc_flag!=4){
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <straight_table+0x1ec>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d1ef      	bne.n	8001d3a <straight_table+0x1a2>
		}
	}
	modeacc = 0;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <straight_table+0x1f0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetStraight.velocity;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <straight_table+0x1e4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	ee07 3a90 	vmov	s15, r3
}
 8001d68:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000039c 	.word	0x2000039c
 8001d78:	20000210 	.word	0x20000210
 8001d7c:	200001f8 	.word	0x200001f8
 8001d80:	20000204 	.word	0x20000204
 8001d84:	20000239 	.word	0x20000239
 8001d88:	20000238 	.word	0x20000238

08001d8c <turning_table>:


float turning_table(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d96:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d9a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d9e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001da2:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001daa:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001dae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001dba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001dc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d505      	bpl.n	8001de8 <turning_table+0x5c>
 8001ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de0:	eef1 7a67 	vneg.f32	s15, s15
 8001de4:	edc7 7a01 	vstr	s15, [r7, #4]

	g_TrapezoidTurning.displacement = input_displacement;
 8001de8:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <turning_table+0x1c0>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001dee:	4a57      	ldr	r2, [pc, #348]	; (8001f4c <turning_table+0x1c0>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001df4:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <turning_table+0x1c0>)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001dfa:	4a54      	ldr	r2, [pc, #336]	; (8001f4c <turning_table+0x1c0>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <turning_table+0x1c0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	db03      	blt.n	8001e1c <turning_table+0x90>
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <turning_table+0x1c4>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6053      	str	r3, [r2, #4]
 8001e1a:	e006      	b.n	8001e2a <turning_table+0x9e>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e20:	eef1 7a67 	vneg.f32	s15, s15
 8001e24:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <turning_table+0x1c4>)
 8001e26:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8001e2a:	4a49      	ldr	r2, [pc, #292]	; (8001f50 <turning_table+0x1c4>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <turning_table+0x1c4>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = 0;
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <turning_table+0x1c8>)
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
	g_TargetStraight.acceleration = 0;
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <turning_table+0x1c8>)
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <turning_table+0x1c8>)
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <turning_table+0x1cc>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 8001e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	dd0e      	ble.n	8001e82 <turning_table+0xf6>
 8001e64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	dd05      	ble.n	8001e82 <turning_table+0xf6>
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <turning_table+0x1cc>)
 8001e78:	2205      	movs	r2, #5
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <turning_table+0x1c4>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8001e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd14      	ble.n	8001eba <turning_table+0x12e>
 8001e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e94:	eef1 7a67 	vneg.f32	s15, s15
 8001e98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d509      	bpl.n	8001eba <turning_table+0x12e>
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <turning_table+0x1cc>)
 8001ea8:	2206      	movs	r2, #6
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb0:	eef1 7a67 	vneg.f32	s15, s15
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <turning_table+0x1c4>)
 8001eb6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8001eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d514      	bpl.n	8001ef2 <turning_table+0x166>
 8001ec8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ecc:	eef1 7a67 	vneg.f32	s15, s15
 8001ed0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	dd09      	ble.n	8001ef2 <turning_table+0x166>
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <turning_table+0x1cc>)
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee8:	eef1 7a67 	vneg.f32	s15, s15
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <turning_table+0x1c4>)
 8001eee:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 8001ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d50e      	bpl.n	8001f1e <turning_table+0x192>
 8001f00:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d505      	bpl.n	8001f1e <turning_table+0x192>
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <turning_table+0x1cc>)
 8001f14:	2206      	movs	r2, #6
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <turning_table+0x1c4>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <turning_table+0x1d0>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 8001f24:	bf00      	nop
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <turning_table+0x1cc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d1fa      	bne.n	8001f26 <turning_table+0x19a>

	}
	modeacc = 0;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <turning_table+0x1d0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <turning_table+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	ee07 3a90 	vmov	s15, r3
}
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000224 	.word	0x20000224
 8001f50:	20000204 	.word	0x20000204
 8001f54:	200001f8 	.word	0x200001f8
 8001f58:	20000239 	.word	0x20000239
 8001f5c:	20000238 	.word	0x20000238

08001f60 <slalom_table>:


float slalom_table(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f6a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f6e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f72:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f76:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f7a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8001f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f82:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8001f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8001f92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f96:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8001f9a:	ed97 7a00 	vldr	s14, [r7]
 8001f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa2:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8001fa6:	edd7 7a00 	vldr	s15, [r7]
 8001faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d505      	bpl.n	8001fc0 <slalom_table+0x60>
 8001fb4:	edd7 7a00 	vldr	s15, [r7]
 8001fb8:	eef1 7a67 	vneg.f32	s15, s15
 8001fbc:	edc7 7a00 	vstr	s15, [r7]

	g_TrapezoidTurning.displacement = input_displacement;
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <slalom_table+0x1c4>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6013      	str	r3, [r2, #0]
	g_TrapezoidTurning.start_velocity = input_start_velocity;
 8001fc6:	4a57      	ldr	r2, [pc, #348]	; (8002124 <slalom_table+0x1c4>)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6053      	str	r3, [r2, #4]
	g_TrapezoidTurning.end_velocity = input_end_velocity;
 8001fcc:	4a55      	ldr	r2, [pc, #340]	; (8002124 <slalom_table+0x1c4>)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6093      	str	r3, [r2, #8]
	g_TrapezoidTurning.count_velocity = input_count_velocity;
 8001fd2:	4a54      	ldr	r2, [pc, #336]	; (8002124 <slalom_table+0x1c4>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	60d3      	str	r3, [r2, #12]
	g_TrapezoidTurning.acceleration = input_acceleration;
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <slalom_table+0x1c4>)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){g_TargetTurning.acceleration = input_acceleration;
 8001fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	db03      	blt.n	8001ff4 <slalom_table+0x94>
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <slalom_table+0x1c8>)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6053      	str	r3, [r2, #4]
 8001ff2:	e006      	b.n	8002002 <slalom_table+0xa2>
	}else{g_TargetTurning.acceleration = -input_acceleration;}
 8001ff4:	edd7 7a00 	vldr	s15, [r7]
 8001ff8:	eef1 7a67 	vneg.f32	s15, s15
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <slalom_table+0x1c8>)
 8001ffe:	edc3 7a01 	vstr	s15, [r3, #4]
	g_TargetTurning.velocity = input_start_velocity;
 8002002:	4a49      	ldr	r2, [pc, #292]	; (8002128 <slalom_table+0x1c8>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6013      	str	r3, [r2, #0]
	g_TargetTurning.displacement = 0;
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <slalom_table+0x1c8>)
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
	g_TargetStraight.velocity = input_center_velocity;
 8002010:	4a46      	ldr	r2, [pc, #280]	; (800212c <slalom_table+0x1cc>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	6013      	str	r3, [r2, #0]
	g_TargetStraight.acceleration = 0;
 8002016:	4b45      	ldr	r3, [pc, #276]	; (800212c <slalom_table+0x1cc>)
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
	g_TargetStraight.displacement = 0;
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <slalom_table+0x1cc>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	609a      	str	r2, [r3, #8]

	g_acc_flag=1;
 8002026:	4b42      	ldr	r3, [pc, #264]	; (8002130 <slalom_table+0x1d0>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = input_acceleration;}
 800202c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd0e      	ble.n	8002058 <slalom_table+0xf8>
 800203a:	ed97 7a07 	vldr	s14, [r7, #28]
 800203e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	dd05      	ble.n	8002058 <slalom_table+0xf8>
 800204c:	4b38      	ldr	r3, [pc, #224]	; (8002130 <slalom_table+0x1d0>)
 800204e:	2205      	movs	r2, #5
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	4a35      	ldr	r2, [pc, #212]	; (8002128 <slalom_table+0x1c8>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = -input_acceleration;}
 8002058:	edd7 7a04 	vldr	s15, [r7, #16]
 800205c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd14      	ble.n	8002090 <slalom_table+0x130>
 8002066:	edd7 7a04 	vldr	s15, [r7, #16]
 800206a:	eef1 7a67 	vneg.f32	s15, s15
 800206e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d509      	bpl.n	8002090 <slalom_table+0x130>
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <slalom_table+0x1d0>)
 800207e:	2206      	movs	r2, #6
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	edd7 7a00 	vldr	s15, [r7]
 8002086:	eef1 7a67 	vneg.f32	s15, s15
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <slalom_table+0x1c8>)
 800208c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;g_TargetTurning.acceleration = -input_acceleration;}
 8002090:	edd7 7a04 	vldr	s15, [r7, #16]
 8002094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209c:	d514      	bpl.n	80020c8 <slalom_table+0x168>
 800209e:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a2:	eef1 7a67 	vneg.f32	s15, s15
 80020a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd09      	ble.n	80020c8 <slalom_table+0x168>
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <slalom_table+0x1d0>)
 80020b6:	2205      	movs	r2, #5
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	edd7 7a00 	vldr	s15, [r7]
 80020be:	eef1 7a67 	vneg.f32	s15, s15
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <slalom_table+0x1c8>)
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;g_TargetTurning.acceleration = input_acceleration;}
 80020c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	d50e      	bpl.n	80020f4 <slalom_table+0x194>
 80020d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020da:	edd7 7a04 	vldr	s15, [r7, #16]
 80020de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d505      	bpl.n	80020f4 <slalom_table+0x194>
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <slalom_table+0x1d0>)
 80020ea:	2206      	movs	r2, #6
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <slalom_table+0x1c8>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <slalom_table+0x1d4>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]


	//pl_motor_start();
	while (g_acc_flag!=4){
 80020fa:	bf00      	nop
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <slalom_table+0x1d0>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b04      	cmp	r3, #4
 8002104:	d1fa      	bne.n	80020fc <slalom_table+0x19c>

	}
	modeacc = 0;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <slalom_table+0x1d4>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]

	//pl_motor_stop();

	return g_TargetTurning.velocity;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <slalom_table+0x1c8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	ee07 3a90 	vmov	s15, r3
}
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000224 	.word	0x20000224
 8002128:	20000204 	.word	0x20000204
 800212c:	200001f8 	.word	0x200001f8
 8002130:	20000239 	.word	0x20000239
 8002134:	20000238 	.word	0x20000238

08002138 <interrupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interrupt_calSensor(void){
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
	int j;

//	if (sensor_mode == 1) {
	for (j = 19; j >= 1; j--) {
 800213e:	2313      	movs	r3, #19
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	e02c      	b.n	800219e <interrupt_calSensor+0x66>
		g_sensor[0][j] = g_sensor[0][j - 1];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	4a4d      	ldr	r2, [pc, #308]	; (8002280 <interrupt_calSensor+0x148>)
 800214a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800214e:	494c      	ldr	r1, [pc, #304]	; (8002280 <interrupt_calSensor+0x148>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a49      	ldr	r2, [pc, #292]	; (8002280 <interrupt_calSensor+0x148>)
 800215c:	3314      	adds	r3, #20
 800215e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002162:	4947      	ldr	r1, [pc, #284]	; (8002280 <interrupt_calSensor+0x148>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3314      	adds	r3, #20
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	4a43      	ldr	r2, [pc, #268]	; (8002280 <interrupt_calSensor+0x148>)
 8002172:	3328      	adds	r3, #40	; 0x28
 8002174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002178:	4941      	ldr	r1, [pc, #260]	; (8002280 <interrupt_calSensor+0x148>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3328      	adds	r3, #40	; 0x28
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3b01      	subs	r3, #1
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <interrupt_calSensor+0x148>)
 8002188:	333c      	adds	r3, #60	; 0x3c
 800218a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800218e:	493c      	ldr	r1, [pc, #240]	; (8002280 <interrupt_calSensor+0x148>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	333c      	adds	r3, #60	; 0x3c
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dccf      	bgt.n	8002144 <interrupt_calSensor+0xc>
	}
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80021a4:	4b37      	ldr	r3, [pc, #220]	; (8002284 <interrupt_calSensor+0x14c>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <interrupt_calSensor+0x150>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a33      	ldr	r2, [pc, #204]	; (8002280 <interrupt_calSensor+0x148>)
 80021b2:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <interrupt_calSensor+0x14c>)
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <interrupt_calSensor+0x150>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <interrupt_calSensor+0x148>)
 80021c2:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <interrupt_calSensor+0x14c>)
 80021c6:	889b      	ldrh	r3, [r3, #4]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <interrupt_calSensor+0x150>)
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <interrupt_calSensor+0x148>)
 80021d2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 80021d6:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <interrupt_calSensor+0x14c>)
 80021d8:	88db      	ldrh	r3, [r3, #6]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <interrupt_calSensor+0x150>)
 80021de:	88db      	ldrh	r3, [r3, #6]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <interrupt_calSensor+0x148>)
 80021e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	for (j = 0; j <= 3; j++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	e03d      	b.n	800226a <interrupt_calSensor+0x132>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 80021ee:	4924      	ldr	r1, [pc, #144]	; (8002280 <interrupt_calSensor+0x148>)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	440b      	add	r3, r1
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	4820      	ldr	r0, [pc, #128]	; (8002280 <interrupt_calSensor+0x148>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4403      	add	r3, r0
 800220c:	332c      	adds	r3, #44	; 0x2c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1aca      	subs	r2, r1, r3
 8002212:	491e      	ldr	r1, [pc, #120]	; (800228c <interrupt_calSensor+0x154>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 800221a:	4919      	ldr	r1, [pc, #100]	; (8002280 <interrupt_calSensor+0x148>)
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	4815      	ldr	r0, [pc, #84]	; (8002280 <interrupt_calSensor+0x148>)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	4403      	add	r3, r0
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4419      	add	r1, r3
 800223e:	4810      	ldr	r0, [pc, #64]	; (8002280 <interrupt_calSensor+0x148>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4403      	add	r3, r0
 800224c:	3308      	adds	r3, #8
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	440b      	add	r3, r1
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <interrupt_calSensor+0x158>)
 8002254:	fb82 1203 	smull	r1, r2, r2, r3
 8002258:	17db      	asrs	r3, r3, #31
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	490d      	ldr	r1, [pc, #52]	; (8002294 <interrupt_calSensor+0x15c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 3; j++) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3301      	adds	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	ddbe      	ble.n	80021ee <interrupt_calSensor+0xb6>
	}


//	}

}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	2000023c 	.word	0x2000023c
 8002284:	200003b0 	.word	0x200003b0
 8002288:	200003b8 	.word	0x200003b8
 800228c:	2000037c 	.word	0x2000037c
 8002290:	55555556 	.word	0x55555556
 8002294:	2000038c 	.word	0x2000038c

08002298 <init_WallControl>:

uint8_t g_WallControl_mode;//0で壁制御なし、1で通常の壁制御、2で斜めの制御
uint8_t g_WallControlStatus;
uint8_t StabilityCount_L,StabilityCount_R;

void init_WallControl(void){
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
	g_WallControl_mode=0;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <init_WallControl+0x28>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus=0;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <init_WallControl+0x2c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
	StabilityCount_L=0;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <init_WallControl+0x30>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
	StabilityCount_R=0;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <init_WallControl+0x34>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000039c 	.word	0x2000039c
 80022c4:	2000039d 	.word	0x2000039d
 80022c8:	2000039e 	.word	0x2000039e
 80022cc:	2000039f 	.word	0x2000039f

080022d0 <calWallConrol>:

float calWallConrol(void){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;


    if(g_WallControl_mode == 0){
 80022d6:	4ba2      	ldr	r3, [pc, #648]	; (8002560 <calWallConrol+0x290>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <calWallConrol+0x28>
    	g_WallControlStatus=0;
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <calWallConrol+0x294>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    	StabilityCount_L=0;
 80022e4:	4ba0      	ldr	r3, [pc, #640]	; (8002568 <calWallConrol+0x298>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
    	StabilityCount_R=0;
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <calWallConrol+0x29c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    	PID_wall=0;
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	e120      	b.n	800253a <calWallConrol+0x26a>

    }else if (g_WallControl_mode == 1) {
 80022f8:	4b99      	ldr	r3, [pc, #612]	; (8002560 <calWallConrol+0x290>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 80db 	bne.w	80024b8 <calWallConrol+0x1e8>

		// 左壁の有無の判定
		if ((g_WallControlStatus >> 0) & 1 == 1){
 8002302:	4b98      	ldr	r3, [pc, #608]	; (8002564 <calWallConrol+0x294>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00e      	beq.n	800232c <calWallConrol+0x5c>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L || g_sensor_diff[SENSOR_LEFT] > CONTROLWALLCUT_THRESHOLD_L){
 800230e:	4b98      	ldr	r3, [pc, #608]	; (8002570 <calWallConrol+0x2a0>)
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	2b6d      	cmp	r3, #109	; 0x6d
 8002314:	dd03      	ble.n	800231e <calWallConrol+0x4e>
 8002316:	4b97      	ldr	r3, [pc, #604]	; (8002574 <calWallConrol+0x2a4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b19      	cmp	r3, #25
 800231c:	dd22      	ble.n	8002364 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus - 1;
 800231e:	4b91      	ldr	r3, [pc, #580]	; (8002564 <calWallConrol+0x294>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <calWallConrol+0x294>)
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e01b      	b.n	8002364 <calWallConrol+0x94>
			}
		}else{
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L && g_sensor_diff[SENSOR_LEFT] < CONTROLWALLCUT_THRESHOLD_L){
 800232c:	4b90      	ldr	r3, [pc, #576]	; (8002570 <calWallConrol+0x2a0>)
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	2b6e      	cmp	r3, #110	; 0x6e
 8002332:	dd0a      	ble.n	800234a <calWallConrol+0x7a>
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <calWallConrol+0x2a4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b18      	cmp	r3, #24
 800233a:	dc06      	bgt.n	800234a <calWallConrol+0x7a>
				StabilityCount_L++;
 800233c:	4b8a      	ldr	r3, [pc, #552]	; (8002568 <calWallConrol+0x298>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <calWallConrol+0x298>)
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e002      	b.n	8002350 <calWallConrol+0x80>
			}else{
				StabilityCount_L=0;
 800234a:	4b87      	ldr	r3, [pc, #540]	; (8002568 <calWallConrol+0x298>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_L>=10){
 8002350:	4b85      	ldr	r3, [pc, #532]	; (8002568 <calWallConrol+0x298>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d905      	bls.n	8002364 <calWallConrol+0x94>
				g_WallControlStatus=g_WallControlStatus + 1;
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <calWallConrol+0x294>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b80      	ldr	r3, [pc, #512]	; (8002564 <calWallConrol+0x294>)
 8002362:	701a      	strb	r2, [r3, #0]
			}
		}
		// 右壁の有無の判定
		if ((g_WallControlStatus >> 1)&1 == 1){
 8002364:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <calWallConrol+0x294>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00f      	beq.n	8002394 <calWallConrol+0xc4>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R || g_sensor_diff[SENSOR_RIGHT] > CONTROLWALLCUT_THRESHOLD_R){
 8002374:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <calWallConrol+0x2a0>)
 8002376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800237a:	2b6d      	cmp	r3, #109	; 0x6d
 800237c:	dd03      	ble.n	8002386 <calWallConrol+0xb6>
 800237e:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <calWallConrol+0x2a4>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b19      	cmp	r3, #25
 8002384:	dd23      	ble.n	80023ce <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus - 2;
 8002386:	4b77      	ldr	r3, [pc, #476]	; (8002564 <calWallConrol+0x294>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	3b02      	subs	r3, #2
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b75      	ldr	r3, [pc, #468]	; (8002564 <calWallConrol+0x294>)
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e01c      	b.n	80023ce <calWallConrol+0xfe>
			}
		}else{
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R && g_sensor_diff[SENSOR_RIGHT] < CONTROLWALLCUT_THRESHOLD_R){
 8002394:	4b76      	ldr	r3, [pc, #472]	; (8002570 <calWallConrol+0x2a0>)
 8002396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800239a:	2b6e      	cmp	r3, #110	; 0x6e
 800239c:	dd0a      	ble.n	80023b4 <calWallConrol+0xe4>
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <calWallConrol+0x2a4>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	dc06      	bgt.n	80023b4 <calWallConrol+0xe4>
				StabilityCount_R++;
 80023a6:	4b71      	ldr	r3, [pc, #452]	; (800256c <calWallConrol+0x29c>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b6f      	ldr	r3, [pc, #444]	; (800256c <calWallConrol+0x29c>)
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e002      	b.n	80023ba <calWallConrol+0xea>
			}else{
				StabilityCount_R=0;
 80023b4:	4b6d      	ldr	r3, [pc, #436]	; (800256c <calWallConrol+0x29c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
			}
			if(StabilityCount_R>=10){
 80023ba:	4b6c      	ldr	r3, [pc, #432]	; (800256c <calWallConrol+0x29c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b09      	cmp	r3, #9
 80023c0:	d905      	bls.n	80023ce <calWallConrol+0xfe>
				g_WallControlStatus=g_WallControlStatus + 2;
 80023c2:	4b68      	ldr	r3, [pc, #416]	; (8002564 <calWallConrol+0x294>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	3302      	adds	r3, #2
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <calWallConrol+0x294>)
 80023cc:	701a      	strb	r2, [r3, #0]
			}
		}
		switch (g_WallControlStatus){
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <calWallConrol+0x294>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	f200 80b1 	bhi.w	800253a <calWallConrol+0x26a>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <calWallConrol+0x110>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	080023f9 	.word	0x080023f9
 80023e8:	08002431 	.word	0x08002431
 80023ec:	0800246f 	.word	0x0800246f
		case 0://両壁なし
			PID_wall= 0;
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
		break;
 80023f6:	e0a0      	b.n	800253a <calWallConrol+0x26a>
		case 1://左壁のみ
			PID_wall= SENSOR_GAIN*(2*(float)(g_sensor[SENSOR_LEFT][0] - CENTER_L));
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <calWallConrol+0x2a0>)
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800240c:	ee17 0a90 	vmov	r0, s15
 8002410:	f7fe f89a 	bl	8000548 <__aeabi_f2d>
 8002414:	a34e      	add	r3, pc, #312	; (adr r3, 8002550 <calWallConrol+0x280>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fe f8ed 	bl	80005f8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbdf 	bl	8000be8 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	607b      	str	r3, [r7, #4]
		break;
 800242e:	e084      	b.n	800253a <calWallConrol+0x26a>
		case 2://右壁のみ
			PID_wall= SENSOR_GAIN * (-2 * (float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <calWallConrol+0x2a0>)
 8002432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002436:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	ee17 0a90 	vmov	r0, s15
 800244e:	f7fe f87b 	bl	8000548 <__aeabi_f2d>
 8002452:	a33f      	add	r3, pc, #252	; (adr r3, 8002550 <calWallConrol+0x280>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8ce 	bl	80005f8 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fbc0 	bl	8000be8 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	607b      	str	r3, [r7, #4]
		break;
 800246c:	e065      	b.n	800253a <calWallConrol+0x26a>
		case 3://両壁あり
			PID_wall= SENSOR_GAIN * ((float)(g_sensor[SENSOR_LEFT][0] - CENTER_L)-(float)(g_sensor[SENSOR_RIGHT][0] - CENTER_R));
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <calWallConrol+0x2a0>)
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <calWallConrol+0x2a0>)
 8002480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002484:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	ee17 0a90 	vmov	r0, s15
 8002498:	f7fe f856 	bl	8000548 <__aeabi_f2d>
 800249c:	a32c      	add	r3, pc, #176	; (adr r3, 8002550 <calWallConrol+0x280>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8a9 	bl	80005f8 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb9b 	bl	8000be8 <__aeabi_d2f>
 80024b2:	4603      	mov	r3, r0
 80024b4:	607b      	str	r3, [r7, #4]
		break;
 80024b6:	e040      	b.n	800253a <calWallConrol+0x26a>
		}


	}else if (g_WallControl_mode == 2) {
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <calWallConrol+0x290>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d13c      	bne.n	800253a <calWallConrol+0x26a>
// 斜めの制御
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_FRONT_L){
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <calWallConrol+0x2a0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b78      	cmp	r3, #120	; 0x78
 80024c6:	dd17      	ble.n	80024f8 <calWallConrol+0x228>
			PID_wall= SENSOR_GAIN_SLANT*((float)(g_sensor[SENSOR_FRONT_LEFT][0] - CONTROLWALL_THRESHOLD_FRONT_L));
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <calWallConrol+0x2a0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3b78      	subs	r3, #120	; 0x78
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d6:	ee17 0a90 	vmov	r0, s15
 80024da:	f7fe f835 	bl	8000548 <__aeabi_f2d>
 80024de:	a31e      	add	r3, pc, #120	; (adr r3, 8002558 <calWallConrol+0x288>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f888 	bl	80005f8 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb7a 	bl	8000be8 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	607b      	str	r3, [r7, #4]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_FRONT_R){
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <calWallConrol+0x2a0>)
 80024fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024fe:	2b78      	cmp	r3, #120	; 0x78
 8002500:	dd1b      	ble.n	800253a <calWallConrol+0x26a>
			PID_wall= SENSOR_GAIN_SLANT*(-(float)(g_sensor[SENSOR_FRONT_RIGHT][0] - CONTROLWALL_THRESHOLD_FRONT_R));
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <calWallConrol+0x2a0>)
 8002504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002508:	3b78      	subs	r3, #120	; 0x78
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002512:	eef1 7a67 	vneg.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f814 	bl	8000548 <__aeabi_f2d>
 8002520:	a30d      	add	r3, pc, #52	; (adr r3, 8002558 <calWallConrol+0x288>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f867 	bl	80005f8 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb59 	bl	8000be8 <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	607b      	str	r3, [r7, #4]
		}

	}

	return PID_wall;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	ee07 3a90 	vmov	s15, r3
}
 8002540:	eeb0 0a67 	vmov.f32	s0, s15
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
 8002550:	70a3d70a 	.word	0x70a3d70a
 8002554:	3fb70a3d 	.word	0x3fb70a3d
 8002558:	d2f1a9fc 	.word	0xd2f1a9fc
 800255c:	3f50624d 	.word	0x3f50624d
 8002560:	2000039c 	.word	0x2000039c
 8002564:	2000039d 	.word	0x2000039d
 8002568:	2000039e 	.word	0x2000039e
 800256c:	2000039f 	.word	0x2000039f
 8002570:	2000023c 	.word	0x2000023c
 8002574:	2000037c 	.word	0x2000037c

08002578 <lcd_cmd>:
#include "PL_lcd.h"
#include "i2c.h"


void lcd_cmd(uint8_t x)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x00, x };
 8002582:	2300      	movs	r3, #0
 8002584:	733b      	strb	r3, [r7, #12]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800258a:	e007      	b.n	800259c <lcd_cmd+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <lcd_cmd+0x48>)
 800258e:	f00c f9b1 	bl	800e8f4 <HAL_I2C_GetError>
 8002592:	4603      	mov	r3, r0
 8002594:	2b04      	cmp	r3, #4
 8002596:	d001      	beq.n	800259c <lcd_cmd+0x24>
    {
      Error_Handler();
 8002598:	f001 fed9 	bl	800434e <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2302      	movs	r3, #2
 80025a8:	217c      	movs	r1, #124	; 0x7c
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <lcd_cmd+0x48>)
 80025ac:	f00c f8ae 	bl	800e70c <HAL_I2C_Master_Transmit>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ea      	bne.n	800258c <lcd_cmd+0x14>
    }
  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000a04 	.word	0x20000a04

080025c4 <lcd_data>:

void lcd_data(uint8_t x)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[2] = { 0x40, x };
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	733b      	strb	r3, [r7, #12]
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	737b      	strb	r3, [r7, #13]
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80025d6:	e007      	b.n	80025e8 <lcd_data+0x24>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <lcd_data+0x48>)
 80025da:	f00c f98b 	bl	800e8f4 <HAL_I2C_GetError>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d001      	beq.n	80025e8 <lcd_data+0x24>
    {
      Error_Handler();
 80025e4:	f001 feb3 	bl	800434e <Error_Handler>
  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t*)aTxBuffer, 2, 1000) != HAL_OK) {
 80025e8:	f107 020c 	add.w	r2, r7, #12
 80025ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2302      	movs	r3, #2
 80025f4:	217c      	movs	r1, #124	; 0x7c
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <lcd_data+0x48>)
 80025f8:	f00c f888 	bl	800e70c <HAL_I2C_Master_Transmit>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ea      	bne.n	80025d8 <lcd_data+0x14>
    }
  }
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000a04 	.word	0x20000a04

08002610 <pl_lcd_puts>:

void pl_lcd_puts(const char *s)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  while(*s) {
 8002618:	e006      	b.n	8002628 <pl_lcd_puts+0x18>
	  lcd_data(*s++);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffce 	bl	80025c4 <lcd_data>
  while(*s) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f4      	bne.n	800261a <pl_lcd_puts+0xa>
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <pl_lcd_init>:

// param:
//  contrast: 0 ~ 63 (最初は大きくして調整)
void pl_lcd_init(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
  // LCD initialize(裏面に記載)
  lcd_cmd(0x38); // function set
 800263e:	2038      	movs	r0, #56	; 0x38
 8002640:	f7ff ff9a 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x39); // function set
 8002644:	2039      	movs	r0, #57	; 0x39
 8002646:	f7ff ff97 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x14); // interval osc
 800264a:	2014      	movs	r0, #20
 800264c:	f7ff ff94 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x70); // contrast low
 8002650:	2070      	movs	r0, #112	; 0x70
 8002652:	f7ff ff91 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x56); // contrast high / icon / power
 8002656:	2056      	movs	r0, #86	; 0x56
 8002658:	f7ff ff8e 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x6c); // follower control
 800265c:	206c      	movs	r0, #108	; 0x6c
 800265e:	f7ff ff8b 	bl	8002578 <lcd_cmd>
  HAL_Delay(300);
 8002662:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002666:	f009 ff3f 	bl	800c4e8 <HAL_Delay>
  lcd_cmd(0x38); // function set
 800266a:	2038      	movs	r0, #56	; 0x38
 800266c:	f7ff ff84 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x0c); // display on
 8002670:	200c      	movs	r0, #12
 8002672:	f7ff ff81 	bl	8002578 <lcd_cmd>
  lcd_cmd(0x01); // clear display
 8002676:	2001      	movs	r0, #1
 8002678:	f7ff ff7e 	bl	8002578 <lcd_cmd>
  HAL_Delay(2);
 800267c:	2002      	movs	r0, #2
 800267e:	f009 ff33 	bl	800c4e8 <HAL_Delay>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}

08002686 <pl_lcd_pos>:

void pl_lcd_move(uint8_t pos){
  lcd_cmd(0x80 | pos);
}

void pl_lcd_pos(uint8_t raw, uint8_t col) {
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	460a      	mov	r2, r1
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	4613      	mov	r3, r2
 8002694:	71bb      	strb	r3, [r7, #6]
  lcd_cmd(0x80 | (raw << 6) | col);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	b2da      	uxtb	r2, r3
 800269c:	79bb      	ldrb	r3, [r7, #6]
 800269e:	4313      	orrs	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff65 	bl	8002578 <lcd_cmd>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <pl_lcd_clear>:

void pl_lcd_clear() {
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
  lcd_cmd(0x01);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff ff5c 	bl	8002578 <lcd_cmd>
  HAL_Delay(2);
 80026c0:	2002      	movs	r0, #2
 80026c2:	f009 ff11 	bl	800c4e8 <HAL_Delay>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <write_LED>:


#include "PL_led.h"
#include "gpio.h"

void write_LED(char pin){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERFACELED_GPIO_Port,INTERFACELED_Pin,pin);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	461a      	mov	r2, r3
 80026da:	2108      	movs	r1, #8
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <write_LED+0x20>)
 80026de:	f00b ff6d 	bl	800e5bc <HAL_GPIO_WritePin>

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	48000400 	.word	0x48000400

080026f0 <pl_motor_init>:
/*	モータの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	モータの初期化する。						*/
/*******************************************************************/
void pl_motor_init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim1);//motor
 80026f4:	480a      	ldr	r0, [pc, #40]	; (8002720 <pl_motor_init+0x30>)
 80026f6:	f00d fcdf 	bl	80100b8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim1);//motor
 80026fa:	4809      	ldr	r0, [pc, #36]	; (8002720 <pl_motor_init+0x30>)
 80026fc:	f008 fef6 	bl	800b4ec <HAL_TIM_PWM_MspInit>

	  HAL_TIM_Base_Start_IT(&htim2);//motor
 8002700:	4808      	ldr	r0, [pc, #32]	; (8002724 <pl_motor_init+0x34>)
 8002702:	f00d fcd9 	bl	80100b8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim2);//motor
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <pl_motor_init+0x34>)
 8002708:	f008 fef0 	bl	800b4ec <HAL_TIM_PWM_MspInit>

	  pl_motor_mode_L(1);
 800270c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002710:	f000 f836 	bl	8002780 <pl_motor_mode_L>
	  pl_motor_mode_R(1);
 8002714:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002718:	f000 f852 	bl	80027c0 <pl_motor_mode_R>



}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000cdfc 	.word	0x2000cdfc
 8002724:	2000ce48 	.word	0x2000ce48

08002728 <pl_motor_standby>:

void pl_motor_standby(int pin){
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_ENABLE_GPIO_Port, MOTOR_ENABLE_Pin, pin);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f00b ff3d 	bl	800e5bc <HAL_GPIO_WritePin>
	pl_motor_mode_L(1);
 8002742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002746:	f000 f81b 	bl	8002780 <pl_motor_mode_L>
	pl_motor_mode_R(1);
 800274a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800274e:	f000 f837 	bl	80027c0 <pl_motor_mode_R>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	2120      	movs	r1, #32
 8002756:	4809      	ldr	r0, [pc, #36]	; (800277c <pl_motor_standby+0x54>)
 8002758:	f00b ff30 	bl	800e5bc <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800275c:	2003      	movs	r0, #3
 800275e:	f009 fec3 	bl	800c4e8 <HAL_Delay>
	HAL_GPIO_WritePin(MD_RESET_GPIO_Port,MD_RESET_Pin,GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	2120      	movs	r1, #32
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <pl_motor_standby+0x54>)
 8002768:	f00b ff28 	bl	800e5bc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800276c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002770:	f009 feba 	bl	800c4e8 <HAL_Delay>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	48000400 	.word	0x48000400

08002780 <pl_motor_mode_L>:

void pl_motor_mode_L(float velocity_l){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_l>=0){
 800278a:	edd7 7a01 	vldr	s15, [r7, #4]
 800278e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	db07      	blt.n	80027a8 <pl_motor_mode_L+0x28>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_FRONT);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	f00b ff0b 	bl	800e5bc <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
	}
}
 80027a6:	e006      	b.n	80027b6 <pl_motor_mode_L+0x36>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_L_GPIO_Port,MOTOR_CW_CCW_L_Pin,L_MOTOR_BACK);
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f00b ff03 	bl	800e5bc <HAL_GPIO_WritePin>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <pl_motor_mode_R>:

void pl_motor_mode_R(float velocity_r){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity_r>=0){
 80027ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	db05      	blt.n	80027e4 <pl_motor_mode_R+0x24>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_FRONT);
 80027d8:	2201      	movs	r2, #1
 80027da:	2110      	movs	r1, #16
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <pl_motor_mode_R+0x38>)
 80027de:	f00b feed 	bl	800e5bc <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
	}
}
 80027e2:	e004      	b.n	80027ee <pl_motor_mode_R+0x2e>
		HAL_GPIO_WritePin(MOTOR_CW_CCW_R_GPIO_Port,MOTOR_CW_CCW_R_Pin,R_MOTOR_BACK);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2110      	movs	r1, #16
 80027e8:	4803      	ldr	r0, [pc, #12]	; (80027f8 <pl_motor_mode_R+0x38>)
 80027ea:	f00b fee7 	bl	800e5bc <HAL_GPIO_WritePin>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	48000400 	.word	0x48000400

080027fc <pl_motor_start>:

void pl_motor_start(void){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	pl_interrupt_motor_count_L();
 8002800:	f000 f848 	bl	8002894 <pl_interrupt_motor_count_L>
	pl_interrupt_motor_count_R();
 8002804:	f000 f872 	bl	80028ec <pl_interrupt_motor_count_R>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002808:	2100      	movs	r1, #0
 800280a:	4804      	ldr	r0, [pc, #16]	; (800281c <pl_motor_start+0x20>)
 800280c:	f00d fd00 	bl	8010210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002810:	2104      	movs	r1, #4
 8002812:	4803      	ldr	r0, [pc, #12]	; (8002820 <pl_motor_start+0x24>)
 8002814:	f00d fcfc 	bl	8010210 <HAL_TIM_PWM_Start>
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000cdfc 	.word	0x2000cdfc
 8002820:	2000ce48 	.word	0x2000ce48

08002824 <pl_motor_stop>:

void pl_motor_stop(void){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002828:	2100      	movs	r1, #0
 800282a:	4804      	ldr	r0, [pc, #16]	; (800283c <pl_motor_stop+0x18>)
 800282c:	f00d fdce 	bl	80103cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002830:	2104      	movs	r1, #4
 8002832:	4803      	ldr	r0, [pc, #12]	; (8002840 <pl_motor_stop+0x1c>)
 8002834:	f00d fdca 	bl	80103cc <HAL_TIM_PWM_Stop>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000cdfc 	.word	0x2000cdfc
 8002840:	2000ce48 	.word	0x2000ce48

08002844 <pl_motor_count_L>:

void pl_motor_count_L(float velocity_l){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_l;
	g_motorCount_l = calMotorVelocityCount(velocity_l);
 800284e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002852:	f000 f879 	bl	8002948 <calMotorVelocityCount>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b03      	ldr	r3, [pc, #12]	; (8002868 <pl_motor_count_L+0x24>)
 800285c:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200003a0 	.word	0x200003a0

0800286c <pl_motor_count_R>:

void pl_motor_count_R(float velocity_r){
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint16_t motorCount_r;
	g_motorCount_r = calMotorVelocityCount(velocity_r);
 8002876:	ed97 0a01 	vldr	s0, [r7, #4]
 800287a:	f000 f865 	bl	8002948 <calMotorVelocityCount>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b03      	ldr	r3, [pc, #12]	; (8002890 <pl_motor_count_R+0x24>)
 8002884:	801a      	strh	r2, [r3, #0]
//	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
//	__HAL_TIM_SET_COUNTER(&htim2, 0);

}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200003a2 	.word	0x200003a2

08002894 <pl_interrupt_motor_count_L>:

void pl_interrupt_motor_count_L(void){
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, g_motorCount_l);
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <pl_interrupt_motor_count_L+0x50>)
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <pl_interrupt_motor_count_L+0x54>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <pl_interrupt_motor_count_L+0x50>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <pl_interrupt_motor_count_L+0x54>)
 80028aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,(uint16_t)((float)(g_motorCount_l)/2));
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <pl_interrupt_motor_count_L+0x50>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <pl_interrupt_motor_count_L+0x54>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <pl_interrupt_motor_count_L+0x54>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200003a0 	.word	0x200003a0
 80028e8:	2000cdfc 	.word	0x2000cdfc

080028ec <pl_interrupt_motor_count_R>:

void pl_interrupt_motor_count_R(void){
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim2, g_motorCount_r);
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <pl_interrupt_motor_count_R+0x50>)
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <pl_interrupt_motor_count_R+0x54>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <pl_interrupt_motor_count_R+0x50>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <pl_interrupt_motor_count_R+0x54>)
 8002902:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,(uint16_t)((float)(g_motorCount_r)/2));
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <pl_interrupt_motor_count_R+0x50>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002910:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800291c:	ee17 3a90 	vmov	r3, s15
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <pl_interrupt_motor_count_R+0x54>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <pl_interrupt_motor_count_R+0x54>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200003a2 	.word	0x200003a2
 8002940:	2000ce48 	.word	0x2000ce48
 8002944:	00000000 	.word	0x00000000

08002948 <calMotorVelocityCount>:
/*******************************************************************/
/*	速度からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	速度からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calMotorVelocityCount(float Velocity) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	ed87 0a01 	vstr	s0, [r7, #4]
	float f_MotorCount;
	uint16_t MotorCount;

	f_MotorCount=(10000000 * STEP_DEGREE * M_PI / 180 * TIRE_DIAMETER / 2 / fabs(Velocity));
 8002952:	edd7 7a01 	vldr	s15, [r7, #4]
 8002956:	eef0 7ae7 	vabs.f32	s15, s15
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fdf3 	bl	8000548 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	a11d      	add	r1, pc, #116	; (adr r1, 80029dc <calMotorVelocityCount+0x94>)
 8002968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800296c:	f7fd ff6e 	bl	800084c <__aeabi_ddiv>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f936 	bl	8000be8 <__aeabi_d2f>
 800297c:	4603      	mov	r3, r0
 800297e:	60bb      	str	r3, [r7, #8]
	if (Velocity == 0 || f_MotorCount > 65535 || f_MotorCount < 0) {
 8002980:	edd7 7a01 	vldr	s15, [r7, #4]
 8002984:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	d00f      	beq.n	80029ae <calMotorVelocityCount+0x66>
 800298e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002992:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80029d8 <calMotorVelocityCount+0x90>
 8002996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	dc06      	bgt.n	80029ae <calMotorVelocityCount+0x66>
 80029a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	d503      	bpl.n	80029b6 <calMotorVelocityCount+0x6e>
		MotorCount = 30535 - 1;
 80029ae:	f247 7346 	movw	r3, #30534	; 0x7746
 80029b2:	81fb      	strh	r3, [r7, #14]
 80029b4:	e008      	b.n	80029c8 <calMotorVelocityCount+0x80>
	} else {
		MotorCount = (uint16_t) (f_MotorCount)-1;
 80029b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	81fb      	strh	r3, [r7, #14]
	}

	return MotorCount;
 80029c8:	89fb      	ldrh	r3, [r7, #14]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	f3af 8000 	nop.w
 80029d8:	477fff00 	.word	0x477fff00
 80029dc:	536aad35 	.word	0x536aad35
 80029e0:	414e7ff6 	.word	0x414e7ff6
 80029e4:	00000000 	.word	0x00000000

080029e8 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 80029ee:	4828      	ldr	r0, [pc, #160]	; (8002a90 <pl_getbatt+0xa8>)
 80029f0:	f00a f8fc 	bl	800cbec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80029f4:	2132      	movs	r1, #50	; 0x32
 80029f6:	4826      	ldr	r0, [pc, #152]	; (8002a90 <pl_getbatt+0xa8>)
 80029f8:	f00a f98e 	bl	800cd18 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 80029fc:	4824      	ldr	r0, [pc, #144]	; (8002a90 <pl_getbatt+0xa8>)
 80029fe:	f00a fb00 	bl	800d002 <HAL_ADC_GetValue>
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8002a06:	4822      	ldr	r0, [pc, #136]	; (8002a90 <pl_getbatt+0xa8>)
 8002a08:	f00a f953 	bl	800ccb2 <HAL_ADC_Stop>
	batt = 3.3  * (float) battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	ee17 0a90 	vmov	r0, s15
 8002a1a:	f7fd fd95 	bl	8000548 <__aeabi_f2d>
 8002a1e:	a318      	add	r3, pc, #96	; (adr r3, 8002a80 <pl_getbatt+0x98>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fde8 	bl	80005f8 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	a315      	add	r3, pc, #84	; (adr r3, 8002a88 <pl_getbatt+0xa0>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd ff09 	bl	800084c <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <pl_getbatt+0xac>)
 8002a48:	f7fd fdd6 	bl	80005f8 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <pl_getbatt+0xb0>)
 8002a5a:	f7fd fef7 	bl	800084c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f8bf 	bl	8000be8 <__aeabi_d2f>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	603b      	str	r3, [r7, #0]


return batt;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	ee07 3a90 	vmov	s15, r3
}
 8002a74:	eeb0 0a67 	vmov.f32	s0, s15
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	66666666 	.word	0x66666666
 8002a84:	400a6666 	.word	0x400a6666
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	408ff800 	.word	0x408ff800
 8002a90:	20000958 	.word	0x20000958
 8002a94:	405e8000 	.word	0x405e8000
 8002a98:	40360000 	.word	0x40360000
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8002aa6:	4862      	ldr	r0, [pc, #392]	; (8002c30 <pl_callback_getSensor+0x190>)
 8002aa8:	f00a fa4a 	bl	800cf40 <HAL_ADC_Stop_DMA>
	switch (AD_step) {
 8002aac:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <pl_callback_getSensor+0x194>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d042      	beq.n	8002b3a <pl_callback_getSensor+0x9a>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	dc66      	bgt.n	8002b86 <pl_callback_getSensor+0xe6>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <pl_callback_getSensor+0x22>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d016      	beq.n	8002aee <pl_callback_getSensor+0x4e>
 8002ac0:	e061      	b.n	8002b86 <pl_callback_getSensor+0xe6>
		case 0:
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_SET);
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ac8:	485b      	ldr	r0, [pc, #364]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002aca:	f00b fd77 	bl	800e5bc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ad4:	4858      	ldr	r0, [pc, #352]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002ad6:	f00b fd71 	bl	800e5bc <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	e002      	b.n	8002ae6 <pl_callback_getSensor+0x46>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	ddf9      	ble.n	8002ae0 <pl_callback_getSensor+0x40>
					}
			break;
 8002aec:	e04b      	b.n	8002b86 <pl_callback_getSensor+0xe6>
		case 1:
			g_sensor_on[0] = g_ADCBuffer[1];
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002af0:	885a      	ldrh	r2, [r3, #2]
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <pl_callback_getSensor+0x1a0>)
 8002af4:	801a      	strh	r2, [r3, #0]
			g_sensor_on[1] = g_ADCBuffer[2];
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002af8:	889a      	ldrh	r2, [r3, #4]
 8002afa:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <pl_callback_getSensor+0x1a0>)
 8002afc:	805a      	strh	r2, [r3, #2]
			g_sensor_off[2] = g_ADCBuffer[3];
 8002afe:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b00:	88da      	ldrh	r2, [r3, #6]
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <pl_callback_getSensor+0x1a4>)
 8002b04:	809a      	strh	r2, [r3, #4]
			g_sensor_off[3] = g_ADCBuffer[4];
 8002b06:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b08:	891a      	ldrh	r2, [r3, #8]
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <pl_callback_getSensor+0x1a4>)
 8002b0c:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b14:	4848      	ldr	r0, [pc, #288]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002b16:	f00b fd51 	bl	800e5bc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_SET);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b20:	4845      	ldr	r0, [pc, #276]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002b22:	f00b fd4b 	bl	800e5bc <HAL_GPIO_WritePin>
					for (j = 0; j <= 100; j++) {
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	e002      	b.n	8002b32 <pl_callback_getSensor+0x92>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b64      	cmp	r3, #100	; 0x64
 8002b36:	ddf9      	ble.n	8002b2c <pl_callback_getSensor+0x8c>
					}
			break;
 8002b38:	e025      	b.n	8002b86 <pl_callback_getSensor+0xe6>
		case 2:
			g_sensor_off[0] = g_ADCBuffer[1];
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b3c:	885a      	ldrh	r2, [r3, #2]
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <pl_callback_getSensor+0x1a4>)
 8002b40:	801a      	strh	r2, [r3, #0]
			g_sensor_off[1] = g_ADCBuffer[2];
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b44:	889a      	ldrh	r2, [r3, #4]
 8002b46:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <pl_callback_getSensor+0x1a4>)
 8002b48:	805a      	strh	r2, [r3, #2]
			g_sensor_on[2] = g_ADCBuffer[3];
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b4c:	88da      	ldrh	r2, [r3, #6]
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <pl_callback_getSensor+0x1a0>)
 8002b50:	809a      	strh	r2, [r3, #4]
			g_sensor_on[3] = g_ADCBuffer[4];
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b54:	891a      	ldrh	r2, [r3, #8]
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <pl_callback_getSensor+0x1a0>)
 8002b58:	80da      	strh	r2, [r3, #6]
			HAL_GPIO_WritePin(SENSORLED_1_GPIO_Port, SENSORLED_1_Pin, GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b60:	4835      	ldr	r0, [pc, #212]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002b62:	f00b fd2b 	bl	800e5bc <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(SENSORLED_2_GPIO_Port, SENSORLED_2_Pin,GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b6c:	4832      	ldr	r0, [pc, #200]	; (8002c38 <pl_callback_getSensor+0x198>)
 8002b6e:	f00b fd25 	bl	800e5bc <HAL_GPIO_WritePin>
					for (j = 0; j <= 10; j++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	e002      	b.n	8002b7e <pl_callback_getSensor+0xde>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b0a      	cmp	r3, #10
 8002b82:	ddf9      	ble.n	8002b78 <pl_callback_getSensor+0xd8>
					}
			break;
 8002b84:	bf00      	nop
	}
	V_battAD = g_ADCBuffer[0];
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 1023.0 * (100.0 + 22.0) / 22.0;
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	ee17 0a90 	vmov	r0, s15
 8002b9a:	f7fd fcd5 	bl	8000548 <__aeabi_f2d>
 8002b9e:	a320      	add	r3, pc, #128	; (adr r3, 8002c20 <pl_callback_getSensor+0x180>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fd28 	bl	80005f8 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	a31d      	add	r3, pc, #116	; (adr r3, 8002c28 <pl_callback_getSensor+0x188>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fe49 	bl	800084c <__aeabi_ddiv>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <pl_callback_getSensor+0x1a8>)
 8002bc8:	f7fd fd16 	bl	80005f8 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <pl_callback_getSensor+0x1ac>)
 8002bda:	f7fd fe37 	bl	800084c <__aeabi_ddiv>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f7fd ffff 	bl	8000be8 <__aeabi_d2f>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <pl_callback_getSensor+0x1b0>)
 8002bee:	6013      	str	r3, [r2, #0]
		AD_step++;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <pl_callback_getSensor+0x194>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <pl_callback_getSensor+0x194>)
 8002bfa:	701a      	strb	r2, [r3, #0]

		if (AD_step != 3) {
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <pl_callback_getSensor+0x194>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d005      	beq.n	8002c10 <pl_callback_getSensor+0x170>
			HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002c04:	2205      	movs	r2, #5
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <pl_callback_getSensor+0x19c>)
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <pl_callback_getSensor+0x190>)
 8002c0a:	f00a f915 	bl	800ce38 <HAL_ADC_Start_DMA>

			AD_step = 0;

		}

}
 8002c0e:	e002      	b.n	8002c16 <pl_callback_getSensor+0x176>
			AD_step = 0;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <pl_callback_getSensor+0x194>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	66666666 	.word	0x66666666
 8002c24:	400a6666 	.word	0x400a6666
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	408ff800 	.word	0x408ff800
 8002c30:	20000958 	.word	0x20000958
 8002c34:	200003ae 	.word	0x200003ae
 8002c38:	48000800 	.word	0x48000800
 8002c3c:	200003a4 	.word	0x200003a4
 8002c40:	200003b0 	.word	0x200003b0
 8002c44:	200003b8 	.word	0x200003b8
 8002c48:	405e8000 	.word	0x405e8000
 8002c4c:	40360000 	.word	0x40360000
 8002c50:	200003c0 	.word	0x200003c0

08002c54 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
 8002c58:	2205      	movs	r2, #5
 8002c5a:	4903      	ldr	r1, [pc, #12]	; (8002c68 <pl_interupt_getSensor+0x14>)
 8002c5c:	4803      	ldr	r0, [pc, #12]	; (8002c6c <pl_interupt_getSensor+0x18>)
 8002c5e:	f00a f8eb 	bl	800ce38 <HAL_ADC_Start_DMA>
				sizeof(g_ADCBuffer) / sizeof(uint16_t));


}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200003a4 	.word	0x200003a4
 8002c6c:	20000958 	.word	0x20000958

08002c70 <pl_test_speaker>:

soundData seria[seriaNUM];
soundData Zelda_nazo[Zelda_nazoNUM];

void pl_test_speaker(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
	for(int count=1;count<15;count++){
 8002c76:	2301      	movs	r3, #1
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	e007      	b.n	8002c8c <pl_test_speaker+0x1c>
		pl_play_oneSound(count);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f861 	bl	8002d48 <pl_play_oneSound>
	for(int count=1;count<15;count++){
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b0e      	cmp	r3, #14
 8002c90:	ddf4      	ble.n	8002c7c <pl_test_speaker+0xc>
		}

	pl_play_Music(8, Zelda_nazo);
 8002c92:	4906      	ldr	r1, [pc, #24]	; (8002cac <pl_test_speaker+0x3c>)
 8002c94:	2008      	movs	r0, #8
 8002c96:	f000 f8c3 	bl	8002e20 <pl_play_Music>
	pl_play_Music(169, seria);
 8002c9a:	4905      	ldr	r1, [pc, #20]	; (8002cb0 <pl_test_speaker+0x40>)
 8002c9c:	20a9      	movs	r0, #169	; 0xa9
 8002c9e:	f000 f8bf 	bl	8002e20 <pl_play_Music>


}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000914 	.word	0x20000914
 8002cb0:	200003c4 	.word	0x200003c4

08002cb4 <pl_speaker_init>:
/*	スピーカーの初期化					(pl_speaker_init)	*/
/*******************************************************************/
/*	スピーカーの初期化する。						*/
/*******************************************************************/
void pl_speaker_init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

	  HAL_TIM_Base_Start_IT(&htim15);//speaker
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <pl_speaker_init+0x1c>)
 8002cba:	f00d f9fd 	bl	80100b8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim15);//speaker
 8002cbe:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <pl_speaker_init+0x1c>)
 8002cc0:	f008 fc14 	bl	800b4ec <HAL_TIM_PWM_MspInit>

	  inputseria();
 8002cc4:	f000 f95a 	bl	8002f7c <inputseria>
	  inputZelda_nazo();
 8002cc8:	f000 f90e 	bl	8002ee8 <inputZelda_nazo>


}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000cee0 	.word	0x2000cee0
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <calFrequencyCount>:
/*******************************************************************/
/*	周波数からcycleCountへの変換					(calFrequencyCount)	*/
/*******************************************************************/
/*	周波数からPWMに送るcycleCountを計算する．。						*/
/*******************************************************************/
uint16_t calFrequencyCount(float tarHz) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tarCount;
	if (tarHz == 0) {
 8002ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cee:	d102      	bne.n	8002cf6 <calFrequencyCount+0x1e>
		tarCount = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	81fb      	strh	r3, [r7, #14]
 8002cf4:	e01a      	b.n	8002d2c <calFrequencyCount+0x54>
	} else {
		tarCount = (uint16_t) (1000000.0 / tarHz - 1.0);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd fc26 	bl	8000548 <__aeabi_f2d>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	a10e      	add	r1, pc, #56	; (adr r1, 8002d3c <calFrequencyCount+0x64>)
 8002d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d06:	f7fd fda1 	bl	800084c <__aeabi_ddiv>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <calFrequencyCount+0x60>)
 8002d18:	f7fd fab6 	bl	8000288 <__aeabi_dsub>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7fd ff40 	bl	8000ba8 <__aeabi_d2uiz>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	81fb      	strh	r3, [r7, #14]
	}
	return tarCount;
 8002d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	3ff00000 	.word	0x3ff00000
 8002d3c:	00000000 	.word	0x00000000
 8002d40:	412e8480 	.word	0x412e8480
 8002d44:	00000000 	.word	0x00000000

08002d48 <pl_play_oneSound>:
/*******************************************************************/
/*	任意の周波数の一音を出力					(pl_play_oneSound)	*/
/*******************************************************************/
/*	scaleにあわせた周波数での一音を出力する．．						*/
/*******************************************************************/
void pl_play_oneSound(char scale) {
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	uint16_t cycleCount, j;
	float Hz;
	Hz = 1.0;
 8002d52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d56:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	82fb      	strh	r3, [r7, #22]
 8002d5c:	e012      	b.n	8002d84 <pl_play_oneSound+0x3c>
		Hz = Hz * 1.0595;
 8002d5e:	6938      	ldr	r0, [r7, #16]
 8002d60:	f7fd fbf2 	bl	8000548 <__aeabi_f2d>
 8002d64:	a32c      	add	r3, pc, #176	; (adr r3, 8002e18 <pl_play_oneSound+0xd0>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fc45 	bl	80005f8 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff37 	bl	8000be8 <__aeabi_d2f>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	613b      	str	r3, [r7, #16]
	for (j = 0; j < scale; j++) {
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	3301      	adds	r3, #1
 8002d82:	82fb      	strh	r3, [r7, #22]
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8afa      	ldrh	r2, [r7, #22]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d3e7      	bcc.n	8002d5e <pl_play_oneSound+0x16>
	}
	cycleCount = calFrequencyCount(440 * 0.6 * Hz);
 8002d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e10 <pl_play_oneSound+0xc8>
 8002d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9e:	f7ff ff9b 	bl	8002cd8 <calFrequencyCount>
 8002da2:	4603      	mov	r3, r0
 8002da4:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	89fa      	ldrh	r2, [r7, #14]
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dae:	89fb      	ldrh	r3, [r7, #14]
 8002db0:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002db2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount * SPEAKER_LOUDNESS);
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbb4 	bl	8000524 <__aeabi_i2d>
 8002dbc:	a312      	add	r3, pc, #72	; (adr r3, 8002e08 <pl_play_oneSound+0xc0>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fc19 	bl	80005f8 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4912      	ldr	r1, [pc, #72]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002dcc:	680c      	ldr	r4, [r1, #0]
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd fee9 	bl	8000ba8 <__aeabi_d2uiz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	63a3      	str	r3, [r4, #56]	; 0x38

	__HAL_TIM_SET_COUNTER(&htim15, 0);
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002de2:	2104      	movs	r1, #4
 8002de4:	480b      	ldr	r0, [pc, #44]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002de6:	f00d fa13 	bl	8010210 <HAL_TIM_PWM_Start>
	HAL_Delay(600);
 8002dea:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002dee:	f009 fb7b 	bl	800c4e8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002df2:	2104      	movs	r1, #4
 8002df4:	4807      	ldr	r0, [pc, #28]	; (8002e14 <pl_play_oneSound+0xcc>)
 8002df6:	f00d fae9 	bl	80103cc <HAL_TIM_PWM_Stop>

}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	f3af 8000 	nop.w
 8002e08:	47ae147b 	.word	0x47ae147b
 8002e0c:	3f747ae1 	.word	0x3f747ae1
 8002e10:	43840000 	.word	0x43840000
 8002e14:	2000cee0 	.word	0x2000cee0
 8002e18:	45a1cac1 	.word	0x45a1cac1
 8002e1c:	3ff0f3b6 	.word	0x3ff0f3b6

08002e20 <pl_play_Music>:
/*******************************************************************/
/*	任意の音楽を出力					(pl_play_Music)	*/
/*******************************************************************/
/*	playDataの音楽を出力する．						*/
/*******************************************************************/
void pl_play_Music(uint16_t dataMaxNum, soundData *playData) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	80fb      	strh	r3, [r7, #6]

	uint16_t i;
	uint16_t cycleCount, cycleCount_f;

	for (i = 0; i < dataMaxNum; i++) {
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	81fb      	strh	r3, [r7, #14]
 8002e30:	e043      	b.n	8002eba <pl_play_Music+0x9a>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002e32:	2104      	movs	r1, #4
 8002e34:	482a      	ldr	r0, [pc, #168]	; (8002ee0 <pl_play_Music+0xc0>)
 8002e36:	f00d fac9 	bl	80103cc <HAL_TIM_PWM_Stop>

		cycleCount = calFrequencyCount(playData[i].interval);
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	f7ff ff45 	bl	8002cd8 <calFrequencyCount>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	81bb      	strh	r3, [r7, #12]
		cycleCount_f = (int) ((float) (cycleCount) * SPEAKER_LOUDNESS);
 8002e52:	89bb      	ldrh	r3, [r7, #12]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5c:	ee17 0a90 	vmov	r0, s15
 8002e60:	f7fd fb72 	bl	8000548 <__aeabi_f2d>
 8002e64:	a31c      	add	r3, pc, #112	; (adr r3, 8002ed8 <pl_play_Music+0xb8>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd fbc5 	bl	80005f8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fe6f 	bl	8000b58 <__aeabi_d2iz>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	817b      	strh	r3, [r7, #10]
		__HAL_TIM_SET_AUTORELOAD(&htim15, cycleCount);
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <pl_play_Music+0xc0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	89ba      	ldrh	r2, [r7, #12]
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e86:	89bb      	ldrh	r3, [r7, #12]
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <pl_play_Music+0xc0>)
 8002e8a:	60d3      	str	r3, [r2, #12]

		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,cycleCount_f);
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <pl_play_Music+0xc0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	897a      	ldrh	r2, [r7, #10]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <pl_play_Music+0xc4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <pl_play_Music+0xc0>)
 8002ea0:	f00d f9b6 	bl	8010210 <HAL_TIM_PWM_Start>
		HAL_Delay(playData[i].waittime);
 8002ea4:	89fb      	ldrh	r3, [r7, #14]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	889b      	ldrh	r3, [r3, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f009 fb1a 	bl	800c4e8 <HAL_Delay>
	for (i = 0; i < dataMaxNum; i++) {
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	81fb      	strh	r3, [r7, #14]
 8002eba:	89fa      	ldrh	r2, [r7, #14]
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3b7      	bcc.n	8002e32 <pl_play_Music+0x12>
	}
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <pl_play_Music+0xc0>)
 8002ec6:	f00d fa81 	bl	80103cc <HAL_TIM_PWM_Stop>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	47ae147b 	.word	0x47ae147b
 8002edc:	3f747ae1 	.word	0x3f747ae1
 8002ee0:	2000cee0 	.word	0x2000cee0
 8002ee4:	2000ce48 	.word	0x2000ce48

08002ee8 <inputZelda_nazo>:
/*******************************************************************/
/*	音楽用構造体配列の入力					(input)	*/
/*******************************************************************/
/*	音楽用の構造体を定義してる．						*/
/*******************************************************************/
void inputZelda_nazo(void) {
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
	Zelda_nazo[0].interval = 1480;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <inputZelda_nazo+0x70>)
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <inputZelda_nazo+0x74>)
 8002ef0:	601a      	str	r2, [r3, #0]
	Zelda_nazo[0].waittime = 19 * 7;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <inputZelda_nazo+0x70>)
 8002ef4:	2285      	movs	r2, #133	; 0x85
 8002ef6:	809a      	strh	r2, [r3, #4]
	Zelda_nazo[1].interval = 1397;
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <inputZelda_nazo+0x70>)
 8002efa:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <inputZelda_nazo+0x78>)
 8002efc:	609a      	str	r2, [r3, #8]
	Zelda_nazo[1].waittime = 19 * 7;
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f00:	2285      	movs	r2, #133	; 0x85
 8002f02:	819a      	strh	r2, [r3, #12]
	Zelda_nazo[2].interval = 1175;
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <inputZelda_nazo+0x7c>)
 8002f08:	611a      	str	r2, [r3, #16]
	Zelda_nazo[2].waittime = 19 * 7;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f0c:	2285      	movs	r2, #133	; 0x85
 8002f0e:	829a      	strh	r2, [r3, #20]
	Zelda_nazo[3].interval = 831;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <inputZelda_nazo+0x80>)
 8002f14:	619a      	str	r2, [r3, #24]
	Zelda_nazo[3].waittime = 19 * 7;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f18:	2285      	movs	r2, #133	; 0x85
 8002f1a:	839a      	strh	r2, [r3, #28]
	Zelda_nazo[4].interval = 784;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f1e:	4a13      	ldr	r2, [pc, #76]	; (8002f6c <inputZelda_nazo+0x84>)
 8002f20:	621a      	str	r2, [r3, #32]
	Zelda_nazo[4].waittime = 19 * 7;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f24:	2285      	movs	r2, #133	; 0x85
 8002f26:	849a      	strh	r2, [r3, #36]	; 0x24
	Zelda_nazo[5].interval = 1245;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <inputZelda_nazo+0x88>)
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
	Zelda_nazo[5].waittime = 19 * 7;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f30:	2285      	movs	r2, #133	; 0x85
 8002f32:	859a      	strh	r2, [r3, #44]	; 0x2c
	Zelda_nazo[6].interval = 1568;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <inputZelda_nazo+0x8c>)
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
	Zelda_nazo[6].waittime = 19 * 7;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f3c:	2285      	movs	r2, #133	; 0x85
 8002f3e:	869a      	strh	r2, [r3, #52]	; 0x34
	Zelda_nazo[7].interval = 1976;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <inputZelda_nazo+0x90>)
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
	Zelda_nazo[7].waittime = 99 * 7;
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <inputZelda_nazo+0x70>)
 8002f48:	f240 22b5 	movw	r2, #693	; 0x2b5
 8002f4c:	879a      	strh	r2, [r3, #60]	; 0x3c

}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	20000914 	.word	0x20000914
 8002f5c:	44b90000 	.word	0x44b90000
 8002f60:	44aea000 	.word	0x44aea000
 8002f64:	4492e000 	.word	0x4492e000
 8002f68:	444fc000 	.word	0x444fc000
 8002f6c:	44440000 	.word	0x44440000
 8002f70:	449ba000 	.word	0x449ba000
 8002f74:	44c40000 	.word	0x44c40000
 8002f78:	44f70000 	.word	0x44f70000

08002f7c <inputseria>:


void inputseria(void) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
	seria[0].interval = 698;
 8002f80:	4bad      	ldr	r3, [pc, #692]	; (8003238 <inputseria+0x2bc>)
 8002f82:	4aae      	ldr	r2, [pc, #696]	; (800323c <inputseria+0x2c0>)
 8002f84:	601a      	str	r2, [r3, #0]
	seria[0].waittime = 224;
 8002f86:	4bac      	ldr	r3, [pc, #688]	; (8003238 <inputseria+0x2bc>)
 8002f88:	22e0      	movs	r2, #224	; 0xe0
 8002f8a:	809a      	strh	r2, [r3, #4]
	seria[1].interval = 880;
 8002f8c:	4baa      	ldr	r3, [pc, #680]	; (8003238 <inputseria+0x2bc>)
 8002f8e:	4aac      	ldr	r2, [pc, #688]	; (8003240 <inputseria+0x2c4>)
 8002f90:	609a      	str	r2, [r3, #8]
	seria[1].waittime = 224;
 8002f92:	4ba9      	ldr	r3, [pc, #676]	; (8003238 <inputseria+0x2bc>)
 8002f94:	22e0      	movs	r2, #224	; 0xe0
 8002f96:	819a      	strh	r2, [r3, #12]
	seria[2].interval = 988;
 8002f98:	4ba7      	ldr	r3, [pc, #668]	; (8003238 <inputseria+0x2bc>)
 8002f9a:	4aaa      	ldr	r2, [pc, #680]	; (8003244 <inputseria+0x2c8>)
 8002f9c:	611a      	str	r2, [r3, #16]
	seria[2].waittime = 462;
 8002f9e:	4ba6      	ldr	r3, [pc, #664]	; (8003238 <inputseria+0x2bc>)
 8002fa0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002fa4:	829a      	strh	r2, [r3, #20]
	seria[3].interval = 698;
 8002fa6:	4ba4      	ldr	r3, [pc, #656]	; (8003238 <inputseria+0x2bc>)
 8002fa8:	4aa4      	ldr	r2, [pc, #656]	; (800323c <inputseria+0x2c0>)
 8002faa:	619a      	str	r2, [r3, #24]
	seria[3].waittime = 224;
 8002fac:	4ba2      	ldr	r3, [pc, #648]	; (8003238 <inputseria+0x2bc>)
 8002fae:	22e0      	movs	r2, #224	; 0xe0
 8002fb0:	839a      	strh	r2, [r3, #28]
	seria[4].interval = 880;
 8002fb2:	4ba1      	ldr	r3, [pc, #644]	; (8003238 <inputseria+0x2bc>)
 8002fb4:	4aa2      	ldr	r2, [pc, #648]	; (8003240 <inputseria+0x2c4>)
 8002fb6:	621a      	str	r2, [r3, #32]
	seria[4].waittime = 224;
 8002fb8:	4b9f      	ldr	r3, [pc, #636]	; (8003238 <inputseria+0x2bc>)
 8002fba:	22e0      	movs	r2, #224	; 0xe0
 8002fbc:	849a      	strh	r2, [r3, #36]	; 0x24
	seria[5].interval = 988;
 8002fbe:	4b9e      	ldr	r3, [pc, #632]	; (8003238 <inputseria+0x2bc>)
 8002fc0:	4aa0      	ldr	r2, [pc, #640]	; (8003244 <inputseria+0x2c8>)
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
	seria[5].waittime = 462;
 8002fc4:	4b9c      	ldr	r3, [pc, #624]	; (8003238 <inputseria+0x2bc>)
 8002fc6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8002fca:	859a      	strh	r2, [r3, #44]	; 0x2c
	seria[6].interval = 698;
 8002fcc:	4b9a      	ldr	r3, [pc, #616]	; (8003238 <inputseria+0x2bc>)
 8002fce:	4a9b      	ldr	r2, [pc, #620]	; (800323c <inputseria+0x2c0>)
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
	seria[6].waittime = 224;
 8002fd2:	4b99      	ldr	r3, [pc, #612]	; (8003238 <inputseria+0x2bc>)
 8002fd4:	22e0      	movs	r2, #224	; 0xe0
 8002fd6:	869a      	strh	r2, [r3, #52]	; 0x34
	seria[7].interval = 880;
 8002fd8:	4b97      	ldr	r3, [pc, #604]	; (8003238 <inputseria+0x2bc>)
 8002fda:	4a99      	ldr	r2, [pc, #612]	; (8003240 <inputseria+0x2c4>)
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
	seria[7].waittime = 224;
 8002fde:	4b96      	ldr	r3, [pc, #600]	; (8003238 <inputseria+0x2bc>)
 8002fe0:	22e0      	movs	r2, #224	; 0xe0
 8002fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
	seria[8].interval = 988;
 8002fe4:	4b94      	ldr	r3, [pc, #592]	; (8003238 <inputseria+0x2bc>)
 8002fe6:	4a97      	ldr	r2, [pc, #604]	; (8003244 <inputseria+0x2c8>)
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
	seria[8].waittime = 224;
 8002fea:	4b93      	ldr	r3, [pc, #588]	; (8003238 <inputseria+0x2bc>)
 8002fec:	22e0      	movs	r2, #224	; 0xe0
 8002fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	seria[9].interval = 1319;
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <inputseria+0x2bc>)
 8002ff4:	4a94      	ldr	r2, [pc, #592]	; (8003248 <inputseria+0x2cc>)
 8002ff6:	649a      	str	r2, [r3, #72]	; 0x48
	seria[9].waittime = 224;
 8002ff8:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <inputseria+0x2bc>)
 8002ffa:	22e0      	movs	r2, #224	; 0xe0
 8002ffc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	seria[10].interval = 1175;
 8003000:	4b8d      	ldr	r3, [pc, #564]	; (8003238 <inputseria+0x2bc>)
 8003002:	4a92      	ldr	r2, [pc, #584]	; (800324c <inputseria+0x2d0>)
 8003004:	651a      	str	r2, [r3, #80]	; 0x50
	seria[10].waittime = 462;
 8003006:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <inputseria+0x2bc>)
 8003008:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800300c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	seria[11].interval = 988;
 8003010:	4b89      	ldr	r3, [pc, #548]	; (8003238 <inputseria+0x2bc>)
 8003012:	4a8c      	ldr	r2, [pc, #560]	; (8003244 <inputseria+0x2c8>)
 8003014:	659a      	str	r2, [r3, #88]	; 0x58
	seria[11].waittime = 224;
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <inputseria+0x2bc>)
 8003018:	22e0      	movs	r2, #224	; 0xe0
 800301a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	seria[12].interval = 1047;
 800301e:	4b86      	ldr	r3, [pc, #536]	; (8003238 <inputseria+0x2bc>)
 8003020:	4a8b      	ldr	r2, [pc, #556]	; (8003250 <inputseria+0x2d4>)
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
	seria[12].waittime = 224;
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <inputseria+0x2bc>)
 8003026:	22e0      	movs	r2, #224	; 0xe0
 8003028:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	seria[13].interval = 988;
 800302c:	4b82      	ldr	r3, [pc, #520]	; (8003238 <inputseria+0x2bc>)
 800302e:	4a85      	ldr	r2, [pc, #532]	; (8003244 <inputseria+0x2c8>)
 8003030:	669a      	str	r2, [r3, #104]	; 0x68
	seria[13].waittime = 224;
 8003032:	4b81      	ldr	r3, [pc, #516]	; (8003238 <inputseria+0x2bc>)
 8003034:	22e0      	movs	r2, #224	; 0xe0
 8003036:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	seria[14].interval = 784;
 800303a:	4b7f      	ldr	r3, [pc, #508]	; (8003238 <inputseria+0x2bc>)
 800303c:	4a85      	ldr	r2, [pc, #532]	; (8003254 <inputseria+0x2d8>)
 800303e:	671a      	str	r2, [r3, #112]	; 0x70
	seria[14].waittime = 224;
 8003040:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <inputseria+0x2bc>)
 8003042:	22e0      	movs	r2, #224	; 0xe0
 8003044:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	seria[15].interval = 659;
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <inputseria+0x2bc>)
 800304a:	4a83      	ldr	r2, [pc, #524]	; (8003258 <inputseria+0x2dc>)
 800304c:	679a      	str	r2, [r3, #120]	; 0x78
	seria[15].waittime = 1169;
 800304e:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <inputseria+0x2bc>)
 8003050:	f240 4291 	movw	r2, #1169	; 0x491
 8003054:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	seria[16].interval = 587;
 8003058:	4b77      	ldr	r3, [pc, #476]	; (8003238 <inputseria+0x2bc>)
 800305a:	4a80      	ldr	r2, [pc, #512]	; (800325c <inputseria+0x2e0>)
 800305c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	seria[16].waittime = 224;
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <inputseria+0x2bc>)
 8003062:	22e0      	movs	r2, #224	; 0xe0
 8003064:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	seria[17].interval = 659;
 8003068:	4b73      	ldr	r3, [pc, #460]	; (8003238 <inputseria+0x2bc>)
 800306a:	4a7b      	ldr	r2, [pc, #492]	; (8003258 <inputseria+0x2dc>)
 800306c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	seria[17].waittime = 224;
 8003070:	4b71      	ldr	r3, [pc, #452]	; (8003238 <inputseria+0x2bc>)
 8003072:	22e0      	movs	r2, #224	; 0xe0
 8003074:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	seria[18].interval = 784;
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <inputseria+0x2bc>)
 800307a:	4a76      	ldr	r2, [pc, #472]	; (8003254 <inputseria+0x2d8>)
 800307c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	seria[18].waittime = 224;
 8003080:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <inputseria+0x2bc>)
 8003082:	22e0      	movs	r2, #224	; 0xe0
 8003084:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	seria[19].interval = 659;
 8003088:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <inputseria+0x2bc>)
 800308a:	4a73      	ldr	r2, [pc, #460]	; (8003258 <inputseria+0x2dc>)
 800308c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	seria[19].waittime = 1400;
 8003090:	4b69      	ldr	r3, [pc, #420]	; (8003238 <inputseria+0x2bc>)
 8003092:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003096:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	seria[20].interval = 698;
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <inputseria+0x2bc>)
 800309c:	4a67      	ldr	r2, [pc, #412]	; (800323c <inputseria+0x2c0>)
 800309e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	seria[20].waittime = 224;
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <inputseria+0x2bc>)
 80030a4:	22e0      	movs	r2, #224	; 0xe0
 80030a6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	seria[21].interval = 880;
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <inputseria+0x2bc>)
 80030ac:	4a64      	ldr	r2, [pc, #400]	; (8003240 <inputseria+0x2c4>)
 80030ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	seria[21].waittime = 224;
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <inputseria+0x2bc>)
 80030b4:	22e0      	movs	r2, #224	; 0xe0
 80030b6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	seria[22].interval = 988;
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <inputseria+0x2bc>)
 80030bc:	4a61      	ldr	r2, [pc, #388]	; (8003244 <inputseria+0x2c8>)
 80030be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	seria[22].waittime = 462;
 80030c2:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <inputseria+0x2bc>)
 80030c4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030c8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	seria[23].interval = 698;
 80030cc:	4b5a      	ldr	r3, [pc, #360]	; (8003238 <inputseria+0x2bc>)
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <inputseria+0x2c0>)
 80030d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	seria[23].waittime = 224;
 80030d4:	4b58      	ldr	r3, [pc, #352]	; (8003238 <inputseria+0x2bc>)
 80030d6:	22e0      	movs	r2, #224	; 0xe0
 80030d8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	seria[24].interval = 880;
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <inputseria+0x2bc>)
 80030de:	4a58      	ldr	r2, [pc, #352]	; (8003240 <inputseria+0x2c4>)
 80030e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	seria[24].waittime = 224;
 80030e4:	4b54      	ldr	r3, [pc, #336]	; (8003238 <inputseria+0x2bc>)
 80030e6:	22e0      	movs	r2, #224	; 0xe0
 80030e8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	seria[25].interval = 988;
 80030ec:	4b52      	ldr	r3, [pc, #328]	; (8003238 <inputseria+0x2bc>)
 80030ee:	4a55      	ldr	r2, [pc, #340]	; (8003244 <inputseria+0x2c8>)
 80030f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	seria[25].waittime = 462;
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <inputseria+0x2bc>)
 80030f6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80030fa:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	seria[26].interval = 698;
 80030fe:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <inputseria+0x2bc>)
 8003100:	4a4e      	ldr	r2, [pc, #312]	; (800323c <inputseria+0x2c0>)
 8003102:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	seria[26].waittime = 224;
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <inputseria+0x2bc>)
 8003108:	22e0      	movs	r2, #224	; 0xe0
 800310a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	seria[27].interval = 880;
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <inputseria+0x2bc>)
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <inputseria+0x2c4>)
 8003112:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	seria[27].waittime = 224;
 8003116:	4b48      	ldr	r3, [pc, #288]	; (8003238 <inputseria+0x2bc>)
 8003118:	22e0      	movs	r2, #224	; 0xe0
 800311a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	seria[28].interval = 988;
 800311e:	4b46      	ldr	r3, [pc, #280]	; (8003238 <inputseria+0x2bc>)
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <inputseria+0x2c8>)
 8003122:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	seria[28].waittime = 224;
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <inputseria+0x2bc>)
 8003128:	22e0      	movs	r2, #224	; 0xe0
 800312a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	seria[29].interval = 1319;
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <inputseria+0x2bc>)
 8003130:	4a45      	ldr	r2, [pc, #276]	; (8003248 <inputseria+0x2cc>)
 8003132:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	seria[29].waittime = 224;
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <inputseria+0x2bc>)
 8003138:	22e0      	movs	r2, #224	; 0xe0
 800313a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	seria[30].interval = 1175;
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <inputseria+0x2bc>)
 8003140:	4a42      	ldr	r2, [pc, #264]	; (800324c <inputseria+0x2d0>)
 8003142:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	seria[30].waittime = 462;
 8003146:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <inputseria+0x2bc>)
 8003148:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800314c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	seria[31].interval = 988;
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <inputseria+0x2bc>)
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <inputseria+0x2c8>)
 8003154:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	seria[31].waittime = 224;
 8003158:	4b37      	ldr	r3, [pc, #220]	; (8003238 <inputseria+0x2bc>)
 800315a:	22e0      	movs	r2, #224	; 0xe0
 800315c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	seria[32].interval = 1047;
 8003160:	4b35      	ldr	r3, [pc, #212]	; (8003238 <inputseria+0x2bc>)
 8003162:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <inputseria+0x2d4>)
 8003164:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	seria[32].waittime = 224;
 8003168:	4b33      	ldr	r3, [pc, #204]	; (8003238 <inputseria+0x2bc>)
 800316a:	22e0      	movs	r2, #224	; 0xe0
 800316c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	seria[33].interval = 1319;
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <inputseria+0x2bc>)
 8003172:	4a35      	ldr	r2, [pc, #212]	; (8003248 <inputseria+0x2cc>)
 8003174:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	seria[33].waittime = 224;
 8003178:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <inputseria+0x2bc>)
 800317a:	22e0      	movs	r2, #224	; 0xe0
 800317c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	seria[34].interval = 988;
 8003180:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <inputseria+0x2bc>)
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <inputseria+0x2c8>)
 8003184:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	seria[34].waittime = 224;
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <inputseria+0x2bc>)
 800318a:	22e0      	movs	r2, #224	; 0xe0
 800318c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	seria[35].interval = 784;
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <inputseria+0x2bc>)
 8003192:	4a30      	ldr	r2, [pc, #192]	; (8003254 <inputseria+0x2d8>)
 8003194:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	seria[35].waittime = 1169;
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <inputseria+0x2bc>)
 800319a:	f240 4291 	movw	r2, #1169	; 0x491
 800319e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	seria[36].interval = 988;
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <inputseria+0x2bc>)
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <inputseria+0x2c8>)
 80031a6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	seria[36].waittime = 224;
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <inputseria+0x2bc>)
 80031ac:	22e0      	movs	r2, #224	; 0xe0
 80031ae:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
	seria[37].interval = 784;
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <inputseria+0x2bc>)
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <inputseria+0x2d8>)
 80031b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	seria[37].waittime = 224;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <inputseria+0x2bc>)
 80031bc:	22e0      	movs	r2, #224	; 0xe0
 80031be:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	seria[38].interval = 587;
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <inputseria+0x2bc>)
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <inputseria+0x2e0>)
 80031c6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	seria[38].waittime = 224;
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <inputseria+0x2bc>)
 80031cc:	22e0      	movs	r2, #224	; 0xe0
 80031ce:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	seria[39].interval = 659;
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <inputseria+0x2bc>)
 80031d4:	4a20      	ldr	r2, [pc, #128]	; (8003258 <inputseria+0x2dc>)
 80031d6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	seria[39].waittime = 1400;
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <inputseria+0x2bc>)
 80031dc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80031e0:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	seria[40].interval = 294;
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <inputseria+0x2bc>)
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <inputseria+0x2e4>)
 80031e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	seria[40].waittime = 224;
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <inputseria+0x2bc>)
 80031ee:	22e0      	movs	r2, #224	; 0xe0
 80031f0:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	seria[41].interval = 330;
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <inputseria+0x2bc>)
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <inputseria+0x2e8>)
 80031f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	seria[41].waittime = 224;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <inputseria+0x2bc>)
 80031fe:	22e0      	movs	r2, #224	; 0xe0
 8003200:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	seria[42].interval = 349;
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <inputseria+0x2bc>)
 8003206:	4a18      	ldr	r2, [pc, #96]	; (8003268 <inputseria+0x2ec>)
 8003208:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	seria[42].waittime = 462;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <inputseria+0x2bc>)
 800320e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003212:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	seria[43].interval = 392;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <inputseria+0x2bc>)
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <inputseria+0x2f0>)
 800321a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	seria[43].waittime = 224;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <inputseria+0x2bc>)
 8003220:	22e0      	movs	r2, #224	; 0xe0
 8003222:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
	seria[44].interval = 440;
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <inputseria+0x2bc>)
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <inputseria+0x2f4>)
 800322a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	seria[44].waittime = 224;
 800322e:	4b02      	ldr	r3, [pc, #8]	; (8003238 <inputseria+0x2bc>)
 8003230:	22e0      	movs	r2, #224	; 0xe0
 8003232:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003236:	e01d      	b.n	8003274 <inputseria+0x2f8>
 8003238:	200003c4 	.word	0x200003c4
 800323c:	442e8000 	.word	0x442e8000
 8003240:	445c0000 	.word	0x445c0000
 8003244:	44770000 	.word	0x44770000
 8003248:	44a4e000 	.word	0x44a4e000
 800324c:	4492e000 	.word	0x4492e000
 8003250:	4482e000 	.word	0x4482e000
 8003254:	44440000 	.word	0x44440000
 8003258:	4424c000 	.word	0x4424c000
 800325c:	4412c000 	.word	0x4412c000
 8003260:	43930000 	.word	0x43930000
 8003264:	43a50000 	.word	0x43a50000
 8003268:	43ae8000 	.word	0x43ae8000
 800326c:	43c40000 	.word	0x43c40000
 8003270:	43dc0000 	.word	0x43dc0000
	seria[45].interval = 494;
 8003274:	4bb9      	ldr	r3, [pc, #740]	; (800355c <inputseria+0x5e0>)
 8003276:	4aba      	ldr	r2, [pc, #744]	; (8003560 <inputseria+0x5e4>)
 8003278:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	seria[45].waittime = 462;
 800327c:	4bb7      	ldr	r3, [pc, #732]	; (800355c <inputseria+0x5e0>)
 800327e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003282:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	seria[46].interval = 523;
 8003286:	4bb5      	ldr	r3, [pc, #724]	; (800355c <inputseria+0x5e0>)
 8003288:	4ab6      	ldr	r2, [pc, #728]	; (8003564 <inputseria+0x5e8>)
 800328a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	seria[46].waittime = 224;
 800328e:	4bb3      	ldr	r3, [pc, #716]	; (800355c <inputseria+0x5e0>)
 8003290:	22e0      	movs	r2, #224	; 0xe0
 8003292:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	seria[47].interval = 494;
 8003296:	4bb1      	ldr	r3, [pc, #708]	; (800355c <inputseria+0x5e0>)
 8003298:	4ab1      	ldr	r2, [pc, #708]	; (8003560 <inputseria+0x5e4>)
 800329a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	seria[47].waittime = 224;
 800329e:	4baf      	ldr	r3, [pc, #700]	; (800355c <inputseria+0x5e0>)
 80032a0:	22e0      	movs	r2, #224	; 0xe0
 80032a2:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	seria[48].interval = 330;
 80032a6:	4bad      	ldr	r3, [pc, #692]	; (800355c <inputseria+0x5e0>)
 80032a8:	4aaf      	ldr	r2, [pc, #700]	; (8003568 <inputseria+0x5ec>)
 80032aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	seria[48].waittime = 1400;
 80032ae:	4bab      	ldr	r3, [pc, #684]	; (800355c <inputseria+0x5e0>)
 80032b0:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80032b4:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	seria[49].interval = 698;
 80032b8:	4ba8      	ldr	r3, [pc, #672]	; (800355c <inputseria+0x5e0>)
 80032ba:	4aac      	ldr	r2, [pc, #688]	; (800356c <inputseria+0x5f0>)
 80032bc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	seria[49].waittime = 224;
 80032c0:	4ba6      	ldr	r3, [pc, #664]	; (800355c <inputseria+0x5e0>)
 80032c2:	22e0      	movs	r2, #224	; 0xe0
 80032c4:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
	seria[50].interval = 784;
 80032c8:	4ba4      	ldr	r3, [pc, #656]	; (800355c <inputseria+0x5e0>)
 80032ca:	4aa9      	ldr	r2, [pc, #676]	; (8003570 <inputseria+0x5f4>)
 80032cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	seria[50].waittime = 224;
 80032d0:	4ba2      	ldr	r3, [pc, #648]	; (800355c <inputseria+0x5e0>)
 80032d2:	22e0      	movs	r2, #224	; 0xe0
 80032d4:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	seria[51].interval = 880;
 80032d8:	4ba0      	ldr	r3, [pc, #640]	; (800355c <inputseria+0x5e0>)
 80032da:	4aa6      	ldr	r2, [pc, #664]	; (8003574 <inputseria+0x5f8>)
 80032dc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	seria[51].waittime = 462;
 80032e0:	4b9e      	ldr	r3, [pc, #632]	; (800355c <inputseria+0x5e0>)
 80032e2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80032e6:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	seria[52].interval = 988;
 80032ea:	4b9c      	ldr	r3, [pc, #624]	; (800355c <inputseria+0x5e0>)
 80032ec:	4aa2      	ldr	r2, [pc, #648]	; (8003578 <inputseria+0x5fc>)
 80032ee:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	seria[52].waittime = 224;
 80032f2:	4b9a      	ldr	r3, [pc, #616]	; (800355c <inputseria+0x5e0>)
 80032f4:	22e0      	movs	r2, #224	; 0xe0
 80032f6:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	seria[53].interval = 1047;
 80032fa:	4b98      	ldr	r3, [pc, #608]	; (800355c <inputseria+0x5e0>)
 80032fc:	4a9f      	ldr	r2, [pc, #636]	; (800357c <inputseria+0x600>)
 80032fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	seria[53].waittime = 224;
 8003302:	4b96      	ldr	r3, [pc, #600]	; (800355c <inputseria+0x5e0>)
 8003304:	22e0      	movs	r2, #224	; 0xe0
 8003306:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
	seria[54].interval = 1175;
 800330a:	4b94      	ldr	r3, [pc, #592]	; (800355c <inputseria+0x5e0>)
 800330c:	4a9c      	ldr	r2, [pc, #624]	; (8003580 <inputseria+0x604>)
 800330e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	seria[54].waittime = 462;
 8003312:	4b92      	ldr	r3, [pc, #584]	; (800355c <inputseria+0x5e0>)
 8003314:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003318:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
	seria[55].interval = 1319;
 800331c:	4b8f      	ldr	r3, [pc, #572]	; (800355c <inputseria+0x5e0>)
 800331e:	4a99      	ldr	r2, [pc, #612]	; (8003584 <inputseria+0x608>)
 8003320:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	seria[55].waittime = 224;
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <inputseria+0x5e0>)
 8003326:	22e0      	movs	r2, #224	; 0xe0
 8003328:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
	seria[56].interval = 1397;
 800332c:	4b8b      	ldr	r3, [pc, #556]	; (800355c <inputseria+0x5e0>)
 800332e:	4a96      	ldr	r2, [pc, #600]	; (8003588 <inputseria+0x60c>)
 8003330:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	seria[56].waittime = 224;
 8003334:	4b89      	ldr	r3, [pc, #548]	; (800355c <inputseria+0x5e0>)
 8003336:	22e0      	movs	r2, #224	; 0xe0
 8003338:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	seria[57].interval = 1568;
 800333c:	4b87      	ldr	r3, [pc, #540]	; (800355c <inputseria+0x5e0>)
 800333e:	4a93      	ldr	r2, [pc, #588]	; (800358c <inputseria+0x610>)
 8003340:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	seria[57].waittime = 1400;
 8003344:	4b85      	ldr	r3, [pc, #532]	; (800355c <inputseria+0x5e0>)
 8003346:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800334a:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	seria[58].interval = 294;
 800334e:	4b83      	ldr	r3, [pc, #524]	; (800355c <inputseria+0x5e0>)
 8003350:	4a8f      	ldr	r2, [pc, #572]	; (8003590 <inputseria+0x614>)
 8003352:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	seria[58].waittime = 224;
 8003356:	4b81      	ldr	r3, [pc, #516]	; (800355c <inputseria+0x5e0>)
 8003358:	22e0      	movs	r2, #224	; 0xe0
 800335a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
	seria[59].interval = 330;
 800335e:	4b7f      	ldr	r3, [pc, #508]	; (800355c <inputseria+0x5e0>)
 8003360:	4a81      	ldr	r2, [pc, #516]	; (8003568 <inputseria+0x5ec>)
 8003362:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	seria[59].waittime = 224;
 8003366:	4b7d      	ldr	r3, [pc, #500]	; (800355c <inputseria+0x5e0>)
 8003368:	22e0      	movs	r2, #224	; 0xe0
 800336a:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
	seria[60].interval = 349;
 800336e:	4b7b      	ldr	r3, [pc, #492]	; (800355c <inputseria+0x5e0>)
 8003370:	4a88      	ldr	r2, [pc, #544]	; (8003594 <inputseria+0x618>)
 8003372:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	seria[60].waittime = 462;
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <inputseria+0x5e0>)
 8003378:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800337c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	seria[61].interval = 392;
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <inputseria+0x5e0>)
 8003382:	4a85      	ldr	r2, [pc, #532]	; (8003598 <inputseria+0x61c>)
 8003384:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	seria[61].waittime = 224;
 8003388:	4b74      	ldr	r3, [pc, #464]	; (800355c <inputseria+0x5e0>)
 800338a:	22e0      	movs	r2, #224	; 0xe0
 800338c:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
	seria[62].interval = 440;
 8003390:	4b72      	ldr	r3, [pc, #456]	; (800355c <inputseria+0x5e0>)
 8003392:	4a82      	ldr	r2, [pc, #520]	; (800359c <inputseria+0x620>)
 8003394:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	seria[62].waittime = 224;
 8003398:	4b70      	ldr	r3, [pc, #448]	; (800355c <inputseria+0x5e0>)
 800339a:	22e0      	movs	r2, #224	; 0xe0
 800339c:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
	seria[63].interval = 494;
 80033a0:	4b6e      	ldr	r3, [pc, #440]	; (800355c <inputseria+0x5e0>)
 80033a2:	4a6f      	ldr	r2, [pc, #444]	; (8003560 <inputseria+0x5e4>)
 80033a4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	seria[63].waittime = 462;
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <inputseria+0x5e0>)
 80033aa:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80033ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	seria[64].interval = 523;
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <inputseria+0x5e0>)
 80033b4:	4a6b      	ldr	r2, [pc, #428]	; (8003564 <inputseria+0x5e8>)
 80033b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	seria[64].waittime = 224;
 80033ba:	4b68      	ldr	r3, [pc, #416]	; (800355c <inputseria+0x5e0>)
 80033bc:	22e0      	movs	r2, #224	; 0xe0
 80033be:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	seria[65].interval = 494;
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <inputseria+0x5e0>)
 80033c4:	4a66      	ldr	r2, [pc, #408]	; (8003560 <inputseria+0x5e4>)
 80033c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	seria[65].waittime = 224;
 80033ca:	4b64      	ldr	r3, [pc, #400]	; (800355c <inputseria+0x5e0>)
 80033cc:	22e0      	movs	r2, #224	; 0xe0
 80033ce:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	seria[66].interval = 330;
 80033d2:	4b62      	ldr	r3, [pc, #392]	; (800355c <inputseria+0x5e0>)
 80033d4:	4a64      	ldr	r2, [pc, #400]	; (8003568 <inputseria+0x5ec>)
 80033d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	seria[66].waittime = 1400;
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <inputseria+0x5e0>)
 80033dc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80033e0:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
	seria[67].interval = 698;
 80033e4:	4b5d      	ldr	r3, [pc, #372]	; (800355c <inputseria+0x5e0>)
 80033e6:	4a61      	ldr	r2, [pc, #388]	; (800356c <inputseria+0x5f0>)
 80033e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	seria[67].waittime = 224;
 80033ec:	4b5b      	ldr	r3, [pc, #364]	; (800355c <inputseria+0x5e0>)
 80033ee:	22e0      	movs	r2, #224	; 0xe0
 80033f0:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	seria[68].interval = 659;
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <inputseria+0x5e0>)
 80033f6:	4a6a      	ldr	r2, [pc, #424]	; (80035a0 <inputseria+0x624>)
 80033f8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	seria[68].waittime = 105;
 80033fc:	4b57      	ldr	r3, [pc, #348]	; (800355c <inputseria+0x5e0>)
 80033fe:	2269      	movs	r2, #105	; 0x69
 8003400:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
	seria[69].interval = 880;
 8003404:	4b55      	ldr	r3, [pc, #340]	; (800355c <inputseria+0x5e0>)
 8003406:	4a5b      	ldr	r2, [pc, #364]	; (8003574 <inputseria+0x5f8>)
 8003408:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	seria[69].waittime = 224;
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <inputseria+0x5e0>)
 800340e:	22e0      	movs	r2, #224	; 0xe0
 8003410:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	seria[70].interval = 784;
 8003414:	4b51      	ldr	r3, [pc, #324]	; (800355c <inputseria+0x5e0>)
 8003416:	4a56      	ldr	r2, [pc, #344]	; (8003570 <inputseria+0x5f4>)
 8003418:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	seria[70].waittime = 105;
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <inputseria+0x5e0>)
 800341e:	2269      	movs	r2, #105	; 0x69
 8003420:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	seria[71].interval = 988;
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <inputseria+0x5e0>)
 8003426:	4a54      	ldr	r2, [pc, #336]	; (8003578 <inputseria+0x5fc>)
 8003428:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	seria[71].waittime = 224;
 800342c:	4b4b      	ldr	r3, [pc, #300]	; (800355c <inputseria+0x5e0>)
 800342e:	22e0      	movs	r2, #224	; 0xe0
 8003430:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	seria[72].interval = 880;
 8003434:	4b49      	ldr	r3, [pc, #292]	; (800355c <inputseria+0x5e0>)
 8003436:	4a4f      	ldr	r2, [pc, #316]	; (8003574 <inputseria+0x5f8>)
 8003438:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	seria[72].waittime = 105;
 800343c:	4b47      	ldr	r3, [pc, #284]	; (800355c <inputseria+0x5e0>)
 800343e:	2269      	movs	r2, #105	; 0x69
 8003440:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
	seria[73].interval = 1047;
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <inputseria+0x5e0>)
 8003446:	4a4d      	ldr	r2, [pc, #308]	; (800357c <inputseria+0x600>)
 8003448:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	seria[73].waittime = 224;
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <inputseria+0x5e0>)
 800344e:	22e0      	movs	r2, #224	; 0xe0
 8003450:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
	seria[74].interval = 988;
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <inputseria+0x5e0>)
 8003456:	4a48      	ldr	r2, [pc, #288]	; (8003578 <inputseria+0x5fc>)
 8003458:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	seria[74].waittime = 105;
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <inputseria+0x5e0>)
 800345e:	2269      	movs	r2, #105	; 0x69
 8003460:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
	seria[75].interval = 1175;
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <inputseria+0x5e0>)
 8003466:	4a46      	ldr	r2, [pc, #280]	; (8003580 <inputseria+0x604>)
 8003468:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	seria[75].waittime = 224;
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <inputseria+0x5e0>)
 800346e:	22e0      	movs	r2, #224	; 0xe0
 8003470:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
	seria[76].interval = 1047;
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <inputseria+0x5e0>)
 8003476:	4a41      	ldr	r2, [pc, #260]	; (800357c <inputseria+0x600>)
 8003478:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	seria[76].waittime = 105;
 800347c:	4b37      	ldr	r3, [pc, #220]	; (800355c <inputseria+0x5e0>)
 800347e:	2269      	movs	r2, #105	; 0x69
 8003480:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
	seria[77].interval = 1319;
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <inputseria+0x5e0>)
 8003486:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <inputseria+0x608>)
 8003488:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	seria[77].waittime = 224;
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <inputseria+0x5e0>)
 800348e:	22e0      	movs	r2, #224	; 0xe0
 8003490:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
	seria[78].interval = 1175;
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <inputseria+0x5e0>)
 8003496:	4a3a      	ldr	r2, [pc, #232]	; (8003580 <inputseria+0x604>)
 8003498:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	seria[78].waittime = 105;
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <inputseria+0x5e0>)
 800349e:	2269      	movs	r2, #105	; 0x69
 80034a0:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
	seria[79].interval = 1397;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <inputseria+0x5e0>)
 80034a6:	4a38      	ldr	r2, [pc, #224]	; (8003588 <inputseria+0x60c>)
 80034a8:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	seria[79].waittime = 224;
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <inputseria+0x5e0>)
 80034ae:	22e0      	movs	r2, #224	; 0xe0
 80034b0:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	seria[80].interval = 1319;
 80034b4:	4b29      	ldr	r3, [pc, #164]	; (800355c <inputseria+0x5e0>)
 80034b6:	4a33      	ldr	r2, [pc, #204]	; (8003584 <inputseria+0x608>)
 80034b8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	seria[80].waittime = 105;
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <inputseria+0x5e0>)
 80034be:	2269      	movs	r2, #105	; 0x69
 80034c0:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	seria[81].interval = 988;
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <inputseria+0x5e0>)
 80034c6:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <inputseria+0x5fc>)
 80034c8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	seria[81].waittime = 105;
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <inputseria+0x5e0>)
 80034ce:	2269      	movs	r2, #105	; 0x69
 80034d0:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	seria[82].interval = 1047;
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <inputseria+0x5e0>)
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <inputseria+0x600>)
 80034d8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	seria[82].waittime = 105;
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <inputseria+0x5e0>)
 80034de:	2269      	movs	r2, #105	; 0x69
 80034e0:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
	seria[83].interval = 880;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <inputseria+0x5e0>)
 80034e6:	4a23      	ldr	r2, [pc, #140]	; (8003574 <inputseria+0x5f8>)
 80034e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	seria[83].waittime = 105;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <inputseria+0x5e0>)
 80034ee:	2269      	movs	r2, #105	; 0x69
 80034f0:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	seria[84].interval = 988;
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <inputseria+0x5e0>)
 80034f6:	4a20      	ldr	r2, [pc, #128]	; (8003578 <inputseria+0x5fc>)
 80034f8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	seria[84].waittime = 2576;
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <inputseria+0x5e0>)
 80034fe:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003502:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	seria[85].interval = 698;
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <inputseria+0x5e0>)
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <inputseria+0x5f0>)
 800350a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	seria[85].waittime = 224;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <inputseria+0x5e0>)
 8003510:	22e0      	movs	r2, #224	; 0xe0
 8003512:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	seria[86].interval = 880;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <inputseria+0x5e0>)
 8003518:	4a16      	ldr	r2, [pc, #88]	; (8003574 <inputseria+0x5f8>)
 800351a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	seria[86].waittime = 224;
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <inputseria+0x5e0>)
 8003520:	22e0      	movs	r2, #224	; 0xe0
 8003522:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
	seria[87].interval = 988;
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <inputseria+0x5e0>)
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <inputseria+0x5fc>)
 800352a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	seria[87].waittime = 462;
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <inputseria+0x5e0>)
 8003530:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003534:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	seria[88].interval = 698;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <inputseria+0x5e0>)
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <inputseria+0x5f0>)
 800353c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	seria[88].waittime = 224;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <inputseria+0x5e0>)
 8003542:	22e0      	movs	r2, #224	; 0xe0
 8003544:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
	seria[89].interval = 880;
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <inputseria+0x5e0>)
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <inputseria+0x5f8>)
 800354c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	seria[89].waittime = 224;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <inputseria+0x5e0>)
 8003552:	22e0      	movs	r2, #224	; 0xe0
 8003554:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
 8003558:	e024      	b.n	80035a4 <inputseria+0x628>
 800355a:	bf00      	nop
 800355c:	200003c4 	.word	0x200003c4
 8003560:	43f70000 	.word	0x43f70000
 8003564:	4402c000 	.word	0x4402c000
 8003568:	43a50000 	.word	0x43a50000
 800356c:	442e8000 	.word	0x442e8000
 8003570:	44440000 	.word	0x44440000
 8003574:	445c0000 	.word	0x445c0000
 8003578:	44770000 	.word	0x44770000
 800357c:	4482e000 	.word	0x4482e000
 8003580:	4492e000 	.word	0x4492e000
 8003584:	44a4e000 	.word	0x44a4e000
 8003588:	44aea000 	.word	0x44aea000
 800358c:	44c40000 	.word	0x44c40000
 8003590:	43930000 	.word	0x43930000
 8003594:	43ae8000 	.word	0x43ae8000
 8003598:	43c40000 	.word	0x43c40000
 800359c:	43dc0000 	.word	0x43dc0000
 80035a0:	4424c000 	.word	0x4424c000
	seria[90].interval = 988;
 80035a4:	4bb9      	ldr	r3, [pc, #740]	; (800388c <inputseria+0x910>)
 80035a6:	4aba      	ldr	r2, [pc, #744]	; (8003890 <inputseria+0x914>)
 80035a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	seria[90].waittime = 462;
 80035ac:	4bb7      	ldr	r3, [pc, #732]	; (800388c <inputseria+0x910>)
 80035ae:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80035b2:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
	seria[91].interval = 698;
 80035b6:	4bb5      	ldr	r3, [pc, #724]	; (800388c <inputseria+0x910>)
 80035b8:	4ab6      	ldr	r2, [pc, #728]	; (8003894 <inputseria+0x918>)
 80035ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
	seria[91].waittime = 224;
 80035be:	4bb3      	ldr	r3, [pc, #716]	; (800388c <inputseria+0x910>)
 80035c0:	22e0      	movs	r2, #224	; 0xe0
 80035c2:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
	seria[92].interval = 880;
 80035c6:	4bb1      	ldr	r3, [pc, #708]	; (800388c <inputseria+0x910>)
 80035c8:	4ab3      	ldr	r2, [pc, #716]	; (8003898 <inputseria+0x91c>)
 80035ca:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
	seria[92].waittime = 224;
 80035ce:	4baf      	ldr	r3, [pc, #700]	; (800388c <inputseria+0x910>)
 80035d0:	22e0      	movs	r2, #224	; 0xe0
 80035d2:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	seria[93].interval = 988;
 80035d6:	4bad      	ldr	r3, [pc, #692]	; (800388c <inputseria+0x910>)
 80035d8:	4aad      	ldr	r2, [pc, #692]	; (8003890 <inputseria+0x914>)
 80035da:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	seria[93].waittime = 224;
 80035de:	4bab      	ldr	r3, [pc, #684]	; (800388c <inputseria+0x910>)
 80035e0:	22e0      	movs	r2, #224	; 0xe0
 80035e2:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
	seria[94].interval = 1319;
 80035e6:	4ba9      	ldr	r3, [pc, #676]	; (800388c <inputseria+0x910>)
 80035e8:	4aac      	ldr	r2, [pc, #688]	; (800389c <inputseria+0x920>)
 80035ea:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	seria[94].waittime = 224;
 80035ee:	4ba7      	ldr	r3, [pc, #668]	; (800388c <inputseria+0x910>)
 80035f0:	22e0      	movs	r2, #224	; 0xe0
 80035f2:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
	seria[95].interval = 1175;
 80035f6:	4ba5      	ldr	r3, [pc, #660]	; (800388c <inputseria+0x910>)
 80035f8:	4aa9      	ldr	r2, [pc, #676]	; (80038a0 <inputseria+0x924>)
 80035fa:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	seria[95].waittime = 462;
 80035fe:	4ba3      	ldr	r3, [pc, #652]	; (800388c <inputseria+0x910>)
 8003600:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003604:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
	seria[96].interval = 988;
 8003608:	4ba0      	ldr	r3, [pc, #640]	; (800388c <inputseria+0x910>)
 800360a:	4aa1      	ldr	r2, [pc, #644]	; (8003890 <inputseria+0x914>)
 800360c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	seria[96].waittime = 224;
 8003610:	4b9e      	ldr	r3, [pc, #632]	; (800388c <inputseria+0x910>)
 8003612:	22e0      	movs	r2, #224	; 0xe0
 8003614:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
	seria[97].interval = 1047;
 8003618:	4b9c      	ldr	r3, [pc, #624]	; (800388c <inputseria+0x910>)
 800361a:	4aa2      	ldr	r2, [pc, #648]	; (80038a4 <inputseria+0x928>)
 800361c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	seria[97].waittime = 224;
 8003620:	4b9a      	ldr	r3, [pc, #616]	; (800388c <inputseria+0x910>)
 8003622:	22e0      	movs	r2, #224	; 0xe0
 8003624:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
	seria[98].interval = 988;
 8003628:	4b98      	ldr	r3, [pc, #608]	; (800388c <inputseria+0x910>)
 800362a:	4a99      	ldr	r2, [pc, #612]	; (8003890 <inputseria+0x914>)
 800362c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	seria[98].waittime = 224;
 8003630:	4b96      	ldr	r3, [pc, #600]	; (800388c <inputseria+0x910>)
 8003632:	22e0      	movs	r2, #224	; 0xe0
 8003634:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
	seria[99].interval = 784;
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <inputseria+0x910>)
 800363a:	4a9b      	ldr	r2, [pc, #620]	; (80038a8 <inputseria+0x92c>)
 800363c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	seria[99].waittime = 224;
 8003640:	4b92      	ldr	r3, [pc, #584]	; (800388c <inputseria+0x910>)
 8003642:	22e0      	movs	r2, #224	; 0xe0
 8003644:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	seria[100].interval = 659;
 8003648:	4b90      	ldr	r3, [pc, #576]	; (800388c <inputseria+0x910>)
 800364a:	4a98      	ldr	r2, [pc, #608]	; (80038ac <inputseria+0x930>)
 800364c:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	seria[100].waittime = 1169;
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <inputseria+0x910>)
 8003652:	f240 4291 	movw	r2, #1169	; 0x491
 8003656:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	seria[101].interval = 587;
 800365a:	4b8c      	ldr	r3, [pc, #560]	; (800388c <inputseria+0x910>)
 800365c:	4a94      	ldr	r2, [pc, #592]	; (80038b0 <inputseria+0x934>)
 800365e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	seria[101].waittime = 224;
 8003662:	4b8a      	ldr	r3, [pc, #552]	; (800388c <inputseria+0x910>)
 8003664:	22e0      	movs	r2, #224	; 0xe0
 8003666:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	seria[102].interval = 659;
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <inputseria+0x910>)
 800366c:	4a8f      	ldr	r2, [pc, #572]	; (80038ac <inputseria+0x930>)
 800366e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	seria[102].waittime = 224;
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <inputseria+0x910>)
 8003674:	22e0      	movs	r2, #224	; 0xe0
 8003676:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
	seria[103].interval = 784;
 800367a:	4b84      	ldr	r3, [pc, #528]	; (800388c <inputseria+0x910>)
 800367c:	4a8a      	ldr	r2, [pc, #552]	; (80038a8 <inputseria+0x92c>)
 800367e:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	seria[103].waittime = 224;
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <inputseria+0x910>)
 8003684:	22e0      	movs	r2, #224	; 0xe0
 8003686:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
	seria[104].interval = 659;
 800368a:	4b80      	ldr	r3, [pc, #512]	; (800388c <inputseria+0x910>)
 800368c:	4a87      	ldr	r2, [pc, #540]	; (80038ac <inputseria+0x930>)
 800368e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	seria[104].waittime = 1400;
 8003692:	4b7e      	ldr	r3, [pc, #504]	; (800388c <inputseria+0x910>)
 8003694:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003698:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
	seria[105].interval = 698;
 800369c:	4b7b      	ldr	r3, [pc, #492]	; (800388c <inputseria+0x910>)
 800369e:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <inputseria+0x918>)
 80036a0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	seria[105].waittime = 224;
 80036a4:	4b79      	ldr	r3, [pc, #484]	; (800388c <inputseria+0x910>)
 80036a6:	22e0      	movs	r2, #224	; 0xe0
 80036a8:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
	seria[106].interval = 880;
 80036ac:	4b77      	ldr	r3, [pc, #476]	; (800388c <inputseria+0x910>)
 80036ae:	4a7a      	ldr	r2, [pc, #488]	; (8003898 <inputseria+0x91c>)
 80036b0:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	seria[106].waittime = 224;
 80036b4:	4b75      	ldr	r3, [pc, #468]	; (800388c <inputseria+0x910>)
 80036b6:	22e0      	movs	r2, #224	; 0xe0
 80036b8:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
	seria[107].interval = 988;
 80036bc:	4b73      	ldr	r3, [pc, #460]	; (800388c <inputseria+0x910>)
 80036be:	4a74      	ldr	r2, [pc, #464]	; (8003890 <inputseria+0x914>)
 80036c0:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	seria[107].waittime = 462;
 80036c4:	4b71      	ldr	r3, [pc, #452]	; (800388c <inputseria+0x910>)
 80036c6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80036ca:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	seria[108].interval = 698;
 80036ce:	4b6f      	ldr	r3, [pc, #444]	; (800388c <inputseria+0x910>)
 80036d0:	4a70      	ldr	r2, [pc, #448]	; (8003894 <inputseria+0x918>)
 80036d2:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	seria[108].waittime = 224;
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <inputseria+0x910>)
 80036d8:	22e0      	movs	r2, #224	; 0xe0
 80036da:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
	seria[109].interval = 880;
 80036de:	4b6b      	ldr	r3, [pc, #428]	; (800388c <inputseria+0x910>)
 80036e0:	4a6d      	ldr	r2, [pc, #436]	; (8003898 <inputseria+0x91c>)
 80036e2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	seria[109].waittime = 224;
 80036e6:	4b69      	ldr	r3, [pc, #420]	; (800388c <inputseria+0x910>)
 80036e8:	22e0      	movs	r2, #224	; 0xe0
 80036ea:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
	seria[110].interval = 988;
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <inputseria+0x910>)
 80036f0:	4a67      	ldr	r2, [pc, #412]	; (8003890 <inputseria+0x914>)
 80036f2:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
	seria[110].waittime = 462;
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <inputseria+0x910>)
 80036f8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80036fc:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
	seria[111].interval = 698;
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <inputseria+0x910>)
 8003702:	4a64      	ldr	r2, [pc, #400]	; (8003894 <inputseria+0x918>)
 8003704:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	seria[111].waittime = 224;
 8003708:	4b60      	ldr	r3, [pc, #384]	; (800388c <inputseria+0x910>)
 800370a:	22e0      	movs	r2, #224	; 0xe0
 800370c:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	seria[112].interval = 880;
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <inputseria+0x910>)
 8003712:	4a61      	ldr	r2, [pc, #388]	; (8003898 <inputseria+0x91c>)
 8003714:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
	seria[112].waittime = 224;
 8003718:	4b5c      	ldr	r3, [pc, #368]	; (800388c <inputseria+0x910>)
 800371a:	22e0      	movs	r2, #224	; 0xe0
 800371c:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
	seria[113].interval = 988;
 8003720:	4b5a      	ldr	r3, [pc, #360]	; (800388c <inputseria+0x910>)
 8003722:	4a5b      	ldr	r2, [pc, #364]	; (8003890 <inputseria+0x914>)
 8003724:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	seria[113].waittime = 224;
 8003728:	4b58      	ldr	r3, [pc, #352]	; (800388c <inputseria+0x910>)
 800372a:	22e0      	movs	r2, #224	; 0xe0
 800372c:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
	seria[114].interval = 1319;
 8003730:	4b56      	ldr	r3, [pc, #344]	; (800388c <inputseria+0x910>)
 8003732:	4a5a      	ldr	r2, [pc, #360]	; (800389c <inputseria+0x920>)
 8003734:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	seria[114].waittime = 224;
 8003738:	4b54      	ldr	r3, [pc, #336]	; (800388c <inputseria+0x910>)
 800373a:	22e0      	movs	r2, #224	; 0xe0
 800373c:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	seria[115].interval = 1175;
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <inputseria+0x910>)
 8003742:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <inputseria+0x924>)
 8003744:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
	seria[115].waittime = 462;
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <inputseria+0x910>)
 800374a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800374e:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
	seria[116].interval = 988;
 8003752:	4b4e      	ldr	r3, [pc, #312]	; (800388c <inputseria+0x910>)
 8003754:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <inputseria+0x914>)
 8003756:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	seria[116].waittime = 224;
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <inputseria+0x910>)
 800375c:	22e0      	movs	r2, #224	; 0xe0
 800375e:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
	seria[117].interval = 1047;
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <inputseria+0x910>)
 8003764:	4a4f      	ldr	r2, [pc, #316]	; (80038a4 <inputseria+0x928>)
 8003766:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	seria[117].waittime = 224;
 800376a:	4b48      	ldr	r3, [pc, #288]	; (800388c <inputseria+0x910>)
 800376c:	22e0      	movs	r2, #224	; 0xe0
 800376e:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	seria[118].interval = 1319;
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <inputseria+0x910>)
 8003774:	4a49      	ldr	r2, [pc, #292]	; (800389c <inputseria+0x920>)
 8003776:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	seria[118].waittime = 224;
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <inputseria+0x910>)
 800377c:	22e0      	movs	r2, #224	; 0xe0
 800377e:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
	seria[119].interval = 988;
 8003782:	4b42      	ldr	r3, [pc, #264]	; (800388c <inputseria+0x910>)
 8003784:	4a42      	ldr	r2, [pc, #264]	; (8003890 <inputseria+0x914>)
 8003786:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	seria[119].waittime = 224;
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <inputseria+0x910>)
 800378c:	22e0      	movs	r2, #224	; 0xe0
 800378e:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	seria[120].interval = 784;
 8003792:	4b3e      	ldr	r3, [pc, #248]	; (800388c <inputseria+0x910>)
 8003794:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <inputseria+0x92c>)
 8003796:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
	seria[120].waittime = 1169;
 800379a:	4b3c      	ldr	r3, [pc, #240]	; (800388c <inputseria+0x910>)
 800379c:	f240 4291 	movw	r2, #1169	; 0x491
 80037a0:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
	seria[121].interval = 988;
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <inputseria+0x910>)
 80037a6:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <inputseria+0x914>)
 80037a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
	seria[121].waittime = 224;
 80037ac:	4b37      	ldr	r3, [pc, #220]	; (800388c <inputseria+0x910>)
 80037ae:	22e0      	movs	r2, #224	; 0xe0
 80037b0:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	seria[122].interval = 784;
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <inputseria+0x910>)
 80037b6:	4a3c      	ldr	r2, [pc, #240]	; (80038a8 <inputseria+0x92c>)
 80037b8:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	seria[122].waittime = 224;
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <inputseria+0x910>)
 80037be:	22e0      	movs	r2, #224	; 0xe0
 80037c0:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
	seria[123].interval = 587;
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <inputseria+0x910>)
 80037c6:	4a3a      	ldr	r2, [pc, #232]	; (80038b0 <inputseria+0x934>)
 80037c8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	seria[123].waittime = 224;
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <inputseria+0x910>)
 80037ce:	22e0      	movs	r2, #224	; 0xe0
 80037d0:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
	seria[124].interval = 659;
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <inputseria+0x910>)
 80037d6:	4a35      	ldr	r2, [pc, #212]	; (80038ac <inputseria+0x930>)
 80037d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
	seria[124].waittime = 1400;
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <inputseria+0x910>)
 80037de:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80037e2:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
	seria[125].interval = 294;
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <inputseria+0x910>)
 80037e8:	4a32      	ldr	r2, [pc, #200]	; (80038b4 <inputseria+0x938>)
 80037ea:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	seria[125].waittime = 224;
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <inputseria+0x910>)
 80037f0:	22e0      	movs	r2, #224	; 0xe0
 80037f2:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
	seria[126].interval = 330;
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <inputseria+0x910>)
 80037f8:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <inputseria+0x93c>)
 80037fa:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
	seria[126].waittime = 224;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <inputseria+0x910>)
 8003800:	22e0      	movs	r2, #224	; 0xe0
 8003802:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	seria[127].interval = 349;
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <inputseria+0x910>)
 8003808:	4a2c      	ldr	r2, [pc, #176]	; (80038bc <inputseria+0x940>)
 800380a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	seria[127].waittime = 462;
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <inputseria+0x910>)
 8003810:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003814:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
	seria[128].interval = 392;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <inputseria+0x910>)
 800381a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381e:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <inputseria+0x944>)
 8003820:	601a      	str	r2, [r3, #0]
	seria[128].waittime = 224;
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <inputseria+0x910>)
 8003824:	22e0      	movs	r2, #224	; 0xe0
 8003826:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	seria[129].interval = 440;
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <inputseria+0x910>)
 800382c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003830:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <inputseria+0x948>)
 8003832:	601a      	str	r2, [r3, #0]
	seria[129].waittime = 224;
 8003834:	4b15      	ldr	r3, [pc, #84]	; (800388c <inputseria+0x910>)
 8003836:	22e0      	movs	r2, #224	; 0xe0
 8003838:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
	seria[130].interval = 494;
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <inputseria+0x910>)
 800383e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <inputseria+0x94c>)
 8003844:	601a      	str	r2, [r3, #0]
	seria[130].waittime = 462;
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <inputseria+0x910>)
 8003848:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800384c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	seria[131].interval = 523;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <inputseria+0x910>)
 8003852:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <inputseria+0x950>)
 8003858:	601a      	str	r2, [r3, #0]
	seria[131].waittime = 224;
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <inputseria+0x910>)
 800385c:	22e0      	movs	r2, #224	; 0xe0
 800385e:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
	seria[132].interval = 494;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <inputseria+0x910>)
 8003864:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <inputseria+0x94c>)
 800386a:	601a      	str	r2, [r3, #0]
	seria[132].waittime = 224;
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <inputseria+0x910>)
 800386e:	22e0      	movs	r2, #224	; 0xe0
 8003870:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	seria[133].interval = 330;
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <inputseria+0x910>)
 8003876:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <inputseria+0x93c>)
 800387c:	601a      	str	r2, [r3, #0]
	seria[133].waittime = 1400;
 800387e:	4b03      	ldr	r3, [pc, #12]	; (800388c <inputseria+0x910>)
 8003880:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003884:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
 8003888:	e022      	b.n	80038d0 <inputseria+0x954>
 800388a:	bf00      	nop
 800388c:	200003c4 	.word	0x200003c4
 8003890:	44770000 	.word	0x44770000
 8003894:	442e8000 	.word	0x442e8000
 8003898:	445c0000 	.word	0x445c0000
 800389c:	44a4e000 	.word	0x44a4e000
 80038a0:	4492e000 	.word	0x4492e000
 80038a4:	4482e000 	.word	0x4482e000
 80038a8:	44440000 	.word	0x44440000
 80038ac:	4424c000 	.word	0x4424c000
 80038b0:	4412c000 	.word	0x4412c000
 80038b4:	43930000 	.word	0x43930000
 80038b8:	43a50000 	.word	0x43a50000
 80038bc:	43ae8000 	.word	0x43ae8000
 80038c0:	43c40000 	.word	0x43c40000
 80038c4:	43dc0000 	.word	0x43dc0000
 80038c8:	43f70000 	.word	0x43f70000
 80038cc:	4402c000 	.word	0x4402c000
	seria[134].interval = 698;
 80038d0:	4ba7      	ldr	r3, [pc, #668]	; (8003b70 <inputseria+0xbf4>)
 80038d2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80038d6:	4aa7      	ldr	r2, [pc, #668]	; (8003b74 <inputseria+0xbf8>)
 80038d8:	601a      	str	r2, [r3, #0]
	seria[134].waittime = 224;
 80038da:	4ba5      	ldr	r3, [pc, #660]	; (8003b70 <inputseria+0xbf4>)
 80038dc:	22e0      	movs	r2, #224	; 0xe0
 80038de:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	seria[135].interval = 784;
 80038e2:	4ba3      	ldr	r3, [pc, #652]	; (8003b70 <inputseria+0xbf4>)
 80038e4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80038e8:	4aa3      	ldr	r2, [pc, #652]	; (8003b78 <inputseria+0xbfc>)
 80038ea:	601a      	str	r2, [r3, #0]
	seria[135].waittime = 224;
 80038ec:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <inputseria+0xbf4>)
 80038ee:	22e0      	movs	r2, #224	; 0xe0
 80038f0:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	seria[136].interval = 880;
 80038f4:	4b9e      	ldr	r3, [pc, #632]	; (8003b70 <inputseria+0xbf4>)
 80038f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038fa:	4aa0      	ldr	r2, [pc, #640]	; (8003b7c <inputseria+0xc00>)
 80038fc:	601a      	str	r2, [r3, #0]
	seria[136].waittime = 462;
 80038fe:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <inputseria+0xbf4>)
 8003900:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003904:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
	seria[137].interval = 988;
 8003908:	4b99      	ldr	r3, [pc, #612]	; (8003b70 <inputseria+0xbf4>)
 800390a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800390e:	4a9c      	ldr	r2, [pc, #624]	; (8003b80 <inputseria+0xc04>)
 8003910:	601a      	str	r2, [r3, #0]
	seria[137].waittime = 224;
 8003912:	4b97      	ldr	r3, [pc, #604]	; (8003b70 <inputseria+0xbf4>)
 8003914:	22e0      	movs	r2, #224	; 0xe0
 8003916:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
	seria[138].interval = 1047;
 800391a:	4b95      	ldr	r3, [pc, #596]	; (8003b70 <inputseria+0xbf4>)
 800391c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8003920:	4a98      	ldr	r2, [pc, #608]	; (8003b84 <inputseria+0xc08>)
 8003922:	601a      	str	r2, [r3, #0]
	seria[138].waittime = 224;
 8003924:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <inputseria+0xbf4>)
 8003926:	22e0      	movs	r2, #224	; 0xe0
 8003928:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
	seria[139].interval = 1175;
 800392c:	4b90      	ldr	r3, [pc, #576]	; (8003b70 <inputseria+0xbf4>)
 800392e:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 8003932:	4a95      	ldr	r2, [pc, #596]	; (8003b88 <inputseria+0xc0c>)
 8003934:	601a      	str	r2, [r3, #0]
	seria[139].waittime = 462;
 8003936:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <inputseria+0xbf4>)
 8003938:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800393c:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
	seria[140].interval = 1319;
 8003940:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <inputseria+0xbf4>)
 8003942:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8003946:	4a91      	ldr	r2, [pc, #580]	; (8003b8c <inputseria+0xc10>)
 8003948:	601a      	str	r2, [r3, #0]
	seria[140].waittime = 224;
 800394a:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <inputseria+0xbf4>)
 800394c:	22e0      	movs	r2, #224	; 0xe0
 800394e:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	seria[141].interval = 1397;
 8003952:	4b87      	ldr	r3, [pc, #540]	; (8003b70 <inputseria+0xbf4>)
 8003954:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8003958:	4a8d      	ldr	r2, [pc, #564]	; (8003b90 <inputseria+0xc14>)
 800395a:	601a      	str	r2, [r3, #0]
	seria[141].waittime = 224;
 800395c:	4b84      	ldr	r3, [pc, #528]	; (8003b70 <inputseria+0xbf4>)
 800395e:	22e0      	movs	r2, #224	; 0xe0
 8003960:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	seria[142].interval = 1568;
 8003964:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <inputseria+0xbf4>)
 8003966:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 800396a:	4a8a      	ldr	r2, [pc, #552]	; (8003b94 <inputseria+0xc18>)
 800396c:	601a      	str	r2, [r3, #0]
	seria[142].waittime = 1400;
 800396e:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <inputseria+0xbf4>)
 8003970:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003974:	f8a3 2474 	strh.w	r2, [r3, #1140]	; 0x474
	seria[143].interval = 294;
 8003978:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <inputseria+0xbf4>)
 800397a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800397e:	4a86      	ldr	r2, [pc, #536]	; (8003b98 <inputseria+0xc1c>)
 8003980:	601a      	str	r2, [r3, #0]
	seria[143].waittime = 224;
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <inputseria+0xbf4>)
 8003984:	22e0      	movs	r2, #224	; 0xe0
 8003986:	f8a3 247c 	strh.w	r2, [r3, #1148]	; 0x47c
	seria[144].interval = 330;
 800398a:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <inputseria+0xbf4>)
 800398c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003990:	4a82      	ldr	r2, [pc, #520]	; (8003b9c <inputseria+0xc20>)
 8003992:	601a      	str	r2, [r3, #0]
	seria[144].waittime = 224;
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <inputseria+0xbf4>)
 8003996:	22e0      	movs	r2, #224	; 0xe0
 8003998:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
	seria[145].interval = 349;
 800399c:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <inputseria+0xbf4>)
 800399e:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80039a2:	4a7f      	ldr	r2, [pc, #508]	; (8003ba0 <inputseria+0xc24>)
 80039a4:	601a      	str	r2, [r3, #0]
	seria[145].waittime = 462;
 80039a6:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <inputseria+0xbf4>)
 80039a8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80039ac:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
	seria[146].interval = 392;
 80039b0:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <inputseria+0xbf4>)
 80039b2:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80039b6:	4a7b      	ldr	r2, [pc, #492]	; (8003ba4 <inputseria+0xc28>)
 80039b8:	601a      	str	r2, [r3, #0]
	seria[146].waittime = 224;
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <inputseria+0xbf4>)
 80039bc:	22e0      	movs	r2, #224	; 0xe0
 80039be:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
	seria[147].interval = 440;
 80039c2:	4b6b      	ldr	r3, [pc, #428]	; (8003b70 <inputseria+0xbf4>)
 80039c4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80039c8:	4a77      	ldr	r2, [pc, #476]	; (8003ba8 <inputseria+0xc2c>)
 80039ca:	601a      	str	r2, [r3, #0]
	seria[147].waittime = 224;
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <inputseria+0xbf4>)
 80039ce:	22e0      	movs	r2, #224	; 0xe0
 80039d0:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c
	seria[148].interval = 494;
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <inputseria+0xbf4>)
 80039d6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80039da:	4a74      	ldr	r2, [pc, #464]	; (8003bac <inputseria+0xc30>)
 80039dc:	601a      	str	r2, [r3, #0]
	seria[148].waittime = 462;
 80039de:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <inputseria+0xbf4>)
 80039e0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 80039e4:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
	seria[149].interval = 523;
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <inputseria+0xbf4>)
 80039ea:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 80039ee:	4a70      	ldr	r2, [pc, #448]	; (8003bb0 <inputseria+0xc34>)
 80039f0:	601a      	str	r2, [r3, #0]
	seria[149].waittime = 224;
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <inputseria+0xbf4>)
 80039f4:	22e0      	movs	r2, #224	; 0xe0
 80039f6:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	seria[150].interval = 494;
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <inputseria+0xbf4>)
 80039fc:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8003a00:	4a6a      	ldr	r2, [pc, #424]	; (8003bac <inputseria+0xc30>)
 8003a02:	601a      	str	r2, [r3, #0]
	seria[150].waittime = 224;
 8003a04:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <inputseria+0xbf4>)
 8003a06:	22e0      	movs	r2, #224	; 0xe0
 8003a08:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
	seria[151].interval = 330;
 8003a0c:	4b58      	ldr	r3, [pc, #352]	; (8003b70 <inputseria+0xbf4>)
 8003a0e:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8003a12:	4a62      	ldr	r2, [pc, #392]	; (8003b9c <inputseria+0xc20>)
 8003a14:	601a      	str	r2, [r3, #0]
	seria[151].waittime = 1400;
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <inputseria+0xbf4>)
 8003a18:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003a1c:	f8a3 24bc 	strh.w	r2, [r3, #1212]	; 0x4bc
	seria[152].interval = 698;
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <inputseria+0xbf4>)
 8003a22:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <inputseria+0xbf8>)
 8003a28:	601a      	str	r2, [r3, #0]
	seria[152].waittime = 224;
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <inputseria+0xbf4>)
 8003a2c:	22e0      	movs	r2, #224	; 0xe0
 8003a2e:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
	seria[153].interval = 659;
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <inputseria+0xbf4>)
 8003a34:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8003a38:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <inputseria+0xc38>)
 8003a3a:	601a      	str	r2, [r3, #0]
	seria[153].waittime = 105;
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <inputseria+0xbf4>)
 8003a3e:	2269      	movs	r2, #105	; 0x69
 8003a40:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
	seria[154].interval = 880;
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <inputseria+0xbf4>)
 8003a46:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8003a4a:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <inputseria+0xc00>)
 8003a4c:	601a      	str	r2, [r3, #0]
	seria[154].waittime = 224;
 8003a4e:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <inputseria+0xbf4>)
 8003a50:	22e0      	movs	r2, #224	; 0xe0
 8003a52:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
	seria[155].interval = 784;
 8003a56:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <inputseria+0xbf4>)
 8003a58:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8003a5c:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <inputseria+0xbfc>)
 8003a5e:	601a      	str	r2, [r3, #0]
	seria[155].waittime = 105;
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <inputseria+0xbf4>)
 8003a62:	2269      	movs	r2, #105	; 0x69
 8003a64:	f8a3 24dc 	strh.w	r2, [r3, #1244]	; 0x4dc
	seria[156].interval = 988;
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <inputseria+0xbf4>)
 8003a6a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8003a6e:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <inputseria+0xc04>)
 8003a70:	601a      	str	r2, [r3, #0]
	seria[156].waittime = 224;
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <inputseria+0xbf4>)
 8003a74:	22e0      	movs	r2, #224	; 0xe0
 8003a76:	f8a3 24e4 	strh.w	r2, [r3, #1252]	; 0x4e4
	seria[157].interval = 880;
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <inputseria+0xbf4>)
 8003a7c:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003a80:	4a3e      	ldr	r2, [pc, #248]	; (8003b7c <inputseria+0xc00>)
 8003a82:	601a      	str	r2, [r3, #0]
	seria[157].waittime = 105;
 8003a84:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <inputseria+0xbf4>)
 8003a86:	2269      	movs	r2, #105	; 0x69
 8003a88:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec
	seria[158].interval = 1047;
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <inputseria+0xbf4>)
 8003a8e:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8003a92:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <inputseria+0xc08>)
 8003a94:	601a      	str	r2, [r3, #0]
	seria[158].waittime = 224;
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <inputseria+0xbf4>)
 8003a98:	22e0      	movs	r2, #224	; 0xe0
 8003a9a:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4
	seria[159].interval = 988;
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <inputseria+0xbf4>)
 8003aa0:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8003aa4:	4a36      	ldr	r2, [pc, #216]	; (8003b80 <inputseria+0xc04>)
 8003aa6:	601a      	str	r2, [r3, #0]
	seria[159].waittime = 105;
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <inputseria+0xbf4>)
 8003aaa:	2269      	movs	r2, #105	; 0x69
 8003aac:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc
	seria[160].interval = 1175;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <inputseria+0xbf4>)
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <inputseria+0xc0c>)
 8003ab8:	601a      	str	r2, [r3, #0]
	seria[160].waittime = 224;
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <inputseria+0xbf4>)
 8003abc:	22e0      	movs	r2, #224	; 0xe0
 8003abe:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
	seria[161].interval = 1047;
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <inputseria+0xbf4>)
 8003ac4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ac8:	4a2e      	ldr	r2, [pc, #184]	; (8003b84 <inputseria+0xc08>)
 8003aca:	601a      	str	r2, [r3, #0]
	seria[161].waittime = 105;
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <inputseria+0xbf4>)
 8003ace:	2269      	movs	r2, #105	; 0x69
 8003ad0:	f8a3 250c 	strh.w	r2, [r3, #1292]	; 0x50c
	seria[162].interval = 1319;
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <inputseria+0xbf4>)
 8003ad6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003ada:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <inputseria+0xc10>)
 8003adc:	601a      	str	r2, [r3, #0]
	seria[162].waittime = 224;
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <inputseria+0xbf4>)
 8003ae0:	22e0      	movs	r2, #224	; 0xe0
 8003ae2:	f8a3 2514 	strh.w	r2, [r3, #1300]	; 0x514
	seria[163].interval = 1175;
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <inputseria+0xbf4>)
 8003ae8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <inputseria+0xc0c>)
 8003aee:	601a      	str	r2, [r3, #0]
	seria[163].waittime = 105;
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <inputseria+0xbf4>)
 8003af2:	2269      	movs	r2, #105	; 0x69
 8003af4:	f8a3 251c 	strh.w	r2, [r3, #1308]	; 0x51c
	seria[164].interval = 1397;
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <inputseria+0xbf4>)
 8003afa:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8003afe:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <inputseria+0xc14>)
 8003b00:	601a      	str	r2, [r3, #0]
	seria[164].waittime = 224;
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <inputseria+0xbf4>)
 8003b04:	22e0      	movs	r2, #224	; 0xe0
 8003b06:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
	seria[165].interval = 1319;
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <inputseria+0xbf4>)
 8003b0c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <inputseria+0xc10>)
 8003b12:	601a      	str	r2, [r3, #0]
	seria[165].waittime = 105;
 8003b14:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <inputseria+0xbf4>)
 8003b16:	2269      	movs	r2, #105	; 0x69
 8003b18:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
	seria[166].interval = 988;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <inputseria+0xbf4>)
 8003b1e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <inputseria+0xc04>)
 8003b24:	601a      	str	r2, [r3, #0]
	seria[166].waittime = 105;
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <inputseria+0xbf4>)
 8003b28:	2269      	movs	r2, #105	; 0x69
 8003b2a:	f8a3 2534 	strh.w	r2, [r3, #1332]	; 0x534
	seria[167].interval = 1047;
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <inputseria+0xbf4>)
 8003b30:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <inputseria+0xc08>)
 8003b36:	601a      	str	r2, [r3, #0]
	seria[167].waittime = 105;
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <inputseria+0xbf4>)
 8003b3a:	2269      	movs	r2, #105	; 0x69
 8003b3c:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
	seria[168].interval = 880;
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <inputseria+0xbf4>)
 8003b42:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8003b46:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <inputseria+0xc00>)
 8003b48:	601a      	str	r2, [r3, #0]
	seria[168].waittime = 105;
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <inputseria+0xbf4>)
 8003b4c:	2269      	movs	r2, #105	; 0x69
 8003b4e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	seria[169].interval = 988;
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <inputseria+0xbf4>)
 8003b54:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <inputseria+0xc04>)
 8003b5a:	601a      	str	r2, [r3, #0]
	seria[169].waittime = 2576;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <inputseria+0xbf4>)
 8003b5e:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003b62:	f8a3 254c 	strh.w	r2, [r3, #1356]	; 0x54c

}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	200003c4 	.word	0x200003c4
 8003b74:	442e8000 	.word	0x442e8000
 8003b78:	44440000 	.word	0x44440000
 8003b7c:	445c0000 	.word	0x445c0000
 8003b80:	44770000 	.word	0x44770000
 8003b84:	4482e000 	.word	0x4482e000
 8003b88:	4492e000 	.word	0x4492e000
 8003b8c:	44a4e000 	.word	0x44a4e000
 8003b90:	44aea000 	.word	0x44aea000
 8003b94:	44c40000 	.word	0x44c40000
 8003b98:	43930000 	.word	0x43930000
 8003b9c:	43a50000 	.word	0x43a50000
 8003ba0:	43ae8000 	.word	0x43ae8000
 8003ba4:	43c40000 	.word	0x43c40000
 8003ba8:	43dc0000 	.word	0x43dc0000
 8003bac:	43f70000 	.word	0x43f70000
 8003bb0:	4402c000 	.word	0x4402c000
 8003bb4:	4424c000 	.word	0x4424c000

08003bb8 <read_switch1>:


#include "PL_switch.h"
#include "gpio.h"

char read_switch1(void){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_1_GPIO_Port,SWITCH_1_Pin)==0);
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <read_switch1+0x28>)
 8003bc2:	f00a fce3 	bl	800e58c <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	71fb      	strb	r3, [r7, #7]


return check;
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	48000400 	.word	0x48000400

08003be4 <read_switch2>:

char read_switch2(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0

	char check=(HAL_GPIO_ReadPin(SWITCH_2_GPIO_Port,SWITCH_2_Pin)==0);
 8003bea:	2180      	movs	r1, #128	; 0x80
 8003bec:	4807      	ldr	r0, [pc, #28]	; (8003c0c <read_switch2+0x28>)
 8003bee:	f00a fccd 	bl	800e58c <HAL_GPIO_ReadPin>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	71fb      	strb	r3, [r7, #7]


return check;
 8003c00:	79fb      	ldrb	r3, [r7, #7]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	48000400 	.word	0x48000400

08003c10 <pl_timer_init>:
#include "tim.h"

volatile uint32_t g_timCount;


void pl_timer_init(void){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <pl_timer_init+0x10>)
 8003c16:	f00c fa4f 	bl	80100b8 <HAL_TIM_Base_Start_IT>
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	2000ce94 	.word	0x2000ce94

08003c24 <pl_timer_count>:

void pl_timer_count(void){
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
	 g_timCount++;
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <pl_timer_count+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <pl_timer_count+0x18>)
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	20000954 	.word	0x20000954

08003c40 <wait_ms>:


void wait_ms(uint32_t wait_time) {
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <wait_ms+0x30>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <wait_ms+0x34>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
        while (g_timCount < wait_time) {
 8003c56:	bf00      	nop
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <wait_ms+0x30>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d8fa      	bhi.n	8003c58 <wait_ms+0x18>
        }

}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20000954 	.word	0x20000954
 8003c74:	2000ce94 	.word	0x2000ce94

08003c78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c7e:	463b      	mov	r3, r7
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003c8e:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003c90:	4a46      	ldr	r2, [pc, #280]	; (8003dac <MX_ADC1_Init+0x134>)
 8003c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8003c94:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003c96:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8003c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cae:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8003cc0:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cd4:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003cda:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cf0:	482d      	ldr	r0, [pc, #180]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003cf2:	f008 fe33 	bl	800c95c <HAL_ADC_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003cfc:	f000 fb27 	bl	800434e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <MX_ADC1_Init+0x138>)
 8003d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d04:	2306      	movs	r3, #6
 8003d06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d0c:	237f      	movs	r3, #127	; 0x7f
 8003d0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d10:	2304      	movs	r3, #4
 8003d12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4822      	ldr	r0, [pc, #136]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003d1e:	f009 f991 	bl	800d044 <HAL_ADC_ConfigChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003d28:	f000 fb11 	bl	800434e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <MX_ADC1_Init+0x13c>)
 8003d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003d30:	230c      	movs	r3, #12
 8003d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	481b      	ldr	r0, [pc, #108]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003d3a:	f009 f983 	bl	800d044 <HAL_ADC_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8003d44:	f000 fb03 	bl	800434e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MX_ADC1_Init+0x140>)
 8003d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003d4c:	2312      	movs	r3, #18
 8003d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d50:	463b      	mov	r3, r7
 8003d52:	4619      	mov	r1, r3
 8003d54:	4814      	ldr	r0, [pc, #80]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003d56:	f009 f975 	bl	800d044 <HAL_ADC_ConfigChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003d60:	f000 faf5 	bl	800434e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <MX_ADC1_Init+0x144>)
 8003d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003d68:	2318      	movs	r3, #24
 8003d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480d      	ldr	r0, [pc, #52]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003d72:	f009 f967 	bl	800d044 <HAL_ADC_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8003d7c:	f000 fae7 	bl	800434e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <MX_ADC1_Init+0x148>)
 8003d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d8a:	463b      	mov	r3, r7
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4806      	ldr	r0, [pc, #24]	; (8003da8 <MX_ADC1_Init+0x130>)
 8003d90:	f009 f958 	bl	800d044 <HAL_ADC_ConfigChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003d9a:	f000 fad8 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000958 	.word	0x20000958
 8003dac:	50040000 	.word	0x50040000
 8003db0:	43210000 	.word	0x43210000
 8003db4:	3ef08000 	.word	0x3ef08000
 8003db8:	32601000 	.word	0x32601000
 8003dbc:	2e300800 	.word	0x2e300800
 8003dc0:	2a000400 	.word	0x2a000400

08003dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b0a0      	sub	sp, #128	; 0x80
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ddc:	f107 0318 	add.w	r3, r7, #24
 8003de0:	2254      	movs	r2, #84	; 0x54
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00d fe8f 	bl	8011b08 <memset>
  if(adcHandle->Instance==ADC1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a47      	ldr	r2, [pc, #284]	; (8003f0c <HAL_ADC_MspInit+0x148>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	f040 8087 	bne.w	8003f04 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003e02:	2303      	movs	r3, #3
 8003e04:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8003e06:	2303      	movs	r3, #3
 8003e08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003e0e:	2307      	movs	r3, #7
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003e12:	2302      	movs	r3, #2
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003e16:	2302      	movs	r3, #2
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e20:	f107 0318 	add.w	r3, r7, #24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f00b fe07 	bl	800fa38 <HAL_RCCEx_PeriphCLKConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003e30:	f000 fa8d 	bl	800434e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	4a35      	ldr	r2, [pc, #212]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4c:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_ADC_MspInit+0x14c>)
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = SENSOR_4_Pin|SENSOR_3_Pin|SENSOR_2_Pin;
 8003e7c:	23e0      	movs	r3, #224	; 0xe0
 8003e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e80:	230b      	movs	r3, #11
 8003e82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e92:	f00a fa11 	bl	800e2b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR_1_Pin|BATTERY_Pin;
 8003e96:	2303      	movs	r3, #3
 8003e98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e9a:	230b      	movs	r3, #11
 8003e9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	481a      	ldr	r0, [pc, #104]	; (8003f14 <HAL_ADC_MspInit+0x150>)
 8003eaa:	f00a fa05 	bl	800e2b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_ADC_MspInit+0x158>)
 8003eb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003eea:	f009 ffaf 	bl	800de4c <HAL_DMA_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003ef4:	f000 fa2b 	bl	800434e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003efc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003efe:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <HAL_ADC_MspInit+0x154>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003f04:	bf00      	nop
 8003f06:	3780      	adds	r7, #128	; 0x80
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	50040000 	.word	0x50040000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	48000400 	.word	0x48000400
 8003f18:	200009bc 	.word	0x200009bc
 8003f1c:	40020008 	.word	0x40020008

08003f20 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8003f28:	f7fe fdba 	bl	8002aa0 <pl_callback_getSensor>

}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <MX_DMA_Init+0x38>)
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3e:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <MX_DMA_Init+0x38>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6493      	str	r3, [r2, #72]	; 0x48
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <MX_DMA_Init+0x38>)
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	2100      	movs	r1, #0
 8003f56:	200b      	movs	r0, #11
 8003f58:	f009 ff41 	bl	800ddde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003f5c:	200b      	movs	r0, #11
 8003f5e:	f009 ff5a 	bl	800de16 <HAL_NVIC_EnableIRQ>

}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <MX_GPIO_Init+0xfc>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	4a38      	ldr	r2, [pc, #224]	; (800406c <MX_GPIO_Init+0xfc>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <MX_GPIO_Init+0xfc>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9e:	4b33      	ldr	r3, [pc, #204]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	4a32      	ldr	r2, [pc, #200]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <MX_GPIO_Init+0xfc>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSORLED_1_Pin|SENSORLED_2_Pin, GPIO_PIN_RESET);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003fd4:	4826      	ldr	r0, [pc, #152]	; (8004070 <MX_GPIO_Init+0x100>)
 8003fd6:	f00a faf1 	bl	800e5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin, GPIO_PIN_RESET);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe4:	f00a faea 	bl	800e5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin, GPIO_PIN_RESET);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2138      	movs	r1, #56	; 0x38
 8003fec:	4821      	ldr	r0, [pc, #132]	; (8004074 <MX_GPIO_Init+0x104>)
 8003fee:	f00a fae5 	bl	800e5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SENSORLED_1_Pin|SENSORLED_2_Pin;
 8003ff2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	4619      	mov	r1, r3
 800400a:	4819      	ldr	r0, [pc, #100]	; (8004070 <MX_GPIO_Init+0x100>)
 800400c:	f00a f954 	bl	800e2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_ENABLE_Pin|MOTOR_CW_CCW_L_Pin;
 8004010:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004016:	2301      	movs	r3, #1
 8004018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	4619      	mov	r1, r3
 8004028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402c:	f00a f944 	bl	800e2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INTERFACELED_Pin|MOTOR_CW_CCW_R_Pin|MD_RESET_Pin;
 8004030:	2338      	movs	r3, #56	; 0x38
 8004032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004034:	2301      	movs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004040:	f107 030c 	add.w	r3, r7, #12
 8004044:	4619      	mov	r1, r3
 8004046:	480b      	ldr	r0, [pc, #44]	; (8004074 <MX_GPIO_Init+0x104>)
 8004048:	f00a f936 	bl	800e2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin;
 800404c:	23c0      	movs	r3, #192	; 0xc0
 800404e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	4619      	mov	r1, r3
 800405e:	4805      	ldr	r0, [pc, #20]	; (8004074 <MX_GPIO_Init+0x104>)
 8004060:	f00a f92a 	bl	800e2b8 <HAL_GPIO_Init>

}
 8004064:	bf00      	nop
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	48000800 	.word	0x48000800
 8004074:	48000400 	.word	0x48000400

08004078 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <MX_I2C1_Init+0x74>)
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <MX_I2C1_Init+0x78>)
 8004080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <MX_I2C1_Init+0x74>)
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <MX_I2C1_Init+0x7c>)
 8004086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <MX_I2C1_Init+0x74>)
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <MX_I2C1_Init+0x74>)
 8004090:	2201      	movs	r2, #1
 8004092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <MX_I2C1_Init+0x74>)
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <MX_I2C1_Init+0x74>)
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <MX_I2C1_Init+0x74>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <MX_I2C1_Init+0x74>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <MX_I2C1_Init+0x74>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040b2:	480e      	ldr	r0, [pc, #56]	; (80040ec <MX_I2C1_Init+0x74>)
 80040b4:	f00a fa9a 	bl	800e5ec <HAL_I2C_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040be:	f000 f946 	bl	800434e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040c2:	2100      	movs	r1, #0
 80040c4:	4809      	ldr	r0, [pc, #36]	; (80040ec <MX_I2C1_Init+0x74>)
 80040c6:	f00a fd95 	bl	800ebf4 <HAL_I2CEx_ConfigAnalogFilter>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040d0:	f000 f93d 	bl	800434e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040d4:	2100      	movs	r1, #0
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_I2C1_Init+0x74>)
 80040d8:	f00a fdd7 	bl	800ec8a <HAL_I2CEx_ConfigDigitalFilter>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040e2:	f000 f934 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000a04 	.word	0x20000a04
 80040f0:	40005400 	.word	0x40005400
 80040f4:	10909cec 	.word	0x10909cec

080040f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b09e      	sub	sp, #120	; 0x78
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	2254      	movs	r2, #84	; 0x54
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f00d fcf5 	bl	8011b08 <memset>
  if(i2cHandle->Instance==I2C1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <HAL_I2C_MspInit+0xa8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d137      	bne.n	8004198 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	4618      	mov	r0, r3
 8004136:	f00b fc7f 	bl	800fa38 <HAL_RCCEx_PeriphCLKConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004140:	f000 f905 	bl	800434e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800415c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004162:	2312      	movs	r3, #18
 8004164:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004166:	2301      	movs	r3, #1
 8004168:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416a:	2303      	movs	r3, #3
 800416c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800416e:	2304      	movs	r3, #4
 8004170:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004172:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004176:	4619      	mov	r1, r3
 8004178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417c:	f00a f89c 	bl	800e2b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 8004186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_I2C_MspInit+0xac>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004198:	bf00      	nop
 800419a:	3778      	adds	r7, #120	; 0x78
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40005400 	.word	0x40005400
 80041a4:	40021000 	.word	0x40021000

080041a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ae:	f008 f926 	bl	800c3fe <HAL_Init>
  /* USER CODE BEGIN Init */
 // setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041b2:	f000 f87d 	bl	80042b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041b6:	f7ff fedb 	bl	8003f70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80041ba:	f008 f85d 	bl	800c278 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80041be:	f007 f8d9 	bl	800b374 <MX_TIM6_Init>
  MX_I2C1_Init();
 80041c2:	f7ff ff59 	bl	8004078 <MX_I2C1_Init>
  MX_DMA_Init();
 80041c6:	f7ff feb5 	bl	8003f34 <MX_DMA_Init>
  MX_ADC1_Init();
 80041ca:	f7ff fd55 	bl	8003c78 <MX_ADC1_Init>
  MX_TIM15_Init();
 80041ce:	f007 f907 	bl	800b3e0 <MX_TIM15_Init>
  MX_TIM1_Init();
 80041d2:	f006 ffe5 	bl	800b1a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80041d6:	f007 f873 	bl	800b2c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_WallControl();
 80041da:	f7fe f85d 	bl	8002298 <init_WallControl>
  pl_motor_init();
 80041de:	f7fe fa87 	bl	80026f0 <pl_motor_init>
  pl_speaker_init();
 80041e2:	f7fe fd67 	bl	8002cb4 <pl_speaker_init>
  pl_timer_init();
 80041e6:	f7ff fd13 	bl	8003c10 <pl_timer_init>
  pl_lcd_init();
 80041ea:	f7fe fa26 	bl	800263a <pl_lcd_init>
  motor_init();
 80041ee:	f7fc ff7f 	bl	80010f0 <motor_init>
  record_reset();
 80041f2:	f006 fdb7 	bl	800ad64 <record_reset>
  input_parameter();
 80041f6:	f007 fa73 	bl	800b6e0 <input_parameter>

  pl_lcd_puts("Hello");
 80041fa:	4829      	ldr	r0, [pc, #164]	; (80042a0 <main+0xf8>)
 80041fc:	f7fe fa08 	bl	8002610 <pl_lcd_puts>
  pl_lcd_pos(1, 0);
 8004200:	2100      	movs	r1, #0
 8004202:	2001      	movs	r0, #1
 8004204:	f7fe fa3f 	bl	8002686 <pl_lcd_pos>
  pl_lcd_puts("   STM32");
 8004208:	4826      	ldr	r0, [pc, #152]	; (80042a4 <main+0xfc>)
 800420a:	f7fe fa01 	bl	8002610 <pl_lcd_puts>
  HAL_Delay(500);
 800420e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004212:	f008 f969 	bl	800c4e8 <HAL_Delay>
  pl_lcd_clear();
 8004216:	f7fe fa4e 	bl	80026b6 <pl_lcd_clear>

  if(pl_getbatt() < LIPO_LIMIT){
 800421a:	f7fe fbe5 	bl	80029e8 <pl_getbatt>
 800421e:	ee10 3a10 	vmov	r3, s0
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc f990 	bl	8000548 <__aeabi_f2d>
 8004228:	a31b      	add	r3, pc, #108	; (adr r3, 8004298 <main+0xf0>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc fc55 	bl	8000adc <__aeabi_dcmplt>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <main+0xb8>
	  pl_lcd_clear();
 8004238:	f7fe fa3d 	bl	80026b6 <pl_lcd_clear>
	  pl_lcd_pos(0, 0);
 800423c:	2100      	movs	r1, #0
 800423e:	2000      	movs	r0, #0
 8004240:	f7fe fa21 	bl	8002686 <pl_lcd_pos>
	  pl_lcd_puts("LIPO");
 8004244:	4818      	ldr	r0, [pc, #96]	; (80042a8 <main+0x100>)
 8004246:	f7fe f9e3 	bl	8002610 <pl_lcd_puts>
	  pl_lcd_pos(1, 0);
 800424a:	2100      	movs	r1, #0
 800424c:	2001      	movs	r0, #1
 800424e:	f7fe fa1a 	bl	8002686 <pl_lcd_pos>
	  pl_lcd_puts("error");
 8004252:	4816      	ldr	r0, [pc, #88]	; (80042ac <main+0x104>)
 8004254:	f7fe f9dc 	bl	8002610 <pl_lcd_puts>
	  HAL_Delay(10000);
 8004258:	f242 7010 	movw	r0, #10000	; 0x2710
 800425c:	f008 f944 	bl	800c4e8 <HAL_Delay>
  }

  uint16_t cnt = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  mode1=mode_decision(0,mode1);
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	4619      	mov	r1, r3
 8004268:	2000      	movs	r0, #0
 800426a:	f006 f92b 	bl	800a4c4 <mode_decision>
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
	  wait_ms(1000);
 8004272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004276:	f7ff fce3 	bl	8003c40 <wait_ms>
	  mode2=mode_decision(1,mode2);
 800427a:	79bb      	ldrb	r3, [r7, #6]
 800427c:	4619      	mov	r1, r3
 800427e:	2001      	movs	r0, #1
 8004280:	f006 f920 	bl	800a4c4 <mode_decision>
 8004284:	4603      	mov	r3, r0
 8004286:	71bb      	strb	r3, [r7, #6]
	  mode_execution(mode1,mode2);
 8004288:	79ba      	ldrb	r2, [r7, #6]
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f006 fa22 	bl	800a6d8 <mode_execution>
	  mode1=mode_decision(0,mode1);
 8004294:	e7e6      	b.n	8004264 <main+0xbc>
 8004296:	bf00      	nop
 8004298:	9999999a 	.word	0x9999999a
 800429c:	40269999 	.word	0x40269999
 80042a0:	08014c50 	.word	0x08014c50
 80042a4:	08014c58 	.word	0x08014c58
 80042a8:	08014c64 	.word	0x08014c64
 80042ac:	08014c6c 	.word	0x08014c6c

080042b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b096      	sub	sp, #88	; 0x58
 80042b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042b6:	f107 0314 	add.w	r3, r7, #20
 80042ba:	2244      	movs	r2, #68	; 0x44
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f00d fc22 	bl	8011b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042c4:	463b      	mov	r3, r7
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	60da      	str	r2, [r3, #12]
 80042d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80042d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80042d6:	f00a fd33 	bl	800ed40 <HAL_PWREx_ControlVoltageScaling>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80042e0:	f000 f835 	bl	800434e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80042e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80042ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ee:	2302      	movs	r3, #2
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042f2:	2303      	movs	r3, #3
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 80042f6:	2303      	movs	r3, #3
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80042fa:	2328      	movs	r3, #40	; 0x28
 80042fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80042fe:	2307      	movs	r3, #7
 8004300:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004302:	2302      	movs	r3, #2
 8004304:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004306:	2302      	movs	r3, #2
 8004308:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4618      	mov	r0, r3
 8004310:	f00a fd6c 	bl	800edec <HAL_RCC_OscConfig>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800431a:	f000 f818 	bl	800434e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800431e:	230f      	movs	r3, #15
 8004320:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004322:	2303      	movs	r3, #3
 8004324:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004332:	463b      	mov	r3, r7
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f00b f978 	bl	800f62c <HAL_RCC_ClockConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004342:	f000 f804 	bl	800434e <Error_Handler>
  }
}
 8004346:	bf00      	nop
 8004348:	3758      	adds	r7, #88	; 0x58
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004352:	b672      	cpsid	i
}
 8004354:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004356:	e7fe      	b.n	8004356 <Error_Handler+0x8>

08004358 <test_motor_start>:
parameter_speed speed1000_shortest;




void test_motor_start(MOTOR_MODE *wallmode){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	wallmode->WallControlMode=1;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
	wallmode->WallControlStatus=0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	705a      	strb	r2, [r3, #1]
	wallmode->WallCutMode=0;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	70da      	strb	r2, [r3, #3]
	wallmode->calMazeMode=0;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	709a      	strb	r2, [r3, #2]
	pl_motor_standby(1);
 8004378:	2001      	movs	r0, #1
 800437a:	f7fe f9d5 	bl	8002728 <pl_motor_standby>
	HAL_Delay(500);
 800437e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004382:	f008 f8b1 	bl	800c4e8 <HAL_Delay>
	pl_motor_start();
 8004386:	f7fe fa39 	bl	80027fc <pl_motor_start>

}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <test_motor_stop>:

void test_motor_stop(void){
 8004392:	b580      	push	{r7, lr}
 8004394:	af00      	add	r7, sp, #0
	pl_motor_stop();
 8004396:	f7fe fa45 	bl	8002824 <pl_motor_stop>
	HAL_Delay(500);
 800439a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800439e:	f008 f8a3 	bl	800c4e8 <HAL_Delay>
	pl_motor_standby(0);
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fe f9c0 	bl	8002728 <pl_motor_standby>
}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}

080043ac <slalomR>:

void slalomR(parameter turnpara,char test_mode,char shortest_mode) {
 80043ac:	b084      	sub	sp, #16
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	f107 0c10 	add.w	ip, r7, #16
 80043b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80043bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 80c2 	bne.w	800454a <slalomR+0x19e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff ffc5 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 80043ce:	edd7 6a04 	vldr	s13, [r7, #16]
 80043d2:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80043d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80043da:	edd7 7a04 	vldr	s15, [r7, #16]
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80043e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80043ee:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 80043f2:	eddf 5a90 	vldr	s11, [pc, #576]	; 8004634 <slalomR+0x288>
 80043f6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	eeb0 2a47 	vmov.f32	s4, s14
 8004400:	eef0 1a46 	vmov.f32	s3, s12
 8004404:	eeb0 1a66 	vmov.f32	s2, s13
 8004408:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8004638 <slalomR+0x28c>
 800440c:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800463c <slalomR+0x290>
 8004410:	f7fd fbc2 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=0;
 8004414:	2300      	movs	r3, #0
 8004416:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 8004418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d12b      	bne.n	8004478 <slalomR+0xcc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004420:	edd7 7a05 	vldr	s15, [r7, #20]
 8004424:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004428:	ee77 6a87 	vadd.f32	s13, s15, s14
 800442c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004430:	edd7 5a04 	vldr	s11, [r7, #16]
 8004434:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004438:	ed97 7a04 	vldr	s14, [r7, #16]
 800443c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004444:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800444c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004450:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004454:	eddf 4a77 	vldr	s9, [pc, #476]	; 8004634 <slalomR+0x288>
 8004458:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	eeb0 2a47 	vmov.f32	s4, s14
 8004462:	eef0 1a45 	vmov.f32	s3, s10
 8004466:	eeb0 1a65 	vmov.f32	s2, s11
 800446a:	eef0 0a46 	vmov.f32	s1, s12
 800446e:	eeb0 0a66 	vmov.f32	s0, s13
 8004472:	f7fd fb91 	bl	8001b98 <straight_table>
 8004476:	e026      	b.n	80044c6 <slalomR+0x11a>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004478:	edd7 6a05 	vldr	s13, [r7, #20]
 800447c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004480:	edd7 5a04 	vldr	s11, [r7, #16]
 8004484:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004488:	ed97 7a04 	vldr	s14, [r7, #16]
 800448c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004494:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800449c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80044a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80044a4:	eddf 4a63 	vldr	s9, [pc, #396]	; 8004634 <slalomR+0x288>
 80044a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	eeb0 2a47 	vmov.f32	s4, s14
 80044b2:	eef0 1a45 	vmov.f32	s3, s10
 80044b6:	eeb0 1a65 	vmov.f32	s2, s11
 80044ba:	eef0 0a46 	vmov.f32	s1, s12
 80044be:	eeb0 0a66 	vmov.f32	s0, s13
 80044c2:	f7fd fb69 	bl	8001b98 <straight_table>
		}

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80044c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80044ce:	edd7 6a08 	vldr	s13, [r7, #32]
 80044d2:	eef0 2a66 	vmov.f32	s5, s13
 80044d6:	eeb0 2a47 	vmov.f32	s4, s14
 80044da:	eddf 1a59 	vldr	s3, [pc, #356]	; 8004640 <slalomR+0x294>
 80044de:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004640 <slalomR+0x294>
 80044e2:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004634 <slalomR+0x288>
 80044e6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ea:	f7fd fd39 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80044f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80044f6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004634 <slalomR+0x288>
 80044fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 80044fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8004502:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004506:	ed97 7a04 	vldr	s14, [r7, #16]
 800450a:	edd7 7a04 	vldr	s15, [r7, #16]
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004516:	ee27 7a87 	vmul.f32	s14, s15, s14
 800451a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800451e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004522:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8004634 <slalomR+0x288>
 8004526:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	eeb0 2a47 	vmov.f32	s4, s14
 8004530:	eef0 1a65 	vmov.f32	s3, s11
 8004534:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8004640 <slalomR+0x294>
 8004538:	eef0 0a46 	vmov.f32	s1, s12
 800453c:	eeb0 0a66 	vmov.f32	s0, s13
 8004540:	f7fd fb2a 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004544:	f7ff ff25 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004548:	e06d      	b.n	8004626 <slalomR+0x27a>
		wallmode.WallControlMode=1;
 800454a:	2301      	movs	r3, #1
 800454c:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800454e:	2300      	movs	r3, #0
 8004550:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 8004552:	2300      	movs	r3, #0
 8004554:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004556:	2300      	movs	r3, #0
 8004558:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800455a:	edd7 6a05 	vldr	s13, [r7, #20]
 800455e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004562:	edd7 5a04 	vldr	s11, [r7, #16]
 8004566:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800456a:	ed97 7a04 	vldr	s14, [r7, #16]
 800456e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800457a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800457e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004582:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004586:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8004634 <slalomR+0x288>
 800458a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	eeb0 2a47 	vmov.f32	s4, s14
 8004594:	eef0 1a45 	vmov.f32	s3, s10
 8004598:	eeb0 1a65 	vmov.f32	s2, s11
 800459c:	eef0 0a46 	vmov.f32	s1, s12
 80045a0:	eeb0 0a66 	vmov.f32	s0, s13
 80045a4:	f7fd faf8 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80045a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80045b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80045b4:	eef0 2a66 	vmov.f32	s5, s13
 80045b8:	eeb0 2a47 	vmov.f32	s4, s14
 80045bc:	eddf 1a20 	vldr	s3, [pc, #128]	; 8004640 <slalomR+0x294>
 80045c0:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8004640 <slalomR+0x294>
 80045c4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004634 <slalomR+0x288>
 80045c8:	eeb0 0a67 	vmov.f32	s0, s15
 80045cc:	f7fd fcc8 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80045d8:	edd7 6a06 	vldr	s13, [r7, #24]
 80045dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80045e0:	edd7 5a04 	vldr	s11, [r7, #16]
 80045e4:	ed97 5a04 	vldr	s10, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80045e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80045f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004600:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table(turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004604:	eddf 4a0b 	vldr	s9, [pc, #44]	; 8004634 <slalomR+0x288>
 8004608:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	eeb0 2a47 	vmov.f32	s4, s14
 8004612:	eef0 1a45 	vmov.f32	s3, s10
 8004616:	eeb0 1a65 	vmov.f32	s2, s11
 800461a:	eef0 0a46 	vmov.f32	s1, s12
 800461e:	eeb0 0a66 	vmov.f32	s0, s13
 8004622:	f7fd fab9 	bl	8001b98 <straight_table>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004630:	b004      	add	sp, #16
 8004632:	4770      	bx	lr
 8004634:	42b40000 	.word	0x42b40000
 8004638:	42c80000 	.word	0x42c80000
 800463c:	43964000 	.word	0x43964000
 8004640:	00000000 	.word	0x00000000

08004644 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode) {
 8004644:	b084      	sub	sp, #16
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	f107 0c10 	add.w	ip, r7, #16
 8004650:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004654:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 80c6 	bne.w	80047ea <slalomL+0x1a6>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fe79 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 8004666:	edd7 6a04 	vldr	s13, [r7, #16]
 800466a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800466e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004672:	edd7 7a04 	vldr	s15, [r7, #16]
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800467e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004682:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004686:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 270, 100, turnpara.g_speed, turnpara.g_speed,
 800468a:	eddf 5a92 	vldr	s11, [pc, #584]	; 80048d4 <slalomL+0x290>
 800468e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	eeb0 2a47 	vmov.f32	s4, s14
 8004698:	eef0 1a46 	vmov.f32	s3, s12
 800469c:	eeb0 1a66 	vmov.f32	s2, s13
 80046a0:	eddf 0a8d 	vldr	s1, [pc, #564]	; 80048d8 <slalomL+0x294>
 80046a4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80048dc <slalomL+0x298>
 80046a8:	f7fd fa76 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	71fb      	strb	r3, [r7, #7]
		if(shortest_mode==0){
 80046b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d12b      	bne.n	8004710 <slalomL+0xcc>
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80046b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046bc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80046c0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80046c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80046c8:	edd7 5a04 	vldr	s11, [r7, #16]
 80046cc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80046d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80046d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80046e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046e4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80046e8:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80046ec:	eddf 4a79 	vldr	s9, [pc, #484]	; 80048d4 <slalomL+0x290>
 80046f0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	eeb0 2a47 	vmov.f32	s4, s14
 80046fa:	eef0 1a45 	vmov.f32	s3, s10
 80046fe:	eeb0 1a65 	vmov.f32	s2, s11
 8004702:	eef0 0a46 	vmov.f32	s1, s12
 8004706:	eeb0 0a66 	vmov.f32	s0, s13
 800470a:	f7fd fa45 	bl	8001b98 <straight_table>
 800470e:	e026      	b.n	800475e <slalomL+0x11a>
		}else{
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004710:	edd7 6a05 	vldr	s13, [r7, #20]
 8004714:	ed97 6a04 	vldr	s12, [r7, #16]
 8004718:	edd7 5a04 	vldr	s11, [r7, #16]
 800471c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004720:	ed97 7a04 	vldr	s14, [r7, #16]
 8004724:	edd7 7a04 	vldr	s15, [r7, #16]
 8004728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004730:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004734:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004738:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800473c:	eddf 4a65 	vldr	s9, [pc, #404]	; 80048d4 <slalomL+0x290>
 8004740:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	eeb0 2a47 	vmov.f32	s4, s14
 800474a:	eef0 1a45 	vmov.f32	s3, s10
 800474e:	eeb0 1a65 	vmov.f32	s2, s11
 8004752:	eef0 0a46 	vmov.f32	s1, s12
 8004756:	eeb0 0a66 	vmov.f32	s0, s13
 800475a:	f7fd fa1d 	bl	8001b98 <straight_table>
		}

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800475e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004762:	edd7 7a07 	vldr	s15, [r7, #28]
 8004766:	eef1 7a67 	vneg.f32	s15, s15
 800476a:	edd7 6a08 	vldr	s13, [r7, #32]
 800476e:	eef0 2a66 	vmov.f32	s5, s13
 8004772:	eeb0 2a67 	vmov.f32	s4, s15
 8004776:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80048e0 <slalomL+0x29c>
 800477a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80048e0 <slalomL+0x29c>
 800477e:	eddf 0a59 	vldr	s1, [pc, #356]	; 80048e4 <slalomL+0x2a0>
 8004782:	eeb0 0a47 	vmov.f32	s0, s14
 8004786:	f7fd fbeb 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 800478a:	2300      	movs	r3, #0
 800478c:	713b      	strb	r3, [r7, #4]
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800478e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004792:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80048d4 <slalomL+0x290>
 8004796:	ee77 6a87 	vadd.f32	s13, s15, s14
 800479a:	ed97 6a04 	vldr	s12, [r7, #16]
 800479e:	edd7 5a04 	vldr	s11, [r7, #16]
 80047a2:	ed97 5a04 	vldr	s10, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80047a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80047aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80047b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047ba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80047be:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(90 + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80047c2:	eddf 4a44 	vldr	s9, [pc, #272]	; 80048d4 <slalomL+0x290>
 80047c6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	eeb0 2a47 	vmov.f32	s4, s14
 80047d0:	eef0 1a45 	vmov.f32	s3, s10
 80047d4:	eeb0 1a65 	vmov.f32	s2, s11
 80047d8:	eef0 0a46 	vmov.f32	s1, s12
 80047dc:	eeb0 0a66 	vmov.f32	s0, s13
 80047e0:	f7fd f9da 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80047e4:	f7ff fdd5 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80047e8:	e06d      	b.n	80048c6 <slalomL+0x282>
		wallmode.WallControlMode=1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80047fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80047fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8004802:	edd7 5a04 	vldr	s11, [r7, #16]
 8004806:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800480a:	ed97 7a04 	vldr	s14, [r7, #16]
 800480e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800481a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800481e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004822:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004826:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80048d4 <slalomL+0x290>
 800482a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	eeb0 2a47 	vmov.f32	s4, s14
 8004834:	eef0 1a45 	vmov.f32	s3, s10
 8004838:	eeb0 1a65 	vmov.f32	s2, s11
 800483c:	eef0 0a46 	vmov.f32	s1, s12
 8004840:	eeb0 0a66 	vmov.f32	s0, s13
 8004844:	f7fd f9a8 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004848:	ed97 7a04 	vldr	s14, [r7, #16]
 800484c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004850:	eef1 7a67 	vneg.f32	s15, s15
 8004854:	edd7 6a08 	vldr	s13, [r7, #32]
 8004858:	eef0 2a66 	vmov.f32	s5, s13
 800485c:	eeb0 2a67 	vmov.f32	s4, s15
 8004860:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80048e0 <slalomL+0x29c>
 8004864:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80048e0 <slalomL+0x29c>
 8004868:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80048e4 <slalomL+0x2a0>
 800486c:	eeb0 0a47 	vmov.f32	s0, s14
 8004870:	f7fd fb76 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004874:	2300      	movs	r3, #0
 8004876:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004878:	2300      	movs	r3, #0
 800487a:	71fb      	strb	r3, [r7, #7]
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800487c:	edd7 6a06 	vldr	s13, [r7, #24]
 8004880:	ed97 6a04 	vldr	s12, [r7, #16]
 8004884:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004888:	ed97 7a04 	vldr	s14, [r7, #16]
 800488c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004894:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004898:	ee27 7a87 	vmul.f32	s14, s15, s14
 800489c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80048a0:	eec7 7a05 	vdiv.f32	s15, s14, s10
				straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80048a4:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 80048d4 <slalomL+0x290>
 80048a8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	eeb0 2a47 	vmov.f32	s4, s14
 80048b2:	eef0 1a65 	vmov.f32	s3, s11
 80048b6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80048e0 <slalomL+0x29c>
 80048ba:	eef0 0a46 	vmov.f32	s1, s12
 80048be:	eeb0 0a66 	vmov.f32	s0, s13
 80048c2:	f7fd f969 	bl	8001b98 <straight_table>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d0:	b004      	add	sp, #16
 80048d2:	4770      	bx	lr
 80048d4:	42b40000 	.word	0x42b40000
 80048d8:	42c80000 	.word	0x42c80000
 80048dc:	43964000 	.word	0x43964000
 80048e0:	00000000 	.word	0x00000000
 80048e4:	c2b40000 	.word	0xc2b40000

080048e8 <turn90R>:



void turn90R(parameter turnpara, char test_mode) {
 80048e8:	b084      	sub	sp, #16
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f107 0c10 	add.w	ip, r7, #16
 80048f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80048f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 8092 	bne.w	8004a26 <turn90R+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fd27 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800490a:	edd7 6a04 	vldr	s13, [r7, #16]
 800490e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004912:	ed97 7a04 	vldr	s14, [r7, #16]
 8004916:	edd7 7a04 	vldr	s15, [r7, #16]
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004922:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004926:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800492a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800492e:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b0c <turn90R+0x224>
 8004932:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	eeb0 2a47 	vmov.f32	s4, s14
 800493c:	eef0 1a46 	vmov.f32	s3, s12
 8004940:	eeb0 1a66 	vmov.f32	s2, s13
 8004944:	eddf 0a72 	vldr	s1, [pc, #456]	; 8004b10 <turn90R+0x228>
 8004948:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8004b14 <turn90R+0x22c>
 800494c:	f7fd f924 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8004950:	2301      	movs	r3, #1
 8004952:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004954:	edd7 6a05 	vldr	s13, [r7, #20]
 8004958:	ed97 6a04 	vldr	s12, [r7, #16]
 800495c:	edd7 5a04 	vldr	s11, [r7, #16]
 8004960:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004964:	ed97 7a04 	vldr	s14, [r7, #16]
 8004968:	edd7 7a04 	vldr	s15, [r7, #16]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004978:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800497c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004980:	eddf 4a62 	vldr	s9, [pc, #392]	; 8004b0c <turn90R+0x224>
 8004984:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	eeb0 2a47 	vmov.f32	s4, s14
 800498e:	eef0 1a45 	vmov.f32	s3, s10
 8004992:	eeb0 1a65 	vmov.f32	s2, s11
 8004996:	eef0 0a46 	vmov.f32	s1, s12
 800499a:	eeb0 0a66 	vmov.f32	s0, s13
 800499e:	f7fd f8fb 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80049a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80049aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80049ae:	eef0 2a66 	vmov.f32	s5, s13
 80049b2:	eeb0 2a47 	vmov.f32	s4, s14
 80049b6:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004b18 <turn90R+0x230>
 80049ba:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8004b18 <turn90R+0x230>
 80049be:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004b0c <turn90R+0x224>
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	f7fd facb 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80049ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80049d2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004b1c <turn90R+0x234>
 80049d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80049da:	ed97 6a04 	vldr	s12, [r7, #16]
 80049de:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80049e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80049e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80049f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049f6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80049fa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80049fe:	ed9f 5a43 	vldr	s10, [pc, #268]	; 8004b0c <turn90R+0x224>
 8004a02:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	eeb0 2a47 	vmov.f32	s4, s14
 8004a0c:	eef0 1a65 	vmov.f32	s3, s11
 8004a10:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004b18 <turn90R+0x230>
 8004a14:	eef0 0a46 	vmov.f32	s1, s12
 8004a18:	eeb0 0a66 	vmov.f32	s0, s13
 8004a1c:	f7fd f8bc 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004a20:	f7ff fcb7 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004a24:	e06b      	b.n	8004afe <turn90R+0x216>
		wallmode.WallControlMode=1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a36:	edd7 6a05 	vldr	s13, [r7, #20]
 8004a3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a3e:	edd7 5a04 	vldr	s11, [r7, #16]
 8004a42:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004a46:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004a56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a5a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004a5e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004a62:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004b0c <turn90R+0x224>
 8004a66:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	eeb0 2a47 	vmov.f32	s4, s14
 8004a70:	eef0 1a45 	vmov.f32	s3, s10
 8004a74:	eeb0 1a65 	vmov.f32	s2, s11
 8004a78:	eef0 0a46 	vmov.f32	s1, s12
 8004a7c:	eeb0 0a66 	vmov.f32	s0, s13
 8004a80:	f7fd f88a 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004a84:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a8c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004a90:	eef0 2a66 	vmov.f32	s5, s13
 8004a94:	eeb0 2a47 	vmov.f32	s4, s14
 8004a98:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004b18 <turn90R+0x230>
 8004a9c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004b18 <turn90R+0x230>
 8004aa0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004b0c <turn90R+0x224>
 8004aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa8:	f7fd fa5a 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004ab4:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ab8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004abc:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004ac0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004acc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ad0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ad4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004ad8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004adc:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004b0c <turn90R+0x224>
 8004ae0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	eeb0 2a47 	vmov.f32	s4, s14
 8004aea:	eef0 1a65 	vmov.f32	s3, s11
 8004aee:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004b18 <turn90R+0x230>
 8004af2:	eef0 0a46 	vmov.f32	s1, s12
 8004af6:	eeb0 0a66 	vmov.f32	s0, s13
 8004afa:	f7fd f84d 	bl	8001b98 <straight_table>
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b08:	b004      	add	sp, #16
 8004b0a:	4770      	bx	lr
 8004b0c:	42b40000 	.word	0x42b40000
 8004b10:	42c80000 	.word	0x42c80000
 8004b14:	43528000 	.word	0x43528000
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	43340000 	.word	0x43340000

08004b20 <turn90L>:

void turn90L(parameter turnpara, char test_mode) {
 8004b20:	b084      	sub	sp, #16
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f107 0c10 	add.w	ip, r7, #16
 8004b2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	f040 8094 	bne.w	8004c62 <turn90L+0x142>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fc0b 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004b42:	edd7 6a04 	vldr	s13, [r7, #16]
 8004b46:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004b4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004b5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b5e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004b62:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004b66:	eddf 5a79 	vldr	s11, [pc, #484]	; 8004d4c <turn90L+0x22c>
 8004b6a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	eeb0 2a47 	vmov.f32	s4, s14
 8004b74:	eef0 1a46 	vmov.f32	s3, s12
 8004b78:	eeb0 1a66 	vmov.f32	s2, s13
 8004b7c:	eddf 0a74 	vldr	s1, [pc, #464]	; 8004d50 <turn90L+0x230>
 8004b80:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8004d54 <turn90L+0x234>
 8004b84:	f7fd f808 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004b8c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004b90:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b94:	edd7 5a04 	vldr	s11, [r7, #16]
 8004b98:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004b9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004bac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bb0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004bb4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004bb8:	eddf 4a64 	vldr	s9, [pc, #400]	; 8004d4c <turn90L+0x22c>
 8004bbc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	eeb0 2a47 	vmov.f32	s4, s14
 8004bc6:	eef0 1a45 	vmov.f32	s3, s10
 8004bca:	eeb0 1a65 	vmov.f32	s2, s11
 8004bce:	eef0 0a46 	vmov.f32	s1, s12
 8004bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8004bd6:	f7fc ffdf 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004bda:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bde:	edd7 7a07 	vldr	s15, [r7, #28]
 8004be2:	eef1 7a67 	vneg.f32	s15, s15
 8004be6:	edd7 6a08 	vldr	s13, [r7, #32]
 8004bea:	eef0 2a66 	vmov.f32	s5, s13
 8004bee:	eeb0 2a67 	vmov.f32	s4, s15
 8004bf2:	eddf 1a59 	vldr	s3, [pc, #356]	; 8004d58 <turn90L+0x238>
 8004bf6:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004d58 <turn90L+0x238>
 8004bfa:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004d5c <turn90L+0x23c>
 8004bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8004c02:	f7fd f9ad 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004c0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c0e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004d60 <turn90L+0x240>
 8004c12:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004c16:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c1a:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004c1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004c36:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004c3a:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8004d4c <turn90L+0x22c>
 8004c3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	eeb0 2a47 	vmov.f32	s4, s14
 8004c48:	eef0 1a65 	vmov.f32	s3, s11
 8004c4c:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8004d58 <turn90L+0x238>
 8004c50:	eef0 0a46 	vmov.f32	s1, s12
 8004c54:	eeb0 0a66 	vmov.f32	s0, s13
 8004c58:	f7fc ff9e 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004c5c:	f7ff fb99 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004c60:	e06d      	b.n	8004d3e <turn90L+0x21e>
		wallmode.WallControlMode=1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004c72:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c76:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c7a:	edd7 5a04 	vldr	s11, [r7, #16]
 8004c7e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004c82:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c96:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004c9a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004c9e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8004d4c <turn90L+0x22c>
 8004ca2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	eeb0 2a47 	vmov.f32	s4, s14
 8004cac:	eef0 1a45 	vmov.f32	s3, s10
 8004cb0:	eeb0 1a65 	vmov.f32	s2, s11
 8004cb4:	eef0 0a46 	vmov.f32	s1, s12
 8004cb8:	eeb0 0a66 	vmov.f32	s0, s13
 8004cbc:	f7fc ff6c 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8004cc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cc8:	eef1 7a67 	vneg.f32	s15, s15
 8004ccc:	edd7 6a08 	vldr	s13, [r7, #32]
 8004cd0:	eef0 2a66 	vmov.f32	s5, s13
 8004cd4:	eeb0 2a67 	vmov.f32	s4, s15
 8004cd8:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004d58 <turn90L+0x238>
 8004cdc:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004d58 <turn90L+0x238>
 8004ce0:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004d5c <turn90L+0x23c>
 8004ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ce8:	f7fd f93a 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004cf4:	edd7 6a06 	vldr	s13, [r7, #24]
 8004cf8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cfc:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004d00:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004d10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d14:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004d18:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004d1c:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004d4c <turn90L+0x22c>
 8004d20:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	eeb0 2a47 	vmov.f32	s4, s14
 8004d2a:	eef0 1a65 	vmov.f32	s3, s11
 8004d2e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004d58 <turn90L+0x238>
 8004d32:	eef0 0a46 	vmov.f32	s1, s12
 8004d36:	eeb0 0a66 	vmov.f32	s0, s13
 8004d3a:	f7fc ff2d 	bl	8001b98 <straight_table>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d48:	b004      	add	sp, #16
 8004d4a:	4770      	bx	lr
 8004d4c:	42b40000 	.word	0x42b40000
 8004d50:	42c80000 	.word	0x42c80000
 8004d54:	43528000 	.word	0x43528000
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	c2b40000 	.word	0xc2b40000
 8004d60:	43340000 	.word	0x43340000

08004d64 <turn180R>:


void turn180R(parameter turnpara, char test_mode) {
 8004d64:	b084      	sub	sp, #16
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	f107 0c10 	add.w	ip, r7, #16
 8004d70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004d74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 8092 	bne.w	8004ea2 <turn180R+0x13e>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fae9 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004d86:	edd7 6a04 	vldr	s13, [r7, #16]
 8004d8a:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004d8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004da2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004da6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004daa:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004f88 <turn180R+0x224>
 8004dae:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	eeb0 2a47 	vmov.f32	s4, s14
 8004db8:	eef0 1a46 	vmov.f32	s3, s12
 8004dbc:	eeb0 1a66 	vmov.f32	s2, s13
 8004dc0:	eddf 0a72 	vldr	s1, [pc, #456]	; 8004f8c <turn180R+0x228>
 8004dc4:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8004f90 <turn180R+0x22c>
 8004dc8:	f7fc fee6 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004dd0:	edd7 6a05 	vldr	s13, [r7, #20]
 8004dd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004dd8:	edd7 5a04 	vldr	s11, [r7, #16]
 8004ddc:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004de0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004df0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004df4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004df8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004dfc:	eddf 4a62 	vldr	s9, [pc, #392]	; 8004f88 <turn180R+0x224>
 8004e00:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	eeb0 2a47 	vmov.f32	s4, s14
 8004e0a:	eef0 1a45 	vmov.f32	s3, s10
 8004e0e:	eeb0 1a65 	vmov.f32	s2, s11
 8004e12:	eef0 0a46 	vmov.f32	s1, s12
 8004e16:	eeb0 0a66 	vmov.f32	s0, s13
 8004e1a:	f7fc febd 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e22:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e26:	edd7 6a08 	vldr	s13, [r7, #32]
 8004e2a:	eef0 2a66 	vmov.f32	s5, s13
 8004e2e:	eeb0 2a47 	vmov.f32	s4, s14
 8004e32:	eddf 1a58 	vldr	s3, [pc, #352]	; 8004f94 <turn180R+0x230>
 8004e36:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8004f94 <turn180R+0x230>
 8004e3a:	eddf 0a57 	vldr	s1, [pc, #348]	; 8004f98 <turn180R+0x234>
 8004e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e42:	f7fd f88d 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e4e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004f98 <turn180R+0x234>
 8004e52:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004e56:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e5a:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004e5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e62:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004e6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e72:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004e76:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004e7a:	ed9f 5a43 	vldr	s10, [pc, #268]	; 8004f88 <turn180R+0x224>
 8004e7e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	eeb0 2a47 	vmov.f32	s4, s14
 8004e88:	eef0 1a65 	vmov.f32	s3, s11
 8004e8c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004f94 <turn180R+0x230>
 8004e90:	eef0 0a46 	vmov.f32	s1, s12
 8004e94:	eeb0 0a66 	vmov.f32	s0, s13
 8004e98:	f7fc fe7e 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8004e9c:	f7ff fa79 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8004ea0:	e06b      	b.n	8004f7a <turn180R+0x216>
		wallmode.WallControlMode=1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004eb2:	edd7 6a05 	vldr	s13, [r7, #20]
 8004eb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004eba:	edd7 5a04 	vldr	s11, [r7, #16]
 8004ebe:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004ec2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ed6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8004eda:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8004ede:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8004f88 <turn180R+0x224>
 8004ee2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	eeb0 2a47 	vmov.f32	s4, s14
 8004eec:	eef0 1a45 	vmov.f32	s3, s10
 8004ef0:	eeb0 1a65 	vmov.f32	s2, s11
 8004ef4:	eef0 0a46 	vmov.f32	s1, s12
 8004ef8:	eeb0 0a66 	vmov.f32	s0, s13
 8004efc:	f7fc fe4c 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8004f00:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f04:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f08:	edd7 6a08 	vldr	s13, [r7, #32]
 8004f0c:	eef0 2a66 	vmov.f32	s5, s13
 8004f10:	eeb0 2a47 	vmov.f32	s4, s14
 8004f14:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004f94 <turn180R+0x230>
 8004f18:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004f94 <turn180R+0x230>
 8004f1c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8004f98 <turn180R+0x234>
 8004f20:	eeb0 0a67 	vmov.f32	s0, s15
 8004f24:	f7fd f81c 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004f30:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f34:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f38:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004f3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f40:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f48:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004f4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f50:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8004f54:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8004f58:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 8004f88 <turn180R+0x224>
 8004f5c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	eeb0 2a47 	vmov.f32	s4, s14
 8004f66:	eef0 1a65 	vmov.f32	s3, s11
 8004f6a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8004f94 <turn180R+0x230>
 8004f6e:	eef0 0a46 	vmov.f32	s1, s12
 8004f72:	eeb0 0a66 	vmov.f32	s0, s13
 8004f76:	f7fc fe0f 	bl	8001b98 <straight_table>
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f84:	b004      	add	sp, #16
 8004f86:	4770      	bx	lr
 8004f88:	42b40000 	.word	0x42b40000
 8004f8c:	42c80000 	.word	0x42c80000
 8004f90:	43528000 	.word	0x43528000
 8004f94:	00000000 	.word	0x00000000
 8004f98:	43340000 	.word	0x43340000

08004f9c <turn180L>:

void turn180L(parameter turnpara, char test_mode) {
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	f107 0c10 	add.w	ip, r7, #16
 8004fa8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8004fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 8094 	bne.w	80050de <turn180L+0x142>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff f9cd 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004fbe:	edd7 6a04 	vldr	s13, [r7, #16]
 8004fc2:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8004fc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fca:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004fd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fda:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8004fde:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8004fe2:	eddf 5a79 	vldr	s11, [pc, #484]	; 80051c8 <turn180L+0x22c>
 8004fe6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	eeb0 2a47 	vmov.f32	s4, s14
 8004ff0:	eef0 1a46 	vmov.f32	s3, s12
 8004ff4:	eeb0 1a66 	vmov.f32	s2, s13
 8004ff8:	eddf 0a74 	vldr	s1, [pc, #464]	; 80051cc <turn180L+0x230>
 8004ffc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80051d0 <turn180L+0x234>
 8005000:	f7fc fdca 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005004:	2301      	movs	r3, #1
 8005006:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005008:	edd7 6a05 	vldr	s13, [r7, #20]
 800500c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005010:	edd7 5a04 	vldr	s11, [r7, #16]
 8005014:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005018:	ed97 7a04 	vldr	s14, [r7, #16]
 800501c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005024:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800502c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005030:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005034:	eddf 4a64 	vldr	s9, [pc, #400]	; 80051c8 <turn180L+0x22c>
 8005038:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	eeb0 2a47 	vmov.f32	s4, s14
 8005042:	eef0 1a45 	vmov.f32	s3, s10
 8005046:	eeb0 1a65 	vmov.f32	s2, s11
 800504a:	eef0 0a46 	vmov.f32	s1, s12
 800504e:	eeb0 0a66 	vmov.f32	s0, s13
 8005052:	f7fc fda1 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005056:	ed97 7a04 	vldr	s14, [r7, #16]
 800505a:	edd7 7a07 	vldr	s15, [r7, #28]
 800505e:	eef1 7a67 	vneg.f32	s15, s15
 8005062:	edd7 6a08 	vldr	s13, [r7, #32]
 8005066:	eef0 2a66 	vmov.f32	s5, s13
 800506a:	eeb0 2a67 	vmov.f32	s4, s15
 800506e:	eddf 1a59 	vldr	s3, [pc, #356]	; 80051d4 <turn180L+0x238>
 8005072:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80051d4 <turn180L+0x238>
 8005076:	eddf 0a58 	vldr	s1, [pc, #352]	; 80051d8 <turn180L+0x23c>
 800507a:	eeb0 0a47 	vmov.f32	s0, s14
 800507e:	f7fc ff6f 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005082:	2300      	movs	r3, #0
 8005084:	713b      	strb	r3, [r7, #4]
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005086:	edd7 7a06 	vldr	s15, [r7, #24]
 800508a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80051dc <turn180L+0x240>
 800508e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005092:	ed97 6a04 	vldr	s12, [r7, #16]
 8005096:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800509a:	ed97 7a04 	vldr	s14, [r7, #16]
 800509e:	edd7 7a04 	vldr	s15, [r7, #16]
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80050aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050ae:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80050b2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(180 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80050b6:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80051c8 <turn180L+0x22c>
 80050ba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	eeb0 2a47 	vmov.f32	s4, s14
 80050c4:	eef0 1a65 	vmov.f32	s3, s11
 80050c8:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80051d4 <turn180L+0x238>
 80050cc:	eef0 0a46 	vmov.f32	s1, s12
 80050d0:	eeb0 0a66 	vmov.f32	s0, s13
 80050d4:	f7fc fd60 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80050d8:	f7ff f95b 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80050dc:	e06d      	b.n	80051ba <turn180L+0x21e>
		wallmode.WallControlMode=1;
 80050de:	2301      	movs	r3, #1
 80050e0:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80050ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80050f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80050f6:	edd7 5a04 	vldr	s11, [r7, #16]
 80050fa:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80050fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8005102:	edd7 7a04 	vldr	s15, [r7, #16]
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800510e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005112:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005116:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800511a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80051c8 <turn180L+0x22c>
 800511e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	eeb0 2a47 	vmov.f32	s4, s14
 8005128:	eef0 1a45 	vmov.f32	s3, s10
 800512c:	eeb0 1a65 	vmov.f32	s2, s11
 8005130:	eef0 0a46 	vmov.f32	s1, s12
 8005134:	eeb0 0a66 	vmov.f32	s0, s13
 8005138:	f7fc fd2e 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800513c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005140:	edd7 7a07 	vldr	s15, [r7, #28]
 8005144:	eef1 7a67 	vneg.f32	s15, s15
 8005148:	edd7 6a08 	vldr	s13, [r7, #32]
 800514c:	eef0 2a66 	vmov.f32	s5, s13
 8005150:	eeb0 2a67 	vmov.f32	s4, s15
 8005154:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80051d4 <turn180L+0x238>
 8005158:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80051d4 <turn180L+0x238>
 800515c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80051d8 <turn180L+0x23c>
 8005160:	eeb0 0a47 	vmov.f32	s0, s14
 8005164:	f7fc fefc 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005168:	2300      	movs	r3, #0
 800516a:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800516c:	2300      	movs	r3, #0
 800516e:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005170:	edd7 6a06 	vldr	s13, [r7, #24]
 8005174:	ed97 6a04 	vldr	s12, [r7, #16]
 8005178:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800517c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005180:	edd7 7a04 	vldr	s15, [r7, #16]
 8005184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005188:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800518c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005190:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005194:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005198:	ed9f 5a0b 	vldr	s10, [pc, #44]	; 80051c8 <turn180L+0x22c>
 800519c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	eeb0 2a47 	vmov.f32	s4, s14
 80051a6:	eef0 1a65 	vmov.f32	s3, s11
 80051aa:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80051d4 <turn180L+0x238>
 80051ae:	eef0 0a46 	vmov.f32	s1, s12
 80051b2:	eeb0 0a66 	vmov.f32	s0, s13
 80051b6:	f7fc fcef 	bl	8001b98 <straight_table>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c4:	b004      	add	sp, #16
 80051c6:	4770      	bx	lr
 80051c8:	42b40000 	.word	0x42b40000
 80051cc:	42c80000 	.word	0x42c80000
 80051d0:	43528000 	.word	0x43528000
 80051d4:	00000000 	.word	0x00000000
 80051d8:	c3340000 	.word	0xc3340000
 80051dc:	43340000 	.word	0x43340000

080051e0 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode) {
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	f107 0c10 	add.w	ip, r7, #16
 80051ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80051f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 809c 	bne.w	8005332 <turn45inR+0x152>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f8ab 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005202:	edd7 6a04 	vldr	s13, [r7, #16]
 8005206:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800520a:	ed97 7a04 	vldr	s14, [r7, #16]
 800520e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800521a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800521e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005222:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005226:	eddf 5ac8 	vldr	s11, [pc, #800]	; 8005548 <turn45inR+0x368>
 800522a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	eeb0 2a47 	vmov.f32	s4, s14
 8005234:	eef0 1a46 	vmov.f32	s3, s12
 8005238:	eeb0 1a66 	vmov.f32	s2, s13
 800523c:	eddf 0ac3 	vldr	s1, [pc, #780]	; 800554c <turn45inR+0x36c>
 8005240:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8005550 <turn45inR+0x370>
 8005244:	f7fc fca8 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005248:	2301      	movs	r3, #1
 800524a:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800524c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005250:	ed97 6a04 	vldr	s12, [r7, #16]
 8005254:	edd7 5a04 	vldr	s11, [r7, #16]
 8005258:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800525c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005260:	edd7 7a04 	vldr	s15, [r7, #16]
 8005264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005268:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800526c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005270:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005274:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005278:	eddf 4ab3 	vldr	s9, [pc, #716]	; 8005548 <turn45inR+0x368>
 800527c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	eeb0 2a47 	vmov.f32	s4, s14
 8005286:	eef0 1a45 	vmov.f32	s3, s10
 800528a:	eeb0 1a65 	vmov.f32	s2, s11
 800528e:	eef0 0a46 	vmov.f32	s1, s12
 8005292:	eeb0 0a66 	vmov.f32	s0, s13
 8005296:	f7fc fc7f 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800529a:	edd7 7a04 	vldr	s15, [r7, #16]
 800529e:	ed97 7a07 	vldr	s14, [r7, #28]
 80052a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80052a6:	eef0 2a66 	vmov.f32	s5, s13
 80052aa:	eeb0 2a47 	vmov.f32	s4, s14
 80052ae:	eddf 1aa9 	vldr	s3, [pc, #676]	; 8005554 <turn45inR+0x374>
 80052b2:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8005554 <turn45inR+0x374>
 80052b6:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8005558 <turn45inR+0x378>
 80052ba:	eeb0 0a67 	vmov.f32	s0, s15
 80052be:	f7fc fe4f 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f93d 	bl	8000548 <__aeabi_f2d>
 80052ce:	a39c      	add	r3, pc, #624	; (adr r3, 8005540 <turn45inR+0x360>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fa ffda 	bl	800028c <__adddf3>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fb fc82 	bl	8000be8 <__aeabi_d2f>
 80052e4:	4603      	mov	r3, r0
 80052e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80052ea:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80052ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80052f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80052fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005302:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005306:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800530a:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8005548 <turn45inR+0x368>
 800530e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	eeb0 2a47 	vmov.f32	s4, s14
 8005318:	eef0 1a46 	vmov.f32	s3, s12
 800531c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8005554 <turn45inR+0x374>
 8005320:	eef0 0a66 	vmov.f32	s1, s13
 8005324:	ee00 3a10 	vmov	s0, r3
 8005328:	f7fc fc36 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 800532c:	f7ff f831 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8005330:	e0fc      	b.n	800552c <turn45inR+0x34c>
	} else if(test_mode == 2){
 8005332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005336:	2b02      	cmp	r3, #2
 8005338:	f040 808c 	bne.w	8005454 <turn45inR+0x274>
		test_motor_start(&wallmode);
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f80a 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005344:	edd7 6a04 	vldr	s13, [r7, #16]
 8005348:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800534c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005350:	edd7 7a04 	vldr	s15, [r7, #16]
 8005354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005358:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800535c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005360:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005364:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005368:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005548 <turn45inR+0x368>
 800536c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	eeb0 2a47 	vmov.f32	s4, s14
 8005376:	eef0 1a46 	vmov.f32	s3, s12
 800537a:	eeb0 1a66 	vmov.f32	s2, s13
 800537e:	eddf 0a73 	vldr	s1, [pc, #460]	; 800554c <turn45inR+0x36c>
 8005382:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8005550 <turn45inR+0x370>
 8005386:	f7fc fc07 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 800538a:	2301      	movs	r3, #1
 800538c:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800538e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005392:	ed97 6a04 	vldr	s12, [r7, #16]
 8005396:	edd7 5a04 	vldr	s11, [r7, #16]
 800539a:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800539e:	ed97 7a04 	vldr	s14, [r7, #16]
 80053a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80053ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80053b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80053ba:	eddf 4a63 	vldr	s9, [pc, #396]	; 8005548 <turn45inR+0x368>
 80053be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	eeb0 2a47 	vmov.f32	s4, s14
 80053c8:	eef0 1a45 	vmov.f32	s3, s10
 80053cc:	eeb0 1a65 	vmov.f32	s2, s11
 80053d0:	eef0 0a46 	vmov.f32	s1, s12
 80053d4:	eeb0 0a66 	vmov.f32	s0, s13
 80053d8:	f7fc fbde 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80053dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80053e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80053e4:	edd7 6a08 	vldr	s13, [r7, #32]
 80053e8:	eef0 2a66 	vmov.f32	s5, s13
 80053ec:	eeb0 2a47 	vmov.f32	s4, s14
 80053f0:	eddf 1a58 	vldr	s3, [pc, #352]	; 8005554 <turn45inR+0x374>
 80053f4:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8005554 <turn45inR+0x374>
 80053f8:	eddf 0a57 	vldr	s1, [pc, #348]	; 8005558 <turn45inR+0x378>
 80053fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005400:	f7fc fdae 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005404:	2300      	movs	r3, #0
 8005406:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005408:	edd7 6a06 	vldr	s13, [r7, #24]
 800540c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005410:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005414:	ed97 7a04 	vldr	s14, [r7, #16]
 8005418:	edd7 7a04 	vldr	s15, [r7, #16]
 800541c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005420:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005428:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800542c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005430:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8005548 <turn45inR+0x368>
 8005434:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	eeb0 2a47 	vmov.f32	s4, s14
 800543e:	eef0 1a65 	vmov.f32	s3, s11
 8005442:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8005554 <turn45inR+0x374>
 8005446:	eef0 0a46 	vmov.f32	s1, s12
 800544a:	eeb0 0a66 	vmov.f32	s0, s13
 800544e:	f7fc fba3 	bl	8001b98 <straight_table>
}
 8005452:	e06b      	b.n	800552c <turn45inR+0x34c>
		wallmode.WallControlMode=1;
 8005454:	2301      	movs	r3, #1
 8005456:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005458:	2300      	movs	r3, #0
 800545a:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 800545c:	2301      	movs	r3, #1
 800545e:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005460:	2300      	movs	r3, #0
 8005462:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005464:	edd7 6a05 	vldr	s13, [r7, #20]
 8005468:	ed97 6a04 	vldr	s12, [r7, #16]
 800546c:	edd7 5a04 	vldr	s11, [r7, #16]
 8005470:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005474:	ed97 7a04 	vldr	s14, [r7, #16]
 8005478:	edd7 7a04 	vldr	s15, [r7, #16]
 800547c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005480:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005488:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800548c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005490:	eddf 4a2d 	vldr	s9, [pc, #180]	; 8005548 <turn45inR+0x368>
 8005494:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	eeb0 2a47 	vmov.f32	s4, s14
 800549e:	eef0 1a45 	vmov.f32	s3, s10
 80054a2:	eeb0 1a65 	vmov.f32	s2, s11
 80054a6:	eef0 0a46 	vmov.f32	s1, s12
 80054aa:	eeb0 0a66 	vmov.f32	s0, s13
 80054ae:	f7fc fb73 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80054b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80054b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80054ba:	edd7 6a08 	vldr	s13, [r7, #32]
 80054be:	eef0 2a66 	vmov.f32	s5, s13
 80054c2:	eeb0 2a47 	vmov.f32	s4, s14
 80054c6:	eddf 1a23 	vldr	s3, [pc, #140]	; 8005554 <turn45inR+0x374>
 80054ca:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8005554 <turn45inR+0x374>
 80054ce:	eddf 0a22 	vldr	s1, [pc, #136]	; 8005558 <turn45inR+0x378>
 80054d2:	eeb0 0a67 	vmov.f32	s0, s15
 80054d6:	f7fc fd43 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80054da:	2300      	movs	r3, #0
 80054dc:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80054de:	2300      	movs	r3, #0
 80054e0:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80054e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80054e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80054ea:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80054ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80054f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80054fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005502:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005506:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800550a:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8005548 <turn45inR+0x368>
 800550e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	eeb0 2a47 	vmov.f32	s4, s14
 8005518:	eef0 1a65 	vmov.f32	s3, s11
 800551c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8005554 <turn45inR+0x374>
 8005520:	eef0 0a46 	vmov.f32	s1, s12
 8005524:	eeb0 0a66 	vmov.f32	s0, s13
 8005528:	f7fc fb36 	bl	8001b98 <straight_table>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005536:	b004      	add	sp, #16
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	f3af 8000 	nop.w
 8005540:	c083126e 	.word	0xc083126e
 8005544:	406fd1ca 	.word	0x406fd1ca
 8005548:	42b40000 	.word	0x42b40000
 800554c:	42c80000 	.word	0x42c80000
 8005550:	43528000 	.word	0x43528000
 8005554:	00000000 	.word	0x00000000
 8005558:	42340000 	.word	0x42340000
 800555c:	00000000 	.word	0x00000000

08005560 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode) {
 8005560:	b084      	sub	sp, #16
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	f107 0c10 	add.w	ip, r7, #16
 800556c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8005570:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 809e 	bne.w	80056b6 <turn45inL+0x156>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe feeb 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005582:	edd7 6a04 	vldr	s13, [r7, #16]
 8005586:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800558a:	ed97 7a04 	vldr	s14, [r7, #16]
 800558e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800559a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800559e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80055a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80055a6:	eddf 5aca 	vldr	s11, [pc, #808]	; 80058d0 <turn45inL+0x370>
 80055aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	eeb0 2a47 	vmov.f32	s4, s14
 80055b4:	eef0 1a46 	vmov.f32	s3, s12
 80055b8:	eeb0 1a66 	vmov.f32	s2, s13
 80055bc:	eddf 0ac5 	vldr	s1, [pc, #788]	; 80058d4 <turn45inL+0x374>
 80055c0:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 80058d8 <turn45inL+0x378>
 80055c4:	f7fc fae8 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 80055c8:	2301      	movs	r3, #1
 80055ca:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80055cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80055d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80055d4:	edd7 5a04 	vldr	s11, [r7, #16]
 80055d8:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80055dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80055e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80055ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055f0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80055f4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80055f8:	eddf 4ab5 	vldr	s9, [pc, #724]	; 80058d0 <turn45inL+0x370>
 80055fc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	eeb0 2a47 	vmov.f32	s4, s14
 8005606:	eef0 1a45 	vmov.f32	s3, s10
 800560a:	eeb0 1a65 	vmov.f32	s2, s11
 800560e:	eef0 0a46 	vmov.f32	s1, s12
 8005612:	eeb0 0a66 	vmov.f32	s0, s13
 8005616:	f7fc fabf 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800561a:	ed97 7a04 	vldr	s14, [r7, #16]
 800561e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005622:	eef1 7a67 	vneg.f32	s15, s15
 8005626:	edd7 6a08 	vldr	s13, [r7, #32]
 800562a:	eef0 2a66 	vmov.f32	s5, s13
 800562e:	eeb0 2a67 	vmov.f32	s4, s15
 8005632:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80058dc <turn45inL+0x37c>
 8005636:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 80058dc <turn45inL+0x37c>
 800563a:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80058e0 <turn45inL+0x380>
 800563e:	eeb0 0a47 	vmov.f32	s0, s14
 8005642:	f7fc fc8d 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005646:	2300      	movs	r3, #0
 8005648:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	4618      	mov	r0, r3
 800564e:	f7fa ff7b 	bl	8000548 <__aeabi_f2d>
 8005652:	a39d      	add	r3, pc, #628	; (adr r3, 80058c8 <turn45inL+0x368>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fe18 	bl	800028c <__adddf3>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f7fb fac0 	bl	8000be8 <__aeabi_d2f>
 8005668:	4603      	mov	r3, r0
 800566a:	edd7 6a04 	vldr	s13, [r7, #16]
 800566e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005672:	ed97 7a04 	vldr	s14, [r7, #16]
 8005676:	edd7 7a04 	vldr	s15, [r7, #16]
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005686:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800568a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800568e:	eddf 5a90 	vldr	s11, [pc, #576]	; 80058d0 <turn45inL+0x370>
 8005692:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	eeb0 2a47 	vmov.f32	s4, s14
 800569c:	eef0 1a46 	vmov.f32	s3, s12
 80056a0:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 80058dc <turn45inL+0x37c>
 80056a4:	eef0 0a66 	vmov.f32	s1, s13
 80056a8:	ee00 3a10 	vmov	s0, r3
 80056ac:	f7fc fa74 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80056b0:	f7fe fe6f 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80056b4:	e100      	b.n	80058b8 <turn45inL+0x358>
	} else if(test_mode == 2){
 80056b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	f040 808e 	bne.w	80057dc <turn45inL+0x27c>
		test_motor_start(&wallmode);
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fe48 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80056c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80056cc:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80056d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80056d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80056d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80056e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056e4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80056e8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 80056ec:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058d0 <turn45inL+0x370>
 80056f0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	eeb0 2a47 	vmov.f32	s4, s14
 80056fa:	eef0 1a46 	vmov.f32	s3, s12
 80056fe:	eeb0 1a66 	vmov.f32	s2, s13
 8005702:	eddf 0a74 	vldr	s1, [pc, #464]	; 80058d4 <turn45inL+0x374>
 8005706:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80058d8 <turn45inL+0x378>
 800570a:	f7fc fa45 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 800570e:	2301      	movs	r3, #1
 8005710:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005712:	edd7 6a05 	vldr	s13, [r7, #20]
 8005716:	ed97 6a04 	vldr	s12, [r7, #16]
 800571a:	edd7 5a04 	vldr	s11, [r7, #16]
 800571e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005722:	ed97 7a04 	vldr	s14, [r7, #16]
 8005726:	edd7 7a04 	vldr	s15, [r7, #16]
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005736:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800573a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800573e:	eddf 4a64 	vldr	s9, [pc, #400]	; 80058d0 <turn45inL+0x370>
 8005742:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	eeb0 2a47 	vmov.f32	s4, s14
 800574c:	eef0 1a45 	vmov.f32	s3, s10
 8005750:	eeb0 1a65 	vmov.f32	s2, s11
 8005754:	eef0 0a46 	vmov.f32	s1, s12
 8005758:	eeb0 0a66 	vmov.f32	s0, s13
 800575c:	f7fc fa1c 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005760:	ed97 7a04 	vldr	s14, [r7, #16]
 8005764:	edd7 7a07 	vldr	s15, [r7, #28]
 8005768:	eef1 7a67 	vneg.f32	s15, s15
 800576c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005770:	eef0 2a66 	vmov.f32	s5, s13
 8005774:	eeb0 2a67 	vmov.f32	s4, s15
 8005778:	eddf 1a58 	vldr	s3, [pc, #352]	; 80058dc <turn45inL+0x37c>
 800577c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80058dc <turn45inL+0x37c>
 8005780:	eddf 0a57 	vldr	s1, [pc, #348]	; 80058e0 <turn45inL+0x380>
 8005784:	eeb0 0a47 	vmov.f32	s0, s14
 8005788:	f7fc fbea 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 800578c:	2300      	movs	r3, #0
 800578e:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005790:	edd7 6a06 	vldr	s13, [r7, #24]
 8005794:	ed97 6a04 	vldr	s12, [r7, #16]
 8005798:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800579c:	ed97 7a04 	vldr	s14, [r7, #16]
 80057a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80057a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80057ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057b0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80057b4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80057b8:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80058d0 <turn45inL+0x370>
 80057bc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	eeb0 2a47 	vmov.f32	s4, s14
 80057c6:	eef0 1a65 	vmov.f32	s3, s11
 80057ca:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80058dc <turn45inL+0x37c>
 80057ce:	eef0 0a46 	vmov.f32	s1, s12
 80057d2:	eeb0 0a66 	vmov.f32	s0, s13
 80057d6:	f7fc f9df 	bl	8001b98 <straight_table>
}
 80057da:	e06d      	b.n	80058b8 <turn45inL+0x358>
		wallmode.WallControlMode=1;
 80057dc:	2301      	movs	r3, #1
 80057de:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 80057e4:	2301      	movs	r3, #1
 80057e6:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 80057ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80057f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80057f4:	edd7 5a04 	vldr	s11, [r7, #16]
 80057f8:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80057fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005800:	edd7 7a04 	vldr	s15, [r7, #16]
 8005804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005808:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800580c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005810:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005814:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005818:	eddf 4a2d 	vldr	s9, [pc, #180]	; 80058d0 <turn45inL+0x370>
 800581c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	eeb0 2a47 	vmov.f32	s4, s14
 8005826:	eef0 1a45 	vmov.f32	s3, s10
 800582a:	eeb0 1a65 	vmov.f32	s2, s11
 800582e:	eef0 0a46 	vmov.f32	s1, s12
 8005832:	eeb0 0a66 	vmov.f32	s0, s13
 8005836:	f7fc f9af 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800583a:	ed97 7a04 	vldr	s14, [r7, #16]
 800583e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005842:	eef1 7a67 	vneg.f32	s15, s15
 8005846:	edd7 6a08 	vldr	s13, [r7, #32]
 800584a:	eef0 2a66 	vmov.f32	s5, s13
 800584e:	eeb0 2a67 	vmov.f32	s4, s15
 8005852:	eddf 1a22 	vldr	s3, [pc, #136]	; 80058dc <turn45inL+0x37c>
 8005856:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80058dc <turn45inL+0x37c>
 800585a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80058e0 <turn45inL+0x380>
 800585e:	eeb0 0a47 	vmov.f32	s0, s14
 8005862:	f7fc fb7d 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005866:	2300      	movs	r3, #0
 8005868:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 800586a:	2300      	movs	r3, #0
 800586c:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800586e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005872:	ed97 6a04 	vldr	s12, [r7, #16]
 8005876:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800587a:	ed97 7a04 	vldr	s14, [r7, #16]
 800587e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800588a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800588e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005892:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005896:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 80058d0 <turn45inL+0x370>
 800589a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	eeb0 2a47 	vmov.f32	s4, s14
 80058a4:	eef0 1a65 	vmov.f32	s3, s11
 80058a8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80058dc <turn45inL+0x37c>
 80058ac:	eef0 0a46 	vmov.f32	s1, s12
 80058b0:	eeb0 0a66 	vmov.f32	s0, s13
 80058b4:	f7fc f970 	bl	8001b98 <straight_table>
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c2:	b004      	add	sp, #16
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	c083126e 	.word	0xc083126e
 80058cc:	406fd1ca 	.word	0x406fd1ca
 80058d0:	42b40000 	.word	0x42b40000
 80058d4:	42c80000 	.word	0x42c80000
 80058d8:	43528000 	.word	0x43528000
 80058dc:	00000000 	.word	0x00000000
 80058e0:	c2340000 	.word	0xc2340000
 80058e4:	00000000 	.word	0x00000000

080058e8 <turn135inR>:



void turn135inR(parameter turnpara, char test_mode) {
 80058e8:	b084      	sub	sp, #16
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	f107 0c10 	add.w	ip, r7, #16
 80058f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 80058f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	f040 809c 	bne.w	8005a3a <turn135inR+0x152>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8005902:	1d3b      	adds	r3, r7, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fd27 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800590a:	edd7 6a04 	vldr	s13, [r7, #16]
 800590e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005912:	ed97 7a04 	vldr	s14, [r7, #16]
 8005916:	edd7 7a04 	vldr	s15, [r7, #16]
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005922:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005926:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800592a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 800592e:	eddf 5ac8 	vldr	s11, [pc, #800]	; 8005c50 <turn135inR+0x368>
 8005932:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	eeb0 2a47 	vmov.f32	s4, s14
 800593c:	eef0 1a46 	vmov.f32	s3, s12
 8005940:	eeb0 1a66 	vmov.f32	s2, s13
 8005944:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8005c54 <turn135inR+0x36c>
 8005948:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8005c58 <turn135inR+0x370>
 800594c:	f7fc f924 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005950:	2301      	movs	r3, #1
 8005952:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005954:	edd7 6a05 	vldr	s13, [r7, #20]
 8005958:	ed97 6a04 	vldr	s12, [r7, #16]
 800595c:	edd7 5a04 	vldr	s11, [r7, #16]
 8005960:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005964:	ed97 7a04 	vldr	s14, [r7, #16]
 8005968:	edd7 7a04 	vldr	s15, [r7, #16]
 800596c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005970:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005978:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800597c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005980:	eddf 4ab3 	vldr	s9, [pc, #716]	; 8005c50 <turn135inR+0x368>
 8005984:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	eeb0 2a47 	vmov.f32	s4, s14
 800598e:	eef0 1a45 	vmov.f32	s3, s10
 8005992:	eeb0 1a65 	vmov.f32	s2, s11
 8005996:	eef0 0a46 	vmov.f32	s1, s12
 800599a:	eeb0 0a66 	vmov.f32	s0, s13
 800599e:	f7fc f8fb 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80059a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80059a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80059aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80059ae:	eef0 2a66 	vmov.f32	s5, s13
 80059b2:	eeb0 2a47 	vmov.f32	s4, s14
 80059b6:	eddf 1aa9 	vldr	s3, [pc, #676]	; 8005c5c <turn135inR+0x374>
 80059ba:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8005c5c <turn135inR+0x374>
 80059be:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8005c60 <turn135inR+0x378>
 80059c2:	eeb0 0a67 	vmov.f32	s0, s15
 80059c6:	f7fc facb 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fa fdb9 	bl	8000548 <__aeabi_f2d>
 80059d6:	a39c      	add	r3, pc, #624	; (adr r3, 8005c48 <turn135inR+0x360>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fc56 	bl	800028c <__adddf3>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4610      	mov	r0, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	f7fb f8fe 	bl	8000be8 <__aeabi_d2f>
 80059ec:	4603      	mov	r3, r0
 80059ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80059f2:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80059f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80059fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a0a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005a0e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005a12:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8005c50 <turn135inR+0x368>
 8005a16:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	eeb0 2a47 	vmov.f32	s4, s14
 8005a20:	eef0 1a46 	vmov.f32	s3, s12
 8005a24:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8005c5c <turn135inR+0x374>
 8005a28:	eef0 0a66 	vmov.f32	s1, s13
 8005a2c:	ee00 3a10 	vmov	s0, r3
 8005a30:	f7fc f8b2 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005a34:	f7fe fcad 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8005a38:	e0fc      	b.n	8005c34 <turn135inR+0x34c>
	} else if(test_mode == 2){
 8005a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	f040 808c 	bne.w	8005b5c <turn135inR+0x274>
		test_motor_start(&wallmode);
 8005a44:	1d3b      	adds	r3, r7, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fc86 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005a4c:	edd7 6a04 	vldr	s13, [r7, #16]
 8005a50:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005a54:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a60:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005a64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a68:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005a6c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005a70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c50 <turn135inR+0x368>
 8005a74:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	eeb0 2a47 	vmov.f32	s4, s14
 8005a7e:	eef0 1a46 	vmov.f32	s3, s12
 8005a82:	eeb0 1a66 	vmov.f32	s2, s13
 8005a86:	eddf 0a73 	vldr	s1, [pc, #460]	; 8005c54 <turn135inR+0x36c>
 8005a8a:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8005c58 <turn135inR+0x370>
 8005a8e:	f7fc f883 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005a92:	2301      	movs	r3, #1
 8005a94:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005a96:	edd7 6a05 	vldr	s13, [r7, #20]
 8005a9a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a9e:	edd7 5a04 	vldr	s11, [r7, #16]
 8005aa2:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005aa6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005abe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005ac2:	eddf 4a63 	vldr	s9, [pc, #396]	; 8005c50 <turn135inR+0x368>
 8005ac6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	eeb0 2a47 	vmov.f32	s4, s14
 8005ad0:	eef0 1a45 	vmov.f32	s3, s10
 8005ad4:	eeb0 1a65 	vmov.f32	s2, s11
 8005ad8:	eef0 0a46 	vmov.f32	s1, s12
 8005adc:	eeb0 0a66 	vmov.f32	s0, s13
 8005ae0:	f7fc f85a 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8005ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ae8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005aec:	edd7 6a08 	vldr	s13, [r7, #32]
 8005af0:	eef0 2a66 	vmov.f32	s5, s13
 8005af4:	eeb0 2a47 	vmov.f32	s4, s14
 8005af8:	eddf 1a58 	vldr	s3, [pc, #352]	; 8005c5c <turn135inR+0x374>
 8005afc:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8005c5c <turn135inR+0x374>
 8005b00:	eddf 0a57 	vldr	s1, [pc, #348]	; 8005c60 <turn135inR+0x378>
 8005b04:	eeb0 0a67 	vmov.f32	s0, s15
 8005b08:	f7fc fa2a 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005b10:	edd7 6a06 	vldr	s13, [r7, #24]
 8005b14:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b18:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b30:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005b34:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005b38:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8005c50 <turn135inR+0x368>
 8005b3c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	eeb0 2a47 	vmov.f32	s4, s14
 8005b46:	eef0 1a65 	vmov.f32	s3, s11
 8005b4a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8005c5c <turn135inR+0x374>
 8005b4e:	eef0 0a46 	vmov.f32	s1, s12
 8005b52:	eeb0 0a66 	vmov.f32	s0, s13
 8005b56:	f7fc f81f 	bl	8001b98 <straight_table>
}
 8005b5a:	e06b      	b.n	8005c34 <turn135inR+0x34c>
		wallmode.WallControlMode=1;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8005b64:	2301      	movs	r3, #1
 8005b66:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005b6c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005b70:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b74:	edd7 5a04 	vldr	s11, [r7, #16]
 8005b78:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005b7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b90:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005b94:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005b98:	eddf 4a2d 	vldr	s9, [pc, #180]	; 8005c50 <turn135inR+0x368>
 8005b9c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	eeb0 2a47 	vmov.f32	s4, s14
 8005ba6:	eef0 1a45 	vmov.f32	s3, s10
 8005baa:	eeb0 1a65 	vmov.f32	s2, s11
 8005bae:	eef0 0a46 	vmov.f32	s1, s12
 8005bb2:	eeb0 0a66 	vmov.f32	s0, s13
 8005bb6:	f7fb ffef 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8005bba:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bc2:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bc6:	eef0 2a66 	vmov.f32	s5, s13
 8005bca:	eeb0 2a47 	vmov.f32	s4, s14
 8005bce:	eddf 1a23 	vldr	s3, [pc, #140]	; 8005c5c <turn135inR+0x374>
 8005bd2:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8005c5c <turn135inR+0x374>
 8005bd6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8005c60 <turn135inR+0x378>
 8005bda:	eeb0 0a67 	vmov.f32	s0, s15
 8005bde:	f7fc f9bf 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005bea:	edd7 6a06 	vldr	s13, [r7, #24]
 8005bee:	ed97 6a04 	vldr	s12, [r7, #16]
 8005bf2:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005bf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005c06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c0a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005c0e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005c12:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8005c50 <turn135inR+0x368>
 8005c16:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	eeb0 2a47 	vmov.f32	s4, s14
 8005c20:	eef0 1a65 	vmov.f32	s3, s11
 8005c24:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8005c5c <turn135inR+0x374>
 8005c28:	eef0 0a46 	vmov.f32	s1, s12
 8005c2c:	eeb0 0a66 	vmov.f32	s0, s13
 8005c30:	f7fb ffb2 	bl	8001b98 <straight_table>
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3e:	b004      	add	sp, #16
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	f3af 8000 	nop.w
 8005c48:	c083126e 	.word	0xc083126e
 8005c4c:	406fd1ca 	.word	0x406fd1ca
 8005c50:	42b40000 	.word	0x42b40000
 8005c54:	42c80000 	.word	0x42c80000
 8005c58:	43528000 	.word	0x43528000
 8005c5c:	00000000 	.word	0x00000000
 8005c60:	43070000 	.word	0x43070000
 8005c64:	00000000 	.word	0x00000000

08005c68 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode) {
 8005c68:	b084      	sub	sp, #16
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	f107 0c10 	add.w	ip, r7, #16
 8005c74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8005c78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 809e 	bne.w	8005dbe <turn135inL+0x156>
//		highspeed_mode = 1;
//		record_mode = 1;
		test_motor_start(&wallmode);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fb67 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005c8a:	edd7 6a04 	vldr	s13, [r7, #16]
 8005c8e:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005c92:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005ca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ca6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005caa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005cae:	eddf 5aca 	vldr	s11, [pc, #808]	; 8005fd8 <turn135inL+0x370>
 8005cb2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	eeb0 2a47 	vmov.f32	s4, s14
 8005cbc:	eef0 1a46 	vmov.f32	s3, s12
 8005cc0:	eeb0 1a66 	vmov.f32	s2, s13
 8005cc4:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8005fdc <turn135inL+0x374>
 8005cc8:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8005fe0 <turn135inL+0x378>
 8005ccc:	f7fb ff64 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	71fb      	strb	r3, [r7, #7]

		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005cd4:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cd8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cdc:	edd7 5a04 	vldr	s11, [r7, #16]
 8005ce0:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005ce4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005cf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005cf8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005cfc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005d00:	eddf 4ab5 	vldr	s9, [pc, #724]	; 8005fd8 <turn135inL+0x370>
 8005d04:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	eeb0 2a47 	vmov.f32	s4, s14
 8005d0e:	eef0 1a45 	vmov.f32	s3, s10
 8005d12:	eeb0 1a65 	vmov.f32	s2, s11
 8005d16:	eef0 0a46 	vmov.f32	s1, s12
 8005d1a:	eeb0 0a66 	vmov.f32	s0, s13
 8005d1e:	f7fb ff3b 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005d22:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d26:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d2a:	eef1 7a67 	vneg.f32	s15, s15
 8005d2e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d32:	eef0 2a66 	vmov.f32	s5, s13
 8005d36:	eeb0 2a67 	vmov.f32	s4, s15
 8005d3a:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8005fe4 <turn135inL+0x37c>
 8005d3e:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8005fe4 <turn135inL+0x37c>
 8005d42:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8005fe8 <turn135inL+0x380>
 8005d46:	eeb0 0a47 	vmov.f32	s0, s14
 8005d4a:	f7fc f909 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fa fbf7 	bl	8000548 <__aeabi_f2d>
 8005d5a:	a39d      	add	r3, pc, #628	; (adr r3, 8005fd0 <turn135inL+0x368>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fa94 	bl	800028c <__adddf3>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f7fa ff3c 	bl	8000be8 <__aeabi_d2f>
 8005d70:	4603      	mov	r3, r0
 8005d72:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d76:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005d8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d8e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005d92:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005d96:	eddf 5a90 	vldr	s11, [pc, #576]	; 8005fd8 <turn135inL+0x370>
 8005d9a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	eeb0 2a47 	vmov.f32	s4, s14
 8005da4:	eef0 1a46 	vmov.f32	s3, s12
 8005da8:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 8005fe4 <turn135inL+0x37c>
 8005dac:	eef0 0a66 	vmov.f32	s1, s13
 8005db0:	ee00 3a10 	vmov	s0, r3
 8005db4:	f7fb fef0 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8005db8:	f7fe faeb 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8005dbc:	e100      	b.n	8005fc0 <turn135inL+0x358>
	} else if(test_mode == 2){
 8005dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	f040 808e 	bne.w	8005ee4 <turn135inL+0x27c>
		test_motor_start(&wallmode);
 8005dc8:	1d3b      	adds	r3, r7, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fac4 	bl	8004358 <test_motor_start>
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005dd0:	edd7 6a04 	vldr	s13, [r7, #16]
 8005dd4:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005dd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005dec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8005df0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(BACK_TO_CENTER + 180, 100, turnpara.g_speed, turnpara.g_speed,
 8005df4:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fd8 <turn135inL+0x370>
 8005df8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	eeb0 2a47 	vmov.f32	s4, s14
 8005e02:	eef0 1a46 	vmov.f32	s3, s12
 8005e06:	eeb0 1a66 	vmov.f32	s2, s13
 8005e0a:	eddf 0a74 	vldr	s1, [pc, #464]	; 8005fdc <turn135inL+0x374>
 8005e0e:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8005fe0 <turn135inL+0x378>
 8005e12:	f7fb fec1 	bl	8001b98 <straight_table>
		wallmode.WallCutMode=1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005e1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8005e1e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e22:	edd7 5a04 	vldr	s11, [r7, #16]
 8005e26:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005e2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e3e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005e42:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005e46:	eddf 4a64 	vldr	s9, [pc, #400]	; 8005fd8 <turn135inL+0x370>
 8005e4a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	eeb0 2a47 	vmov.f32	s4, s14
 8005e54:	eef0 1a45 	vmov.f32	s3, s10
 8005e58:	eeb0 1a65 	vmov.f32	s2, s11
 8005e5c:	eef0 0a46 	vmov.f32	s1, s12
 8005e60:	eeb0 0a66 	vmov.f32	s0, s13
 8005e64:	f7fb fe98 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005e68:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e70:	eef1 7a67 	vneg.f32	s15, s15
 8005e74:	edd7 6a08 	vldr	s13, [r7, #32]
 8005e78:	eef0 2a66 	vmov.f32	s5, s13
 8005e7c:	eeb0 2a67 	vmov.f32	s4, s15
 8005e80:	eddf 1a58 	vldr	s3, [pc, #352]	; 8005fe4 <turn135inL+0x37c>
 8005e84:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8005fe4 <turn135inL+0x37c>
 8005e88:	eddf 0a57 	vldr	s1, [pc, #348]	; 8005fe8 <turn135inL+0x380>
 8005e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8005e90:	f7fc f866 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	713b      	strb	r3, [r7, #4]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005e98:	edd7 6a06 	vldr	s13, [r7, #24]
 8005e9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ea0:	edd7 5a04 	vldr	s11, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005ea4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005eb8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005ebc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005ec0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8005fd8 <turn135inL+0x370>
 8005ec4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	eeb0 2a47 	vmov.f32	s4, s14
 8005ece:	eef0 1a65 	vmov.f32	s3, s11
 8005ed2:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8005fe4 <turn135inL+0x37c>
 8005ed6:	eef0 0a46 	vmov.f32	s1, s12
 8005eda:	eeb0 0a66 	vmov.f32	s0, s13
 8005ede:	f7fb fe5b 	bl	8001b98 <straight_table>
}
 8005ee2:	e06d      	b.n	8005fc0 <turn135inL+0x358>
		wallmode.WallControlMode=1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005ef4:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ef8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005efc:	edd7 5a04 	vldr	s11, [r7, #16]
 8005f00:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005f04:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f18:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8005f1c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8005f20:	eddf 4a2d 	vldr	s9, [pc, #180]	; 8005fd8 <turn135inL+0x370>
 8005f24:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	eeb0 2a47 	vmov.f32	s4, s14
 8005f2e:	eef0 1a45 	vmov.f32	s3, s10
 8005f32:	eeb0 1a65 	vmov.f32	s2, s11
 8005f36:	eef0 0a46 	vmov.f32	s1, s12
 8005f3a:	eeb0 0a66 	vmov.f32	s0, s13
 8005f3e:	f7fb fe2b 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8005f42:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f46:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f4a:	eef1 7a67 	vneg.f32	s15, s15
 8005f4e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005f52:	eef0 2a66 	vmov.f32	s5, s13
 8005f56:	eeb0 2a67 	vmov.f32	s4, s15
 8005f5a:	eddf 1a22 	vldr	s3, [pc, #136]	; 8005fe4 <turn135inL+0x37c>
 8005f5e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005fe4 <turn135inL+0x37c>
 8005f62:	eddf 0a21 	vldr	s1, [pc, #132]	; 8005fe8 <turn135inL+0x380>
 8005f66:	eeb0 0a47 	vmov.f32	s0, s14
 8005f6a:	f7fb fff9 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005f76:	edd7 6a06 	vldr	s13, [r7, #24]
 8005f7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f7e:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8005f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f86:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f96:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005f9a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8005f9e:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8005fd8 <turn135inL+0x370>
 8005fa2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	eeb0 2a47 	vmov.f32	s4, s14
 8005fac:	eef0 1a65 	vmov.f32	s3, s11
 8005fb0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8005fe4 <turn135inL+0x37c>
 8005fb4:	eef0 0a46 	vmov.f32	s1, s12
 8005fb8:	eeb0 0a66 	vmov.f32	s0, s13
 8005fbc:	f7fb fdec 	bl	8001b98 <straight_table>
}
 8005fc0:	bf00      	nop
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fca:	b004      	add	sp, #16
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	c083126e 	.word	0xc083126e
 8005fd4:	406fd1ca 	.word	0x406fd1ca
 8005fd8:	42b40000 	.word	0x42b40000
 8005fdc:	42c80000 	.word	0x42c80000
 8005fe0:	43528000 	.word	0x43528000
 8005fe4:	00000000 	.word	0x00000000
 8005fe8:	c3070000 	.word	0xc3070000
 8005fec:	00000000 	.word	0x00000000

08005ff0 <turn45outR>:



void turn45outR(parameter turnpara, char test_mode) {
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	f107 0c10 	add.w	ip, r7, #16
 8005ffc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006000:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006004:	2b01      	cmp	r3, #1
 8006006:	d17a      	bne.n	80060fe <turn45outR+0x10e>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006008:	2302      	movs	r3, #2
 800600a:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800600c:	2300      	movs	r3, #0
 800600e:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006010:	2302      	movs	r3, #2
 8006012:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006014:	2300      	movs	r3, #0
 8006016:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006018:	edd7 6a05 	vldr	s13, [r7, #20]
 800601c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006020:	edd7 5a04 	vldr	s11, [r7, #16]
 8006024:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006028:	ed97 7a04 	vldr	s14, [r7, #16]
 800602c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006034:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800603c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006040:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006044:	eddf 4a6a 	vldr	s9, [pc, #424]	; 80061f0 <turn45outR+0x200>
 8006048:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	eeb0 2a47 	vmov.f32	s4, s14
 8006052:	eef0 1a45 	vmov.f32	s3, s10
 8006056:	eeb0 1a65 	vmov.f32	s2, s11
 800605a:	eef0 0a46 	vmov.f32	s1, s12
 800605e:	eeb0 0a66 	vmov.f32	s0, s13
 8006062:	f7fb fd99 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8006066:	edd7 7a04 	vldr	s15, [r7, #16]
 800606a:	ed97 7a07 	vldr	s14, [r7, #28]
 800606e:	edd7 6a08 	vldr	s13, [r7, #32]
 8006072:	eef0 2a66 	vmov.f32	s5, s13
 8006076:	eeb0 2a47 	vmov.f32	s4, s14
 800607a:	eddf 1a5e 	vldr	s3, [pc, #376]	; 80061f4 <turn45outR+0x204>
 800607e:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80061f4 <turn45outR+0x204>
 8006082:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80061f8 <turn45outR+0x208>
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	f7fb ff69 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 800608e:	2300      	movs	r3, #0
 8006090:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fa fa57 	bl	8000548 <__aeabi_f2d>
 800609a:	a353      	add	r3, pc, #332	; (adr r3, 80061e8 <turn45outR+0x1f8>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8f4 	bl	800028c <__adddf3>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	f7fa fd9c 	bl	8000be8 <__aeabi_d2f>
 80060b0:	4603      	mov	r3, r0
 80060b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80060b6:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80060ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80060be:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80060ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80060d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80060d6:	eddf 5a46 	vldr	s11, [pc, #280]	; 80061f0 <turn45outR+0x200>
 80060da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	eeb0 2a47 	vmov.f32	s4, s14
 80060e4:	eef0 1a46 	vmov.f32	s3, s12
 80060e8:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80061f4 <turn45outR+0x204>
 80060ec:	eef0 0a66 	vmov.f32	s1, s13
 80060f0:	ee00 3a10 	vmov	s0, r3
 80060f4:	f7fb fd50 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 80060f8:	f7fe f94b 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 80060fc:	e06b      	b.n	80061d6 <turn45outR+0x1e6>
		wallmode.WallControlMode=2;
 80060fe:	2302      	movs	r3, #2
 8006100:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006102:	2300      	movs	r3, #0
 8006104:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006106:	2302      	movs	r3, #2
 8006108:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800610a:	2300      	movs	r3, #0
 800610c:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800610e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006112:	ed97 6a04 	vldr	s12, [r7, #16]
 8006116:	edd7 5a04 	vldr	s11, [r7, #16]
 800611a:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800611e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006122:	edd7 7a04 	vldr	s15, [r7, #16]
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800612e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006132:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006136:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800613a:	eddf 4a2d 	vldr	s9, [pc, #180]	; 80061f0 <turn45outR+0x200>
 800613e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	eeb0 2a47 	vmov.f32	s4, s14
 8006148:	eef0 1a45 	vmov.f32	s3, s10
 800614c:	eeb0 1a65 	vmov.f32	s2, s11
 8006150:	eef0 0a46 	vmov.f32	s1, s12
 8006154:	eeb0 0a66 	vmov.f32	s0, s13
 8006158:	f7fb fd1e 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800615c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006160:	ed97 7a07 	vldr	s14, [r7, #28]
 8006164:	edd7 6a08 	vldr	s13, [r7, #32]
 8006168:	eef0 2a66 	vmov.f32	s5, s13
 800616c:	eeb0 2a47 	vmov.f32	s4, s14
 8006170:	eddf 1a20 	vldr	s3, [pc, #128]	; 80061f4 <turn45outR+0x204>
 8006174:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80061f4 <turn45outR+0x204>
 8006178:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80061f8 <turn45outR+0x208>
 800617c:	eeb0 0a67 	vmov.f32	s0, s15
 8006180:	f7fb feee 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8006184:	2300      	movs	r3, #0
 8006186:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006188:	2300      	movs	r3, #0
 800618a:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800618c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006190:	ed97 6a04 	vldr	s12, [r7, #16]
 8006194:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006198:	ed97 7a04 	vldr	s14, [r7, #16]
 800619c:	edd7 7a04 	vldr	s15, [r7, #16]
 80061a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80061a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80061ac:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80061b0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80061b4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 80061f0 <turn45outR+0x200>
 80061b8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	eeb0 2a47 	vmov.f32	s4, s14
 80061c2:	eef0 1a65 	vmov.f32	s3, s11
 80061c6:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80061f4 <turn45outR+0x204>
 80061ca:	eef0 0a46 	vmov.f32	s1, s12
 80061ce:	eeb0 0a66 	vmov.f32	s0, s13
 80061d2:	f7fb fce1 	bl	8001b98 <straight_table>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e0:	b004      	add	sp, #16
 80061e2:	4770      	bx	lr
 80061e4:	f3af 8000 	nop.w
 80061e8:	c083126e 	.word	0xc083126e
 80061ec:	406fd1ca 	.word	0x406fd1ca
 80061f0:	42b40000 	.word	0x42b40000
 80061f4:	00000000 	.word	0x00000000
 80061f8:	42340000 	.word	0x42340000
 80061fc:	00000000 	.word	0x00000000

08006200 <turn45outL>:


void turn45outL(parameter turnpara, char test_mode) {
 8006200:	b084      	sub	sp, #16
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	f107 0c10 	add.w	ip, r7, #16
 800620c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006214:	2b01      	cmp	r3, #1
 8006216:	d17c      	bne.n	8006312 <turn45outL+0x112>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006218:	2302      	movs	r3, #2
 800621a:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800621c:	2300      	movs	r3, #0
 800621e:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006220:	2302      	movs	r3, #2
 8006222:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006224:	2300      	movs	r3, #0
 8006226:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006228:	edd7 6a05 	vldr	s13, [r7, #20]
 800622c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006230:	edd7 5a04 	vldr	s11, [r7, #16]
 8006234:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006238:	ed97 7a04 	vldr	s14, [r7, #16]
 800623c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006244:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800624c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006250:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006254:	eddf 4a6c 	vldr	s9, [pc, #432]	; 8006408 <turn45outL+0x208>
 8006258:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	eeb0 2a47 	vmov.f32	s4, s14
 8006262:	eef0 1a45 	vmov.f32	s3, s10
 8006266:	eeb0 1a65 	vmov.f32	s2, s11
 800626a:	eef0 0a46 	vmov.f32	s1, s12
 800626e:	eeb0 0a66 	vmov.f32	s0, s13
 8006272:	f7fb fc91 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006276:	ed97 7a04 	vldr	s14, [r7, #16]
 800627a:	edd7 7a07 	vldr	s15, [r7, #28]
 800627e:	eef1 7a67 	vneg.f32	s15, s15
 8006282:	edd7 6a08 	vldr	s13, [r7, #32]
 8006286:	eef0 2a66 	vmov.f32	s5, s13
 800628a:	eeb0 2a67 	vmov.f32	s4, s15
 800628e:	eddf 1a5f 	vldr	s3, [pc, #380]	; 800640c <turn45outL+0x20c>
 8006292:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800640c <turn45outL+0x20c>
 8006296:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8006410 <turn45outL+0x210>
 800629a:	eeb0 0a47 	vmov.f32	s0, s14
 800629e:	f7fb fe5f 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f94d 	bl	8000548 <__aeabi_f2d>
 80062ae:	a354      	add	r3, pc, #336	; (adr r3, 8006400 <turn45outL+0x200>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7f9 ffea 	bl	800028c <__adddf3>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	f7fa fc92 	bl	8000be8 <__aeabi_d2f>
 80062c4:	4603      	mov	r3, r0
 80062c6:	edd7 6a04 	vldr	s13, [r7, #16]
 80062ca:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80062ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80062d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80062de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062e2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80062e6:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80062ea:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006408 <turn45outL+0x208>
 80062ee:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	eeb0 2a47 	vmov.f32	s4, s14
 80062f8:	eef0 1a46 	vmov.f32	s3, s12
 80062fc:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800640c <turn45outL+0x20c>
 8006300:	eef0 0a66 	vmov.f32	s1, s13
 8006304:	ee00 3a10 	vmov	s0, r3
 8006308:	f7fb fc46 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 800630c:	f7fe f841 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8006310:	e06d      	b.n	80063ee <turn45outL+0x1ee>
		wallmode.WallControlMode=2;
 8006312:	2302      	movs	r3, #2
 8006314:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006316:	2300      	movs	r3, #0
 8006318:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 800631a:	2302      	movs	r3, #2
 800631c:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800631e:	2300      	movs	r3, #0
 8006320:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006322:	edd7 6a05 	vldr	s13, [r7, #20]
 8006326:	ed97 6a04 	vldr	s12, [r7, #16]
 800632a:	edd7 5a04 	vldr	s11, [r7, #16]
 800632e:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006332:	ed97 7a04 	vldr	s14, [r7, #16]
 8006336:	edd7 7a04 	vldr	s15, [r7, #16]
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006346:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800634a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800634e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8006408 <turn45outL+0x208>
 8006352:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	eeb0 2a47 	vmov.f32	s4, s14
 800635c:	eef0 1a45 	vmov.f32	s3, s10
 8006360:	eeb0 1a65 	vmov.f32	s2, s11
 8006364:	eef0 0a46 	vmov.f32	s1, s12
 8006368:	eeb0 0a66 	vmov.f32	s0, s13
 800636c:	f7fb fc14 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006370:	ed97 7a04 	vldr	s14, [r7, #16]
 8006374:	edd7 7a07 	vldr	s15, [r7, #28]
 8006378:	eef1 7a67 	vneg.f32	s15, s15
 800637c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006380:	eef0 2a66 	vmov.f32	s5, s13
 8006384:	eeb0 2a67 	vmov.f32	s4, s15
 8006388:	eddf 1a20 	vldr	s3, [pc, #128]	; 800640c <turn45outL+0x20c>
 800638c:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800640c <turn45outL+0x20c>
 8006390:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8006410 <turn45outL+0x210>
 8006394:	eeb0 0a47 	vmov.f32	s0, s14
 8006398:	f7fb fde2 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 800639c:	2300      	movs	r3, #0
 800639e:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80063a4:	edd7 6a06 	vldr	s13, [r7, #24]
 80063a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80063ac:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80063b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80063b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80063b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80063c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063c4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80063c8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80063cc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8006408 <turn45outL+0x208>
 80063d0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	eeb0 2a47 	vmov.f32	s4, s14
 80063da:	eef0 1a65 	vmov.f32	s3, s11
 80063de:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800640c <turn45outL+0x20c>
 80063e2:	eef0 0a46 	vmov.f32	s1, s12
 80063e6:	eeb0 0a66 	vmov.f32	s0, s13
 80063ea:	f7fb fbd5 	bl	8001b98 <straight_table>
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063f8:	b004      	add	sp, #16
 80063fa:	4770      	bx	lr
 80063fc:	f3af 8000 	nop.w
 8006400:	c083126e 	.word	0xc083126e
 8006404:	406fd1ca 	.word	0x406fd1ca
 8006408:	42b40000 	.word	0x42b40000
 800640c:	00000000 	.word	0x00000000
 8006410:	c2340000 	.word	0xc2340000
 8006414:	00000000 	.word	0x00000000

08006418 <turn135outR>:

void turn135outR(parameter turnpara, char test_mode) {
 8006418:	b084      	sub	sp, #16
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	f107 0c10 	add.w	ip, r7, #16
 8006424:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006428:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800642c:	2b01      	cmp	r3, #1
 800642e:	d17a      	bne.n	8006526 <turn135outR+0x10e>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006430:	2302      	movs	r3, #2
 8006432:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006434:	2300      	movs	r3, #0
 8006436:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006438:	2302      	movs	r3, #2
 800643a:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800643c:	2300      	movs	r3, #0
 800643e:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006440:	edd7 6a05 	vldr	s13, [r7, #20]
 8006444:	ed97 6a04 	vldr	s12, [r7, #16]
 8006448:	edd7 5a04 	vldr	s11, [r7, #16]
 800644c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006450:	ed97 7a04 	vldr	s14, [r7, #16]
 8006454:	edd7 7a04 	vldr	s15, [r7, #16]
 8006458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006460:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006464:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006468:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800646c:	eddf 4a6a 	vldr	s9, [pc, #424]	; 8006618 <turn135outR+0x200>
 8006470:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	eeb0 2a47 	vmov.f32	s4, s14
 800647a:	eef0 1a45 	vmov.f32	s3, s10
 800647e:	eeb0 1a65 	vmov.f32	s2, s11
 8006482:	eef0 0a46 	vmov.f32	s1, s12
 8006486:	eeb0 0a66 	vmov.f32	s0, s13
 800648a:	f7fb fb85 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800648e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006492:	ed97 7a07 	vldr	s14, [r7, #28]
 8006496:	edd7 6a08 	vldr	s13, [r7, #32]
 800649a:	eef0 2a66 	vmov.f32	s5, s13
 800649e:	eeb0 2a47 	vmov.f32	s4, s14
 80064a2:	eddf 1a5e 	vldr	s3, [pc, #376]	; 800661c <turn135outR+0x204>
 80064a6:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800661c <turn135outR+0x204>
 80064aa:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8006620 <turn135outR+0x208>
 80064ae:	eeb0 0a67 	vmov.f32	s0, s15
 80064b2:	f7fb fd55 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fa f843 	bl	8000548 <__aeabi_f2d>
 80064c2:	a353      	add	r3, pc, #332	; (adr r3, 8006610 <turn135outR+0x1f8>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7f9 fee0 	bl	800028c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4610      	mov	r0, r2
 80064d2:	4619      	mov	r1, r3
 80064d4:	f7fa fb88 	bl	8000be8 <__aeabi_d2f>
 80064d8:	4603      	mov	r3, r0
 80064da:	edd7 6a04 	vldr	s13, [r7, #16]
 80064de:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80064e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80064e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80064f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064f6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80064fa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80064fe:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006618 <turn135outR+0x200>
 8006502:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	eeb0 2a47 	vmov.f32	s4, s14
 800650c:	eef0 1a46 	vmov.f32	s3, s12
 8006510:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800661c <turn135outR+0x204>
 8006514:	eef0 0a66 	vmov.f32	s1, s13
 8006518:	ee00 3a10 	vmov	s0, r3
 800651c:	f7fb fb3c 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006520:	f7fd ff37 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8006524:	e06b      	b.n	80065fe <turn135outR+0x1e6>
		wallmode.WallControlMode=2;
 8006526:	2302      	movs	r3, #2
 8006528:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800652a:	2300      	movs	r3, #0
 800652c:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 800652e:	2302      	movs	r3, #2
 8006530:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006532:	2300      	movs	r3, #0
 8006534:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006536:	edd7 6a05 	vldr	s13, [r7, #20]
 800653a:	ed97 6a04 	vldr	s12, [r7, #16]
 800653e:	edd7 5a04 	vldr	s11, [r7, #16]
 8006542:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006546:	ed97 7a04 	vldr	s14, [r7, #16]
 800654a:	edd7 7a04 	vldr	s15, [r7, #16]
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800655a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800655e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006562:	eddf 4a2d 	vldr	s9, [pc, #180]	; 8006618 <turn135outR+0x200>
 8006566:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	eeb0 2a47 	vmov.f32	s4, s14
 8006570:	eef0 1a45 	vmov.f32	s3, s10
 8006574:	eeb0 1a65 	vmov.f32	s2, s11
 8006578:	eef0 0a46 	vmov.f32	s1, s12
 800657c:	eeb0 0a66 	vmov.f32	s0, s13
 8006580:	f7fb fb0a 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 8006584:	edd7 7a04 	vldr	s15, [r7, #16]
 8006588:	ed97 7a07 	vldr	s14, [r7, #28]
 800658c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006590:	eef0 2a66 	vmov.f32	s5, s13
 8006594:	eeb0 2a47 	vmov.f32	s4, s14
 8006598:	eddf 1a20 	vldr	s3, [pc, #128]	; 800661c <turn135outR+0x204>
 800659c:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800661c <turn135outR+0x204>
 80065a0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8006620 <turn135outR+0x208>
 80065a4:	eeb0 0a67 	vmov.f32	s0, s15
 80065a8:	f7fb fcda 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80065b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80065b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80065bc:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80065c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80065c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80065d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065d4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80065d8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80065dc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8006618 <turn135outR+0x200>
 80065e0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	eeb0 2a47 	vmov.f32	s4, s14
 80065ea:	eef0 1a65 	vmov.f32	s3, s11
 80065ee:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800661c <turn135outR+0x204>
 80065f2:	eef0 0a46 	vmov.f32	s1, s12
 80065f6:	eeb0 0a66 	vmov.f32	s0, s13
 80065fa:	f7fb facd 	bl	8001b98 <straight_table>
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w
 8006610:	c083126e 	.word	0xc083126e
 8006614:	406fd1ca 	.word	0x406fd1ca
 8006618:	42b40000 	.word	0x42b40000
 800661c:	00000000 	.word	0x00000000
 8006620:	43070000 	.word	0x43070000
 8006624:	00000000 	.word	0x00000000

08006628 <turn135outL>:


void turn135outL(parameter turnpara, char test_mode) {
 8006628:	b084      	sub	sp, #16
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	f107 0c10 	add.w	ip, r7, #16
 8006634:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d17c      	bne.n	800673a <turn135outL+0x112>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006640:	2302      	movs	r3, #2
 8006642:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006644:	2300      	movs	r3, #0
 8006646:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006648:	2302      	movs	r3, #2
 800664a:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800664c:	2300      	movs	r3, #0
 800664e:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006650:	edd7 6a05 	vldr	s13, [r7, #20]
 8006654:	ed97 6a04 	vldr	s12, [r7, #16]
 8006658:	edd7 5a04 	vldr	s11, [r7, #16]
 800665c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006660:	ed97 7a04 	vldr	s14, [r7, #16]
 8006664:	edd7 7a04 	vldr	s15, [r7, #16]
 8006668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006670:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006674:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006678:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800667c:	eddf 4a6c 	vldr	s9, [pc, #432]	; 8006830 <turn135outL+0x208>
 8006680:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	eeb0 2a47 	vmov.f32	s4, s14
 800668a:	eef0 1a45 	vmov.f32	s3, s10
 800668e:	eeb0 1a65 	vmov.f32	s2, s11
 8006692:	eef0 0a46 	vmov.f32	s1, s12
 8006696:	eeb0 0a66 	vmov.f32	s0, s13
 800669a:	f7fb fa7d 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800669e:	ed97 7a04 	vldr	s14, [r7, #16]
 80066a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80066a6:	eef1 7a67 	vneg.f32	s15, s15
 80066aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80066ae:	eef0 2a66 	vmov.f32	s5, s13
 80066b2:	eeb0 2a67 	vmov.f32	s4, s15
 80066b6:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8006834 <turn135outL+0x20c>
 80066ba:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8006834 <turn135outL+0x20c>
 80066be:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8006838 <turn135outL+0x210>
 80066c2:	eeb0 0a47 	vmov.f32	s0, s14
 80066c6:	f7fb fc4b 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7f9 ff39 	bl	8000548 <__aeabi_f2d>
 80066d6:	a354      	add	r3, pc, #336	; (adr r3, 8006828 <turn135outL+0x200>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7f9 fdd6 	bl	800028c <__adddf3>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4610      	mov	r0, r2
 80066e6:	4619      	mov	r1, r3
 80066e8:	f7fa fa7e 	bl	8000be8 <__aeabi_d2f>
 80066ec:	4603      	mov	r3, r0
 80066ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80066f2:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80066f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80066fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006706:	ee27 7a87 	vmul.f32	s14, s15, s14
 800670a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800670e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006712:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006830 <turn135outL+0x208>
 8006716:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	eeb0 2a47 	vmov.f32	s4, s14
 8006720:	eef0 1a46 	vmov.f32	s3, s12
 8006724:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8006834 <turn135outL+0x20c>
 8006728:	eef0 0a66 	vmov.f32	s1, s13
 800672c:	ee00 3a10 	vmov	s0, r3
 8006730:	f7fb fa32 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006734:	f7fd fe2d 	bl	8004392 <test_motor_stop>
		wallmode.WallCutMode=0;
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}
}
 8006738:	e06d      	b.n	8006816 <turn135outL+0x1ee>
		wallmode.WallControlMode=2;
 800673a:	2302      	movs	r3, #2
 800673c:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800673e:	2300      	movs	r3, #0
 8006740:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006742:	2302      	movs	r3, #2
 8006744:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006746:	2300      	movs	r3, #0
 8006748:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800674a:	edd7 6a05 	vldr	s13, [r7, #20]
 800674e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006752:	edd7 5a04 	vldr	s11, [r7, #16]
 8006756:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800675a:	ed97 7a04 	vldr	s14, [r7, #16]
 800675e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006766:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800676a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800676e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006772:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006776:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8006830 <turn135outL+0x208>
 800677a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	eeb0 2a47 	vmov.f32	s4, s14
 8006784:	eef0 1a45 	vmov.f32	s3, s10
 8006788:	eeb0 1a65 	vmov.f32	s2, s11
 800678c:	eef0 0a46 	vmov.f32	s1, s12
 8006790:	eeb0 0a66 	vmov.f32	s0, s13
 8006794:	f7fb fa00 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006798:	ed97 7a04 	vldr	s14, [r7, #16]
 800679c:	edd7 7a07 	vldr	s15, [r7, #28]
 80067a0:	eef1 7a67 	vneg.f32	s15, s15
 80067a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80067a8:	eef0 2a66 	vmov.f32	s5, s13
 80067ac:	eeb0 2a67 	vmov.f32	s4, s15
 80067b0:	eddf 1a20 	vldr	s3, [pc, #128]	; 8006834 <turn135outL+0x20c>
 80067b4:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8006834 <turn135outL+0x20c>
 80067b8:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8006838 <turn135outL+0x210>
 80067bc:	eeb0 0a47 	vmov.f32	s0, s14
 80067c0:	f7fb fbce 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80067cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80067d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80067d4:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80067d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80067dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80067e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80067e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067ec:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80067f0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80067f4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8006830 <turn135outL+0x208>
 80067f8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	eeb0 2a47 	vmov.f32	s4, s14
 8006802:	eef0 1a65 	vmov.f32	s3, s11
 8006806:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8006834 <turn135outL+0x20c>
 800680a:	eef0 0a46 	vmov.f32	s1, s12
 800680e:	eeb0 0a66 	vmov.f32	s0, s13
 8006812:	f7fb f9c1 	bl	8001b98 <straight_table>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006820:	b004      	add	sp, #16
 8006822:	4770      	bx	lr
 8006824:	f3af 8000 	nop.w
 8006828:	c083126e 	.word	0xc083126e
 800682c:	406fd1ca 	.word	0x406fd1ca
 8006830:	42b40000 	.word	0x42b40000
 8006834:	00000000 	.word	0x00000000
 8006838:	c3070000 	.word	0xc3070000
 800683c:	00000000 	.word	0x00000000

08006840 <V90R>:

void V90R(parameter turnpara, char test_mode) {
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	f107 0c10 	add.w	ip, r7, #16
 800684c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006854:	2b01      	cmp	r3, #1
 8006856:	d17a      	bne.n	800694e <V90R+0x10e>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006858:	2302      	movs	r3, #2
 800685a:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 800685c:	2300      	movs	r3, #0
 800685e:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006860:	2302      	movs	r3, #2
 8006862:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006864:	2300      	movs	r3, #0
 8006866:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006868:	edd7 6a05 	vldr	s13, [r7, #20]
 800686c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006870:	edd7 5a04 	vldr	s11, [r7, #16]
 8006874:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006878:	ed97 7a04 	vldr	s14, [r7, #16]
 800687c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006884:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006888:	ee27 7a87 	vmul.f32	s14, s15, s14
 800688c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006890:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006894:	eddf 4a6a 	vldr	s9, [pc, #424]	; 8006a40 <V90R+0x200>
 8006898:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	eeb0 2a47 	vmov.f32	s4, s14
 80068a2:	eef0 1a45 	vmov.f32	s3, s10
 80068a6:	eeb0 1a65 	vmov.f32	s2, s11
 80068aa:	eef0 0a46 	vmov.f32	s1, s12
 80068ae:	eeb0 0a66 	vmov.f32	s0, s13
 80068b2:	f7fb f971 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80068b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80068ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80068be:	edd7 6a08 	vldr	s13, [r7, #32]
 80068c2:	eef0 2a66 	vmov.f32	s5, s13
 80068c6:	eeb0 2a47 	vmov.f32	s4, s14
 80068ca:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8006a44 <V90R+0x204>
 80068ce:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8006a44 <V90R+0x204>
 80068d2:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8006a40 <V90R+0x200>
 80068d6:	eeb0 0a67 	vmov.f32	s0, s15
 80068da:	f7fb fb41 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80068de:	2300      	movs	r3, #0
 80068e0:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7f9 fe2f 	bl	8000548 <__aeabi_f2d>
 80068ea:	a353      	add	r3, pc, #332	; (adr r3, 8006a38 <V90R+0x1f8>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fccc 	bl	800028c <__adddf3>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	f7fa f974 	bl	8000be8 <__aeabi_d2f>
 8006900:	4603      	mov	r3, r0
 8006902:	edd7 6a04 	vldr	s13, [r7, #16]
 8006906:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800690a:	ed97 7a04 	vldr	s14, [r7, #16]
 800690e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800691a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800691e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8006922:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006926:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006a40 <V90R+0x200>
 800692a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	eeb0 2a47 	vmov.f32	s4, s14
 8006934:	eef0 1a46 	vmov.f32	s3, s12
 8006938:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8006a44 <V90R+0x204>
 800693c:	eef0 0a66 	vmov.f32	s1, s13
 8006940:	ee00 3a10 	vmov	s0, r3
 8006944:	f7fb f928 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006948:	f7fd fd23 	bl	8004392 <test_motor_stop>
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}

}
 800694c:	e06b      	b.n	8006a26 <V90R+0x1e6>
		wallmode.WallControlMode=2;
 800694e:	2302      	movs	r3, #2
 8006950:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006952:	2300      	movs	r3, #0
 8006954:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006956:	2302      	movs	r3, #2
 8006958:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 800695a:	2300      	movs	r3, #0
 800695c:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800695e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006962:	ed97 6a04 	vldr	s12, [r7, #16]
 8006966:	edd7 5a04 	vldr	s11, [r7, #16]
 800696a:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 800696e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006972:	edd7 7a04 	vldr	s15, [r7, #16]
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800697e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006982:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006986:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800698a:	eddf 4a2d 	vldr	s9, [pc, #180]	; 8006a40 <V90R+0x200>
 800698e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	eeb0 2a47 	vmov.f32	s4, s14
 8006998:	eef0 1a45 	vmov.f32	s3, s10
 800699c:	eeb0 1a65 	vmov.f32	s2, s11
 80069a0:	eef0 0a46 	vmov.f32	s1, s12
 80069a4:	eeb0 0a66 	vmov.f32	s0, s13
 80069a8:	f7fb f8f6 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 80069ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80069b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80069b4:	edd7 6a08 	vldr	s13, [r7, #32]
 80069b8:	eef0 2a66 	vmov.f32	s5, s13
 80069bc:	eeb0 2a47 	vmov.f32	s4, s14
 80069c0:	eddf 1a20 	vldr	s3, [pc, #128]	; 8006a44 <V90R+0x204>
 80069c4:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8006a44 <V90R+0x204>
 80069c8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006a40 <V90R+0x200>
 80069cc:	eeb0 0a67 	vmov.f32	s0, s15
 80069d0:	f7fb fac6 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 80069d8:	2300      	movs	r3, #0
 80069da:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 80069dc:	edd7 6a06 	vldr	s13, [r7, #24]
 80069e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80069e4:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 80069e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80069ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80069f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80069f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069fc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8006a00:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006a04:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8006a40 <V90R+0x200>
 8006a08:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	eeb0 2a47 	vmov.f32	s4, s14
 8006a12:	eef0 1a65 	vmov.f32	s3, s11
 8006a16:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8006a44 <V90R+0x204>
 8006a1a:	eef0 0a46 	vmov.f32	s1, s12
 8006a1e:	eeb0 0a66 	vmov.f32	s0, s13
 8006a22:	f7fb f8b9 	bl	8001b98 <straight_table>
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a30:	b004      	add	sp, #16
 8006a32:	4770      	bx	lr
 8006a34:	f3af 8000 	nop.w
 8006a38:	c083126e 	.word	0xc083126e
 8006a3c:	406fd1ca 	.word	0x406fd1ca
 8006a40:	42b40000 	.word	0x42b40000
 8006a44:	00000000 	.word	0x00000000

08006a48 <V90L>:

void V90L(parameter turnpara, char test_mode) {
 8006a48:	b084      	sub	sp, #16
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	f107 0c10 	add.w	ip, r7, #16
 8006a54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 8006a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d17c      	bne.n	8006b5a <V90L+0x112>
//		highspeed_mode = 1;
//		record_mode = 1;
		wallmode.WallControlMode=2;
 8006a60:	2302      	movs	r3, #2
 8006a62:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006a70:	edd7 6a05 	vldr	s13, [r7, #20]
 8006a74:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a78:	edd7 5a04 	vldr	s11, [r7, #16]
 8006a7c:	ed97 5a04 	vldr	s10, [r7, #16]
									turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006a80:	ed97 7a04 	vldr	s14, [r7, #16]
 8006a84:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a94:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006a98:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006a9c:	eddf 4a6c 	vldr	s9, [pc, #432]	; 8006c50 <V90L+0x208>
 8006aa0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	eeb0 2a47 	vmov.f32	s4, s14
 8006aaa:	eef0 1a45 	vmov.f32	s3, s10
 8006aae:	eeb0 1a65 	vmov.f32	s2, s11
 8006ab2:	eef0 0a46 	vmov.f32	s1, s12
 8006ab6:	eeb0 0a66 	vmov.f32	s0, s13
 8006aba:	f7fb f86d 	bl	8001b98 <straight_table>

		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006abe:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ac6:	eef1 7a67 	vneg.f32	s15, s15
 8006aca:	edd7 6a08 	vldr	s13, [r7, #32]
 8006ace:	eef0 2a66 	vmov.f32	s5, s13
 8006ad2:	eeb0 2a67 	vmov.f32	s4, s15
 8006ad6:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8006c54 <V90L+0x20c>
 8006ada:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8006c54 <V90L+0x20c>
 8006ade:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8006c58 <V90L+0x210>
 8006ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8006ae6:	f7fb fa3b 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	713b      	strb	r3, [r7, #4]
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7f9 fd29 	bl	8000548 <__aeabi_f2d>
 8006af6:	a354      	add	r3, pc, #336	; (adr r3, 8006c48 <V90L+0x200>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f7f9 fbc6 	bl	800028c <__adddf3>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7fa f86e 	bl	8000be8 <__aeabi_d2f>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	edd7 6a04 	vldr	s13, [r7, #16]
 8006b12:	ed97 6a04 	vldr	s12, [r7, #16]
				turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006b16:	ed97 7a04 	vldr	s14, [r7, #16]
 8006b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006b26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8006b2e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table(180 * 1.4142 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006b32:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006c50 <V90L+0x208>
 8006b36:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	eeb0 2a47 	vmov.f32	s4, s14
 8006b40:	eef0 1a46 	vmov.f32	s3, s12
 8006b44:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8006c54 <V90L+0x20c>
 8006b48:	eef0 0a66 	vmov.f32	s1, s13
 8006b4c:	ee00 3a10 	vmov	s0, r3
 8006b50:	f7fb f822 	bl	8001b98 <straight_table>

//		record_mode = 0;
		test_motor_stop();
 8006b54:	f7fd fc1d 	bl	8004392 <test_motor_stop>
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);

	}

}
 8006b58:	e06d      	b.n	8006c36 <V90L+0x1ee>
		wallmode.WallControlMode=2;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	713b      	strb	r3, [r7, #4]
		wallmode.WallControlStatus=0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	717b      	strb	r3, [r7, #5]
		wallmode.WallCutMode=2;
 8006b62:	2302      	movs	r3, #2
 8006b64:	71fb      	strb	r3, [r7, #7]
		wallmode.calMazeMode=0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	71bb      	strb	r3, [r7, #6]
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006b6a:	edd7 6a05 	vldr	s13, [r7, #20]
 8006b6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b72:	edd7 5a04 	vldr	s11, [r7, #16]
 8006b76:	ed97 5a04 	vldr	s10, [r7, #16]
											turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006b7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8006b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006b8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b8e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8006b92:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8006b96:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8006c50 <V90L+0x208>
 8006b9a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	eeb0 2a47 	vmov.f32	s4, s14
 8006ba4:	eef0 1a45 	vmov.f32	s3, s10
 8006ba8:	eeb0 1a65 	vmov.f32	s2, s11
 8006bac:	eef0 0a46 	vmov.f32	s1, s12
 8006bb0:	eeb0 0a66 	vmov.f32	s0, s13
 8006bb4:	f7fa fff0 	bl	8001b98 <straight_table>
		slalom_table(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8006bb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006bc0:	eef1 7a67 	vneg.f32	s15, s15
 8006bc4:	edd7 6a08 	vldr	s13, [r7, #32]
 8006bc8:	eef0 2a66 	vmov.f32	s5, s13
 8006bcc:	eeb0 2a67 	vmov.f32	s4, s15
 8006bd0:	eddf 1a20 	vldr	s3, [pc, #128]	; 8006c54 <V90L+0x20c>
 8006bd4:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8006c54 <V90L+0x20c>
 8006bd8:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8006c58 <V90L+0x210>
 8006bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8006be0:	f7fb f9be 	bl	8001f60 <slalom_table>
		wallmode.WallControlMode=0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	713b      	strb	r3, [r7, #4]
		wallmode.WallCutMode=0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	71fb      	strb	r3, [r7, #7]
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006bec:	edd7 6a06 	vldr	s13, [r7, #24]
 8006bf0:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bf4:	edd7 5a04 	vldr	s11, [r7, #16]
						turnpara.g_speed * turnpara.g_speed * 3 / 2 / 90,wallmode);
 8006bf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006c08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c0c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8006c10:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table(turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8006c14:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 8006c50 <V90L+0x208>
 8006c18:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	eeb0 2a47 	vmov.f32	s4, s14
 8006c22:	eef0 1a65 	vmov.f32	s3, s11
 8006c26:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8006c54 <V90L+0x20c>
 8006c2a:	eef0 0a46 	vmov.f32	s1, s12
 8006c2e:	eeb0 0a66 	vmov.f32	s0, s13
 8006c32:	f7fa ffb1 	bl	8001b98 <straight_table>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c40:	b004      	add	sp, #16
 8006c42:	4770      	bx	lr
 8006c44:	f3af 8000 	nop.w
 8006c48:	c083126e 	.word	0xc083126e
 8006c4c:	406fd1ca 	.word	0x406fd1ca
 8006c50:	42b40000 	.word	0x42b40000
 8006c54:	00000000 	.word	0x00000000
 8006c58:	c2b40000 	.word	0xc2b40000

08006c5c <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode){
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af04      	add	r7, sp, #16
 8006c64:	f107 0c08 	add.w	ip, r7, #8
 8006c68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L

	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode);}
 8006c6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <testturning+0x30>
 8006c74:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	f107 0310 	add.w	r3, r7, #16
 8006c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c88:	f7fd fb90 	bl	80043ac <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode);}
 8006c8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10b      	bne.n	8006cac <testturning+0x50>
 8006c94:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ca8:	f7fd fccc 	bl	8004644 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON);}
 8006cac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d108      	bne.n	8006cc6 <testturning+0x6a>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cc2:	f7fd fe11 	bl	80048e8 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON);}
 8006cc6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d108      	bne.n	8006ce0 <testturning+0x84>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cdc:	f7fd ff20 	bl	8004b20 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON);}
 8006ce0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d108      	bne.n	8006cfa <testturning+0x9e>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cf6:	f7fe f835 	bl	8004d64 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON);}
 8006cfa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d109      	bne.n	8006d16 <testturning+0xba>
 8006d02:	2301      	movs	r3, #1
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d12:	f7fe f943 	bl	8004f9c <turn180L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,ON);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,ON);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,ON);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,ON);}

	HAL_Delay(500);
 8006d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d1a:	f005 fbe5 	bl	800c4e8 <HAL_Delay>

}
 8006d1e:	bf00      	nop
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d26:	b004      	add	sp, #16
 8006d28:	4770      	bx	lr
	...

08006d2c <AdatiWayReturn>:
//}



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08e      	sub	sp, #56	; 0x38
 8006d30:	af04      	add	r7, sp, #16
 8006d32:	ed87 0a03 	vstr	s0, [r7, #12]
 8006d36:	edc7 0a02 	vstr	s1, [r7, #8]
 8006d3a:	ed87 1a01 	vstr	s2, [r7, #4]
 8006d3e:	edc7 1a00 	vstr	s3, [r7]

	unsigned short front_count, right_count, back_count, left_count;
	float v_e,v_ea;
//初期化
	x=0;
 8006d42:	4b5f      	ldr	r3, [pc, #380]	; (8006ec0 <AdatiWayReturn+0x194>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
	y=0;
 8006d48:	4b5e      	ldr	r3, [pc, #376]	; (8006ec4 <AdatiWayReturn+0x198>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
	direction=1;
 8006d4e:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <AdatiWayReturn+0x19c>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
//	maze_mode = 1;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 8006d54:	2301      	movs	r3, #1
 8006d56:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	75bb      	strb	r3, [r7, #22]


	pl_motor_standby(1);
 8006d64:	2001      	movs	r0, #1
 8006d66:	f7fb fcdf 	bl	8002728 <pl_motor_standby>
	HAL_Delay(500);
 8006d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d6e:	f005 fbbb 	bl	800c4e8 <HAL_Delay>
//初期位置のセンサー確認
	front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006d72:	4b56      	ldr	r3, [pc, #344]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b55      	ldr	r3, [pc, #340]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	ee07 3a90 	vmov	s15, r3
 8006d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d90:	ee17 3a90 	vmov	r3, s15
 8006d94:	2b2c      	cmp	r3, #44	; 0x2c
 8006d96:	bfcc      	ite	gt
 8006d98:	2301      	movgt	r3, #1
 8006d9a:	2300      	movle	r3, #0
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <AdatiWayReturn+0x1a4>)
 8006da0:	701a      	strb	r2, [r3, #0]
	right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006da2:	4b4a      	ldr	r3, [pc, #296]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b63      	cmp	r3, #99	; 0x63
 8006da8:	bfcc      	ite	gt
 8006daa:	2301      	movgt	r3, #1
 8006dac:	2300      	movle	r3, #0
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	4b48      	ldr	r3, [pc, #288]	; (8006ed4 <AdatiWayReturn+0x1a8>)
 8006db2:	701a      	strb	r2, [r3, #0]
	left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006db4:	4b45      	ldr	r3, [pc, #276]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b63      	cmp	r3, #99	; 0x63
 8006dba:	bfcc      	ite	gt
 8006dbc:	2301      	movgt	r3, #1
 8006dbe:	2300      	movle	r3, #0
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	4b45      	ldr	r3, [pc, #276]	; (8006ed8 <AdatiWayReturn+0x1ac>)
 8006dc4:	701a      	strb	r2, [r3, #0]
//初期位置での迷路展開
	maze_maker();
 8006dc6:	f002 fe7d 	bl	8009ac4 <maze_maker>

	HAL_Delay(100);
 8006dca:	2064      	movs	r0, #100	; 0x64
 8006dcc:	f005 fb8c 	bl	800c4e8 <HAL_Delay>

	pl_motor_start();
 8006dd0:	f7fb fd14 	bl	80027fc <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006dd4:	6978      	ldr	r0, [r7, #20]
 8006dd6:	ed97 2a01 	vldr	s4, [r7, #4]
 8006dda:	edd7 1a03 	vldr	s3, [r7, #12]
 8006dde:	ed97 1a03 	vldr	s2, [r7, #12]
 8006de2:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8006edc <AdatiWayReturn+0x1b0>
 8006de6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8006ee0 <AdatiWayReturn+0x1b4>
 8006dea:	f7fa fed5 	bl	8001b98 <straight_table>
 8006dee:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 8006df2:	f000 fd99 	bl	8007928 <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006df6:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e14:	ee17 3a90 	vmov	r3, s15
 8006e18:	2b2c      	cmp	r3, #44	; 0x2c
 8006e1a:	bfcc      	ite	gt
 8006e1c:	2301      	movgt	r3, #1
 8006e1e:	2300      	movle	r3, #0
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	4b2b      	ldr	r3, [pc, #172]	; (8006ed0 <AdatiWayReturn+0x1a4>)
 8006e24:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b63      	cmp	r3, #99	; 0x63
 8006e2c:	bfcc      	ite	gt
 8006e2e:	2301      	movgt	r3, #1
 8006e30:	2300      	movle	r3, #0
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <AdatiWayReturn+0x1a8>)
 8006e36:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006e38:	4b24      	ldr	r3, [pc, #144]	; (8006ecc <AdatiWayReturn+0x1a0>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b63      	cmp	r3, #99	; 0x63
 8006e3e:	bfcc      	ite	gt
 8006e40:	2301      	movgt	r3, #1
 8006e42:	2300      	movle	r3, #0
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <AdatiWayReturn+0x1ac>)
 8006e48:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	ed97 2a01 	vldr	s4, [r7, #4]
 8006e5c:	edd7 1a03 	vldr	s3, [r7, #12]
 8006e60:	ed97 1a03 	vldr	s2, [r7, #12]
 8006e64:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006e68:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8006e6c:	f7fa fe94 	bl	8001b98 <straight_table>
 8006e70:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8006e74:	f107 0318 	add.w	r3, r7, #24
 8006e78:	f107 021a 	add.w	r2, r7, #26
 8006e7c:	f107 011c 	add.w	r1, r7, #28
 8006e80:	f107 001e 	add.w	r0, r7, #30
 8006e84:	f002 fc80 	bl	8009788 <search_AroundWalkCount>

		if (x == 0 && y == 0) {
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <AdatiWayReturn+0x194>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <AdatiWayReturn+0x16e>
 8006e90:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <AdatiWayReturn+0x198>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 82b8 	beq.w	800740a <AdatiWayReturn+0x6de>
			break;
		}
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <AdatiWayReturn+0x194>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d004      	beq.n	8006eac <AdatiWayReturn+0x180>
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <AdatiWayReturn+0x194>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	f040 810e 	bne.w	80070c8 <AdatiWayReturn+0x39c>
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <AdatiWayReturn+0x198>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d079      	beq.n	8006fa8 <AdatiWayReturn+0x27c>
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <AdatiWayReturn+0x198>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	f040 8105 	bne.w	80070c8 <AdatiWayReturn+0x39c>
			while (front_wall==0) {
 8006ebe:	e073      	b.n	8006fa8 <AdatiWayReturn+0x27c>
 8006ec0:	20000f70 	.word	0x20000f70
 8006ec4:	20000f74 	.word	0x20000f74
 8006ec8:	20000f78 	.word	0x20000f78
 8006ecc:	2000038c 	.word	0x2000038c
 8006ed0:	20000f7c 	.word	0x20000f7c
 8006ed4:	20000f7d 	.word	0x20000f7d
 8006ed8:	20000f7e 	.word	0x20000f7e
 8006edc:	42f00000 	.word	0x42f00000
 8006ee0:	42f10000 	.word	0x42f10000
 8006ee4:	43200000 	.word	0x43200000
				//直進
				mode.WallControlMode=1;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006ef4:	6978      	ldr	r0, [r7, #20]
 8006ef6:	ed97 2a01 	vldr	s4, [r7, #4]
 8006efa:	edd7 1a03 	vldr	s3, [r7, #12]
 8006efe:	ed97 1a03 	vldr	s2, [r7, #12]
 8006f02:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006f06:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8006ee4 <AdatiWayReturn+0x1b8>
 8006f0a:	f7fa fe45 	bl	8001b98 <straight_table>
 8006f0e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24


				update_coordinate();
 8006f12:	f000 fd09 	bl	8007928 <update_coordinate>

				front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 8006f16:	4b60      	ldr	r3, [pc, #384]	; (8007098 <AdatiWayReturn+0x36c>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b5f      	ldr	r3, [pc, #380]	; (8007098 <AdatiWayReturn+0x36c>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f28:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f34:	ee17 3a90 	vmov	r3, s15
 8006f38:	2b2c      	cmp	r3, #44	; 0x2c
 8006f3a:	bfcc      	ite	gt
 8006f3c:	2301      	movgt	r3, #1
 8006f3e:	2300      	movle	r3, #0
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	4b56      	ldr	r3, [pc, #344]	; (800709c <AdatiWayReturn+0x370>)
 8006f44:	701a      	strb	r2, [r3, #0]
				right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 8006f46:	4b54      	ldr	r3, [pc, #336]	; (8007098 <AdatiWayReturn+0x36c>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b63      	cmp	r3, #99	; 0x63
 8006f4c:	bfcc      	ite	gt
 8006f4e:	2301      	movgt	r3, #1
 8006f50:	2300      	movle	r3, #0
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	4b52      	ldr	r3, [pc, #328]	; (80070a0 <AdatiWayReturn+0x374>)
 8006f56:	701a      	strb	r2, [r3, #0]
				left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 8006f58:	4b4f      	ldr	r3, [pc, #316]	; (8007098 <AdatiWayReturn+0x36c>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b63      	cmp	r3, #99	; 0x63
 8006f5e:	bfcc      	ite	gt
 8006f60:	2301      	movgt	r3, #1
 8006f62:	2300      	movle	r3, #0
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4b4f      	ldr	r3, [pc, #316]	; (80070a4 <AdatiWayReturn+0x378>)
 8006f68:	701a      	strb	r2, [r3, #0]

				mode.WallControlMode=1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	ed97 2a01 	vldr	s4, [r7, #4]
 8006f7c:	edd7 1a03 	vldr	s3, [r7, #12]
 8006f80:	ed97 1a03 	vldr	s2, [r7, #12]
 8006f84:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006f88:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8006f8c:	f7fa fe04 	bl	8001b98 <straight_table>
 8006f90:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8006f94:	f107 0318 	add.w	r3, r7, #24
 8006f98:	f107 021a 	add.w	r2, r7, #26
 8006f9c:	f107 011c 	add.w	r1, r7, #28
 8006fa0:	f107 001e 	add.w	r0, r7, #30
 8006fa4:	f002 fbf0 	bl	8009788 <search_AroundWalkCount>
			while (front_wall==0) {
 8006fa8:	4b3c      	ldr	r3, [pc, #240]	; (800709c <AdatiWayReturn+0x370>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f083 0301 	eor.w	r3, r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d198      	bne.n	8006ee8 <AdatiWayReturn+0x1bc>

			}
			mode.WallControlMode=0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8006fc2:	6978      	ldr	r0, [r7, #20]
 8006fc4:	ed97 2a01 	vldr	s4, [r7, #4]
 8006fc8:	edd7 1a03 	vldr	s3, [r7, #12]
 8006fcc:	ed9f 1a36 	vldr	s2, [pc, #216]	; 80070a8 <AdatiWayReturn+0x37c>
 8006fd0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8006fd4:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80070ac <AdatiWayReturn+0x380>
 8006fd8:	f7fa fdde 	bl	8001b98 <straight_table>
 8006fdc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 8006fe0:	f7fb fc20 	bl	8002824 <pl_motor_stop>
			wait_ms(300);
 8006fe4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006fe8:	f7fc fe2a 	bl	8003c40 <wait_ms>
			pl_motor_start();
 8006fec:	f7fb fc06 	bl	80027fc <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8006ff0:	ed97 2a00 	vldr	s4, [r7]
 8006ff4:	edd7 1a02 	vldr	s3, [r7, #8]
 8006ff8:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 80070b0 <AdatiWayReturn+0x384>
 8006ffc:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80070b0 <AdatiWayReturn+0x384>
 8007000:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80070b4 <AdatiWayReturn+0x388>
 8007004:	f7fa fec2 	bl	8001d8c <turning_table>
 8007008:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 800700c:	f7fb fc0a 	bl	8002824 <pl_motor_stop>
			wait_ms(300);
 8007010:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007014:	f7fc fe14 	bl	8003c40 <wait_ms>
			pl_motor_start();
 8007018:	f7fb fbf0 	bl	80027fc <pl_motor_start>
			v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 800701c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007020:	eef1 7a67 	vneg.f32	s15, s15
 8007024:	6978      	ldr	r0, [r7, #20]
 8007026:	ed97 2a01 	vldr	s4, [r7, #4]
 800702a:	eddf 1a23 	vldr	s3, [pc, #140]	; 80070b8 <AdatiWayReturn+0x38c>
 800702e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80070bc <AdatiWayReturn+0x390>
 8007032:	eef0 0a67 	vmov.f32	s1, s15
 8007036:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80070c0 <AdatiWayReturn+0x394>
 800703a:	f7fa fdad 	bl	8001b98 <straight_table>
 800703e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 8007042:	f7fb fbef 	bl	8002824 <pl_motor_stop>
			wait_ms(600);
 8007046:	f44f 7016 	mov.w	r0, #600	; 0x258
 800704a:	f7fc fdf9 	bl	8003c40 <wait_ms>

			direction = direction + 2;
 800704e:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <AdatiWayReturn+0x398>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3302      	adds	r3, #2
 8007054:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <AdatiWayReturn+0x398>)
 8007056:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <AdatiWayReturn+0x398>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b05      	cmp	r3, #5
 800705e:	d102      	bne.n	8007066 <AdatiWayReturn+0x33a>
				direction = 1;
 8007060:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <AdatiWayReturn+0x398>)
 8007062:	2201      	movs	r2, #1
 8007064:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 8007066:	4b17      	ldr	r3, [pc, #92]	; (80070c4 <AdatiWayReturn+0x398>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b06      	cmp	r3, #6
 800706c:	d102      	bne.n	8007074 <AdatiWayReturn+0x348>
				direction = 2;
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <AdatiWayReturn+0x398>)
 8007070:	2202      	movs	r2, #2
 8007072:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 8007074:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <AdatiWayReturn+0x398>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <AdatiWayReturn+0x356>
				direction = 4;
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <AdatiWayReturn+0x398>)
 800707e:	2204      	movs	r2, #4
 8007080:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <AdatiWayReturn+0x398>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	f040 81c0 	bne.w	800740e <AdatiWayReturn+0x6e2>
				direction = 3;
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <AdatiWayReturn+0x398>)
 8007090:	2203      	movs	r2, #3
 8007092:	601a      	str	r2, [r3, #0]
			}
			break;
 8007094:	e1bb      	b.n	800740e <AdatiWayReturn+0x6e2>
 8007096:	bf00      	nop
 8007098:	2000038c 	.word	0x2000038c
 800709c:	20000f7c 	.word	0x20000f7c
 80070a0:	20000f7d 	.word	0x20000f7d
 80070a4:	20000f7e 	.word	0x20000f7e
 80070a8:	42c80000 	.word	0x42c80000
 80070ac:	428c0000 	.word	0x428c0000
 80070b0:	42f00000 	.word	0x42f00000
 80070b4:	43340000 	.word	0x43340000
 80070b8:	c3480000 	.word	0xc3480000
 80070bc:	c2c80000 	.word	0xc2c80000
 80070c0:	c2b40000 	.word	0xc2b40000
 80070c4:	20000f78 	.word	0x20000f78
		}



			if (front_wall) {
 80070c8:	4b7e      	ldr	r3, [pc, #504]	; (80072c4 <AdatiWayReturn+0x598>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <AdatiWayReturn+0x3a8>
				front_count = MAX_WALKCOUNT;
 80070d0:	23ff      	movs	r3, #255	; 0xff
 80070d2:	83fb      	strh	r3, [r7, #30]
			}
			if (right_wall) {
 80070d4:	4b7c      	ldr	r3, [pc, #496]	; (80072c8 <AdatiWayReturn+0x59c>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <AdatiWayReturn+0x3b4>
				right_count = MAX_WALKCOUNT;
 80070dc:	23ff      	movs	r3, #255	; 0xff
 80070de:	83bb      	strh	r3, [r7, #28]
			}
			if (left_wall) {
 80070e0:	4b7a      	ldr	r3, [pc, #488]	; (80072cc <AdatiWayReturn+0x5a0>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <AdatiWayReturn+0x3c0>
				left_count = MAX_WALKCOUNT;
 80070e8:	23ff      	movs	r3, #255	; 0xff
 80070ea:	833b      	strh	r3, [r7, #24]
			}
// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80070ec:	8bfb      	ldrh	r3, [r7, #30]
 80070ee:	2bff      	cmp	r3, #255	; 0xff
 80070f0:	d109      	bne.n	8007106 <AdatiWayReturn+0x3da>
 80070f2:	8bbb      	ldrh	r3, [r7, #28]
 80070f4:	2bff      	cmp	r3, #255	; 0xff
 80070f6:	d106      	bne.n	8007106 <AdatiWayReturn+0x3da>
 80070f8:	8b3b      	ldrh	r3, [r7, #24]
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	d103      	bne.n	8007106 <AdatiWayReturn+0x3da>
 80070fe:	8b7b      	ldrh	r3, [r7, #26]
 8007100:	2bff      	cmp	r3, #255	; 0xff
 8007102:	f000 8186 	beq.w	8007412 <AdatiWayReturn+0x6e6>
				break;
			}

			if (front_count <= right_count && front_count <= left_count
 8007106:	8bfa      	ldrh	r2, [r7, #30]
 8007108:	8bbb      	ldrh	r3, [r7, #28]
 800710a:	429a      	cmp	r2, r3
 800710c:	d81c      	bhi.n	8007148 <AdatiWayReturn+0x41c>
 800710e:	8bfa      	ldrh	r2, [r7, #30]
 8007110:	8b3b      	ldrh	r3, [r7, #24]
 8007112:	429a      	cmp	r2, r3
 8007114:	d818      	bhi.n	8007148 <AdatiWayReturn+0x41c>
					&& front_count <= back_count){
 8007116:	8bfa      	ldrh	r2, [r7, #30]
 8007118:	8b7b      	ldrh	r3, [r7, #26]
 800711a:	429a      	cmp	r2, r3
 800711c:	d814      	bhi.n	8007148 <AdatiWayReturn+0x41c>
				//直進
				mode.WallControlMode=1;
 800711e:	2301      	movs	r3, #1
 8007120:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8007122:	2300      	movs	r3, #0
 8007124:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800712a:	6978      	ldr	r0, [r7, #20]
 800712c:	ed97 2a01 	vldr	s4, [r7, #4]
 8007130:	edd7 1a03 	vldr	s3, [r7, #12]
 8007134:	ed97 1a03 	vldr	s2, [r7, #12]
 8007138:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800713c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80072d0 <AdatiWayReturn+0x5a4>
 8007140:	f7fa fd2a 	bl	8001b98 <straight_table>
 8007144:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

			}
			if(right_count < front_count && right_count <= left_count
 8007148:	8bba      	ldrh	r2, [r7, #28]
 800714a:	8bfb      	ldrh	r3, [r7, #30]
 800714c:	429a      	cmp	r2, r3
 800714e:	d21d      	bcs.n	800718c <AdatiWayReturn+0x460>
 8007150:	8bba      	ldrh	r2, [r7, #28]
 8007152:	8b3b      	ldrh	r3, [r7, #24]
 8007154:	429a      	cmp	r2, r3
 8007156:	d819      	bhi.n	800718c <AdatiWayReturn+0x460>
					&& right_count <= back_count){
 8007158:	8bba      	ldrh	r2, [r7, #28]
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	429a      	cmp	r2, r3
 800715e:	d815      	bhi.n	800718c <AdatiWayReturn+0x460>
				//右旋回
				mode.WallControlMode=0;
 8007160:	2300      	movs	r3, #0
 8007162:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 8007164:	2300      	movs	r3, #0
 8007166:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 8007168:	2301      	movs	r3, #1
 800716a:	75fb      	strb	r3, [r7, #23]
				slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 800716c:	4b59      	ldr	r3, [pc, #356]	; (80072d4 <AdatiWayReturn+0x5a8>)
 800716e:	2200      	movs	r2, #0
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	9200      	str	r2, [sp, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800717e:	f7fd f915 	bl	80043ac <slalomR>
				direction++;
 8007182:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <AdatiWayReturn+0x5ac>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a53      	ldr	r2, [pc, #332]	; (80072d8 <AdatiWayReturn+0x5ac>)
 800718a:	6013      	str	r3, [r2, #0]

			}
			if(left_count < front_count && left_count < right_count
 800718c:	8b3a      	ldrh	r2, [r7, #24]
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	429a      	cmp	r2, r3
 8007192:	d21d      	bcs.n	80071d0 <AdatiWayReturn+0x4a4>
 8007194:	8b3a      	ldrh	r2, [r7, #24]
 8007196:	8bbb      	ldrh	r3, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d219      	bcs.n	80071d0 <AdatiWayReturn+0x4a4>
					&& left_count <= back_count){
 800719c:	8b3a      	ldrh	r2, [r7, #24]
 800719e:	8b7b      	ldrh	r3, [r7, #26]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d815      	bhi.n	80071d0 <AdatiWayReturn+0x4a4>
				mode.WallControlMode=0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=1;
 80071ac:	2301      	movs	r3, #1
 80071ae:	75fb      	strb	r3, [r7, #23]
				slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 80071b0:	4b48      	ldr	r3, [pc, #288]	; (80072d4 <AdatiWayReturn+0x5a8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	9202      	str	r2, [sp, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	9201      	str	r2, [sp, #4]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	9200      	str	r2, [sp, #0]
 80071be:	331c      	adds	r3, #28
 80071c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071c2:	f7fd fa3f 	bl	8004644 <slalomL>
				direction--;
 80071c6:	4b44      	ldr	r3, [pc, #272]	; (80072d8 <AdatiWayReturn+0x5ac>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <AdatiWayReturn+0x5ac>)
 80071ce:	6013      	str	r3, [r2, #0]
			}
			if(back_count < front_count && back_count < right_count
 80071d0:	8b7a      	ldrh	r2, [r7, #26]
 80071d2:	8bfb      	ldrh	r3, [r7, #30]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	f080 80f9 	bcs.w	80073cc <AdatiWayReturn+0x6a0>
 80071da:	8b7a      	ldrh	r2, [r7, #26]
 80071dc:	8bbb      	ldrh	r3, [r7, #28]
 80071de:	429a      	cmp	r2, r3
 80071e0:	f080 80f4 	bcs.w	80073cc <AdatiWayReturn+0x6a0>
					&& back_count < left_count){
 80071e4:	8b7a      	ldrh	r2, [r7, #26]
 80071e6:	8b3b      	ldrh	r3, [r7, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	f080 80ef 	bcs.w	80073cc <AdatiWayReturn+0x6a0>

				if (front_wall){
 80071ee:	4b35      	ldr	r3, [pc, #212]	; (80072c4 <AdatiWayReturn+0x598>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8084 	beq.w	8007300 <AdatiWayReturn+0x5d4>
					mode.WallControlMode=0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 8007200:	2300      	movs	r3, #0
 8007202:	75fb      	strb	r3, [r7, #23]
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	ed97 2a01 	vldr	s4, [r7, #4]
 800720a:	edd7 1a03 	vldr	s3, [r7, #12]
 800720e:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80072e0 <AdatiWayReturn+0x5b4>
 8007212:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8007216:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80072e4 <AdatiWayReturn+0x5b8>
 800721a:	f7fa fcbd 	bl	8001b98 <straight_table>
 800721e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8007222:	f7fb faff 	bl	8002824 <pl_motor_stop>
					wait_ms(300);
 8007226:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800722a:	f7fc fd09 	bl	8003c40 <wait_ms>
					pl_motor_start();
 800722e:	f7fb fae5 	bl	80027fc <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8007232:	ed97 2a00 	vldr	s4, [r7]
 8007236:	edd7 1a02 	vldr	s3, [r7, #8]
 800723a:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80072f8 <AdatiWayReturn+0x5cc>
 800723e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80072f8 <AdatiWayReturn+0x5cc>
 8007242:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80072e8 <AdatiWayReturn+0x5bc>
 8007246:	f7fa fda1 	bl	8001d8c <turning_table>
 800724a:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 800724e:	f7fb fae9 	bl	8002824 <pl_motor_stop>
					wait_ms(300);
 8007252:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007256:	f7fc fcf3 	bl	8003c40 <wait_ms>
					pl_motor_start();
 800725a:	f7fb facf 	bl	80027fc <pl_motor_start>
					v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 800725e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007262:	eef1 7a67 	vneg.f32	s15, s15
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	ed97 2a01 	vldr	s4, [r7, #4]
 800726c:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80072ec <AdatiWayReturn+0x5c0>
 8007270:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80072f0 <AdatiWayReturn+0x5c4>
 8007274:	eef0 0a67 	vmov.f32	s1, s15
 8007278:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80072dc <AdatiWayReturn+0x5b0>
 800727c:	f7fa fc8c 	bl	8001b98 <straight_table>
 8007280:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8007284:	f7fb face 	bl	8002824 <pl_motor_stop>
					wait_ms(600);
 8007288:	f44f 7016 	mov.w	r0, #600	; 0x258
 800728c:	f7fc fcd8 	bl	8003c40 <wait_ms>
					mode.WallControlMode=1;
 8007290:	2301      	movs	r3, #1
 8007292:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 8007294:	f7fb fab2 	bl	80027fc <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8007298:	6978      	ldr	r0, [r7, #20]
 800729a:	ed97 2a01 	vldr	s4, [r7, #4]
 800729e:	edd7 1a03 	vldr	s3, [r7, #12]
 80072a2:	ed97 1a03 	vldr	s2, [r7, #12]
 80072a6:	eddf 0a14 	vldr	s1, [pc, #80]	; 80072f8 <AdatiWayReturn+0x5cc>
 80072aa:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80072fc <AdatiWayReturn+0x5d0>
 80072ae:	f7fa fc73 	bl	8001b98 <straight_table>
 80072b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 80072b6:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <AdatiWayReturn+0x5ac>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3302      	adds	r3, #2
 80072bc:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <AdatiWayReturn+0x5ac>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e084      	b.n	80073cc <AdatiWayReturn+0x6a0>
 80072c2:	bf00      	nop
 80072c4:	20000f7c 	.word	0x20000f7c
 80072c8:	20000f7d 	.word	0x20000f7d
 80072cc:	20000f7e 	.word	0x20000f7e
 80072d0:	43200000 	.word	0x43200000
 80072d4:	20000a50 	.word	0x20000a50
 80072d8:	20000f78 	.word	0x20000f78
 80072dc:	c2b40000 	.word	0xc2b40000
 80072e0:	42c80000 	.word	0x42c80000
 80072e4:	428c0000 	.word	0x428c0000
 80072e8:	43340000 	.word	0x43340000
 80072ec:	c3480000 	.word	0xc3480000
 80072f0:	c2c80000 	.word	0xc2c80000
 80072f4:	c1f40000 	.word	0xc1f40000
 80072f8:	42f00000 	.word	0x42f00000
 80072fc:	42f10000 	.word	0x42f10000
				}else{
					mode.WallControlMode=0;
 8007300:	2300      	movs	r3, #0
 8007302:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 8007304:	2300      	movs	r3, #0
 8007306:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 8007308:	2300      	movs	r3, #0
 800730a:	75fb      	strb	r3, [r7, #23]
					pl_motor_start();
 800730c:	f7fb fa76 	bl	80027fc <pl_motor_start>
					v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8007310:	6978      	ldr	r0, [r7, #20]
 8007312:	ed97 2a01 	vldr	s4, [r7, #4]
 8007316:	edd7 1a03 	vldr	s3, [r7, #12]
 800731a:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 80072e0 <AdatiWayReturn+0x5b4>
 800731e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8007322:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80072e4 <AdatiWayReturn+0x5b8>
 8007326:	f7fa fc37 	bl	8001b98 <straight_table>
 800732a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 800732e:	f7fb fa79 	bl	8002824 <pl_motor_stop>
					wait_ms(300);
 8007332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007336:	f7fc fc83 	bl	8003c40 <wait_ms>
					pl_motor_start();
 800733a:	f7fb fa5f 	bl	80027fc <pl_motor_start>
					v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 800733e:	ed97 2a00 	vldr	s4, [r7]
 8007342:	edd7 1a02 	vldr	s3, [r7, #8]
 8007346:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 80072f8 <AdatiWayReturn+0x5cc>
 800734a:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 80072f8 <AdatiWayReturn+0x5cc>
 800734e:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 80072e8 <AdatiWayReturn+0x5bc>
 8007352:	f7fa fd1b 	bl	8001d8c <turning_table>
 8007356:	ed87 0a08 	vstr	s0, [r7, #32]
					pl_motor_stop();
 800735a:	f7fb fa63 	bl	8002824 <pl_motor_stop>
					wait_ms(300);
 800735e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007362:	f7fc fc6d 	bl	8003c40 <wait_ms>
					pl_motor_start();
 8007366:	f7fb fa49 	bl	80027fc <pl_motor_start>
					v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 800736a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800736e:	eef1 7a67 	vneg.f32	s15, s15
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	ed97 2a01 	vldr	s4, [r7, #4]
 8007378:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 80072ec <AdatiWayReturn+0x5c0>
 800737c:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 80072f0 <AdatiWayReturn+0x5c4>
 8007380:	eef0 0a67 	vmov.f32	s1, s15
 8007384:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 80072f4 <AdatiWayReturn+0x5c8>
 8007388:	f7fa fc06 	bl	8001b98 <straight_table>
 800738c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					pl_motor_stop();
 8007390:	f7fb fa48 	bl	8002824 <pl_motor_stop>
					wait_ms(600);
 8007394:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007398:	f7fc fc52 	bl	8003c40 <wait_ms>
					mode.WallControlMode=1;
 800739c:	2301      	movs	r3, #1
 800739e:	753b      	strb	r3, [r7, #20]
					pl_motor_start();
 80073a0:	f7fb fa2c 	bl	80027fc <pl_motor_start>
					v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80073a4:	6978      	ldr	r0, [r7, #20]
 80073a6:	ed97 2a01 	vldr	s4, [r7, #4]
 80073aa:	edd7 1a03 	vldr	s3, [r7, #12]
 80073ae:	ed97 1a03 	vldr	s2, [r7, #12]
 80073b2:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80072f8 <AdatiWayReturn+0x5cc>
 80073b6:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80072fc <AdatiWayReturn+0x5d0>
 80073ba:	f7fa fbed 	bl	8001b98 <straight_table>
 80073be:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
					direction = direction + 2;
 80073c2:	4b72      	ldr	r3, [pc, #456]	; (800758c <AdatiWayReturn+0x860>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3302      	adds	r3, #2
 80073c8:	4a70      	ldr	r2, [pc, #448]	; (800758c <AdatiWayReturn+0x860>)
 80073ca:	6013      	str	r3, [r2, #0]

				}

			}

		if (direction == 5) {
 80073cc:	4b6f      	ldr	r3, [pc, #444]	; (800758c <AdatiWayReturn+0x860>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d102      	bne.n	80073da <AdatiWayReturn+0x6ae>
			direction = 1;
 80073d4:	4b6d      	ldr	r3, [pc, #436]	; (800758c <AdatiWayReturn+0x860>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 80073da:	4b6c      	ldr	r3, [pc, #432]	; (800758c <AdatiWayReturn+0x860>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d102      	bne.n	80073e8 <AdatiWayReturn+0x6bc>
			direction = 2;
 80073e2:	4b6a      	ldr	r3, [pc, #424]	; (800758c <AdatiWayReturn+0x860>)
 80073e4:	2202      	movs	r2, #2
 80073e6:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 80073e8:	4b68      	ldr	r3, [pc, #416]	; (800758c <AdatiWayReturn+0x860>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <AdatiWayReturn+0x6ca>
			direction = 4;
 80073f0:	4b66      	ldr	r3, [pc, #408]	; (800758c <AdatiWayReturn+0x860>)
 80073f2:	2204      	movs	r2, #4
 80073f4:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 80073f6:	4b65      	ldr	r3, [pc, #404]	; (800758c <AdatiWayReturn+0x860>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	f47f acf8 	bne.w	8006df2 <AdatiWayReturn+0xc6>
			direction = 3;
 8007402:	4b62      	ldr	r3, [pc, #392]	; (800758c <AdatiWayReturn+0x860>)
 8007404:	2203      	movs	r2, #3
 8007406:	601a      	str	r2, [r3, #0]
		update_coordinate();
 8007408:	e4f3      	b.n	8006df2 <AdatiWayReturn+0xc6>
			break;
 800740a:	bf00      	nop
 800740c:	e002      	b.n	8007414 <AdatiWayReturn+0x6e8>
			break;
 800740e:	bf00      	nop
 8007410:	e000      	b.n	8007414 <AdatiWayReturn+0x6e8>
				break;
 8007412:	bf00      	nop
		}

	}

//	record_in();
	pl_motor_start();
 8007414:	f7fb f9f2 	bl	80027fc <pl_motor_start>
	v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8007418:	6978      	ldr	r0, [r7, #20]
 800741a:	ed97 2a01 	vldr	s4, [r7, #4]
 800741e:	edd7 1a03 	vldr	s3, [r7, #12]
 8007422:	ed97 1a03 	vldr	s2, [r7, #12]
 8007426:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8007590 <AdatiWayReturn+0x864>
 800742a:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8007594 <AdatiWayReturn+0x868>
 800742e:	f7fa fbb3 	bl	8001b98 <straight_table>
 8007432:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	while (1) {

		update_coordinate();
 8007436:	f000 fa77 	bl	8007928 <update_coordinate>

		front_wall=((int)((float)(g_sensor_mean[0]+g_sensor_mean[3])/2) >= F_PRESENCE);
 800743a:	4b57      	ldr	r3, [pc, #348]	; (8007598 <AdatiWayReturn+0x86c>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b56      	ldr	r3, [pc, #344]	; (8007598 <AdatiWayReturn+0x86c>)
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	4413      	add	r3, r2
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800744c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007458:	ee17 3a90 	vmov	r3, s15
 800745c:	2b2c      	cmp	r3, #44	; 0x2c
 800745e:	bfcc      	ite	gt
 8007460:	2301      	movgt	r3, #1
 8007462:	2300      	movle	r3, #0
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b4d      	ldr	r3, [pc, #308]	; (800759c <AdatiWayReturn+0x870>)
 8007468:	701a      	strb	r2, [r3, #0]
		right_wall=(g_sensor_mean[2] >= R_PRESENCE);
 800746a:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <AdatiWayReturn+0x86c>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b63      	cmp	r3, #99	; 0x63
 8007470:	bfcc      	ite	gt
 8007472:	2301      	movgt	r3, #1
 8007474:	2300      	movle	r3, #0
 8007476:	b2da      	uxtb	r2, r3
 8007478:	4b49      	ldr	r3, [pc, #292]	; (80075a0 <AdatiWayReturn+0x874>)
 800747a:	701a      	strb	r2, [r3, #0]
		left_wall=(g_sensor_mean[1] >= L_PRESENCE);
 800747c:	4b46      	ldr	r3, [pc, #280]	; (8007598 <AdatiWayReturn+0x86c>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b63      	cmp	r3, #99	; 0x63
 8007482:	bfcc      	ite	gt
 8007484:	2301      	movgt	r3, #1
 8007486:	2300      	movle	r3, #0
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b46      	ldr	r3, [pc, #280]	; (80075a4 <AdatiWayReturn+0x878>)
 800748c:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=1;
 800748e:	2301      	movs	r3, #1
 8007490:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=2;
 8007492:	2302      	movs	r3, #2
 8007494:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]
		v_e=straight_table(MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	ed97 2a01 	vldr	s4, [r7, #4]
 80074a0:	edd7 1a03 	vldr	s3, [r7, #12]
 80074a4:	ed97 1a03 	vldr	s2, [r7, #12]
 80074a8:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80074ac:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80074b0:	f7fa fb72 	bl	8001b98 <straight_table>
 80074b4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 80074b8:	f107 0318 	add.w	r3, r7, #24
 80074bc:	f107 021a 	add.w	r2, r7, #26
 80074c0:	f107 011c 	add.w	r1, r7, #28
 80074c4:	f107 001e 	add.w	r0, r7, #30
 80074c8:	f002 f95e 	bl	8009788 <search_AroundWalkCount>

		if (x == 0 && y == 0) { ///////goal************************
 80074cc:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <AdatiWayReturn+0x87c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d173      	bne.n	80075bc <AdatiWayReturn+0x890>
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <AdatiWayReturn+0x880>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d16f      	bne.n	80075bc <AdatiWayReturn+0x890>
			mode.WallControlMode=0;
 80074dc:	2300      	movs	r3, #0
 80074de:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80074e8:	6978      	ldr	r0, [r7, #20]
 80074ea:	ed97 2a01 	vldr	s4, [r7, #4]
 80074ee:	edd7 1a03 	vldr	s3, [r7, #12]
 80074f2:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80075b0 <AdatiWayReturn+0x884>
 80074f6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80074fa:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80075b4 <AdatiWayReturn+0x888>
 80074fe:	f7fa fb4b 	bl	8001b98 <straight_table>
 8007502:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			pl_motor_stop();
 8007506:	f7fb f98d 	bl	8002824 <pl_motor_stop>
			wait_ms(300);
 800750a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800750e:	f7fc fb97 	bl	8003c40 <wait_ms>
			pl_motor_start();
 8007512:	f7fb f973 	bl	80027fc <pl_motor_start>
			v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8007516:	ed97 2a00 	vldr	s4, [r7]
 800751a:	edd7 1a02 	vldr	s3, [r7, #8]
 800751e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8007590 <AdatiWayReturn+0x864>
 8007522:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007590 <AdatiWayReturn+0x864>
 8007526:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80075b8 <AdatiWayReturn+0x88c>
 800752a:	f7fa fc2f 	bl	8001d8c <turning_table>
 800752e:	ed87 0a08 	vstr	s0, [r7, #32]
			pl_motor_stop();
 8007532:	f7fb f977 	bl	8002824 <pl_motor_stop>
			wait_ms(300);
 8007536:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800753a:	f7fc fb81 	bl	8003c40 <wait_ms>

			maze_display();
 800753e:	f002 fe39 	bl	800a1b4 <maze_display>
			direction = direction + 2;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <AdatiWayReturn+0x860>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3302      	adds	r3, #2
 8007548:	4a10      	ldr	r2, [pc, #64]	; (800758c <AdatiWayReturn+0x860>)
 800754a:	6013      	str	r3, [r2, #0]

			if (direction == 5) {
 800754c:	4b0f      	ldr	r3, [pc, #60]	; (800758c <AdatiWayReturn+0x860>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b05      	cmp	r3, #5
 8007552:	d102      	bne.n	800755a <AdatiWayReturn+0x82e>
				direction = 1;
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <AdatiWayReturn+0x860>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
			}
			if (direction == 6) {
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <AdatiWayReturn+0x860>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b06      	cmp	r3, #6
 8007560:	d102      	bne.n	8007568 <AdatiWayReturn+0x83c>
				direction = 2;
 8007562:	4b0a      	ldr	r3, [pc, #40]	; (800758c <AdatiWayReturn+0x860>)
 8007564:	2202      	movs	r2, #2
 8007566:	601a      	str	r2, [r3, #0]
			}
			if (direction == 0) {
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <AdatiWayReturn+0x860>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <AdatiWayReturn+0x84a>
				direction = 4;
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <AdatiWayReturn+0x860>)
 8007572:	2204      	movs	r2, #4
 8007574:	601a      	str	r2, [r3, #0]
			}
			if (direction == -1) {
 8007576:	4b05      	ldr	r3, [pc, #20]	; (800758c <AdatiWayReturn+0x860>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	f040 81be 	bne.w	80078fe <AdatiWayReturn+0xbd2>
				direction = 3;
 8007582:	4b02      	ldr	r3, [pc, #8]	; (800758c <AdatiWayReturn+0x860>)
 8007584:	2203      	movs	r2, #3
 8007586:	601a      	str	r2, [r3, #0]
			}

			break;
 8007588:	e1b9      	b.n	80078fe <AdatiWayReturn+0xbd2>
 800758a:	bf00      	nop
 800758c:	20000f78 	.word	0x20000f78
 8007590:	42f00000 	.word	0x42f00000
 8007594:	42f10000 	.word	0x42f10000
 8007598:	2000038c 	.word	0x2000038c
 800759c:	20000f7c 	.word	0x20000f7c
 80075a0:	20000f7d 	.word	0x20000f7d
 80075a4:	20000f7e 	.word	0x20000f7e
 80075a8:	20000f70 	.word	0x20000f70
 80075ac:	20000f74 	.word	0x20000f74
 80075b0:	42c80000 	.word	0x42c80000
 80075b4:	428c0000 	.word	0x428c0000
 80075b8:	43340000 	.word	0x43340000
		}


		if (front_wall) {
 80075bc:	4b7e      	ldr	r3, [pc, #504]	; (80077b8 <AdatiWayReturn+0xa8c>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <AdatiWayReturn+0x89c>
			front_count = MAX_WALKCOUNT;
 80075c4:	23ff      	movs	r3, #255	; 0xff
 80075c6:	83fb      	strh	r3, [r7, #30]
		}
		if (right_wall) {
 80075c8:	4b7c      	ldr	r3, [pc, #496]	; (80077bc <AdatiWayReturn+0xa90>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <AdatiWayReturn+0x8a8>
			right_count = MAX_WALKCOUNT;
 80075d0:	23ff      	movs	r3, #255	; 0xff
 80075d2:	83bb      	strh	r3, [r7, #28]
		}
		if (left_wall) {
 80075d4:	4b7a      	ldr	r3, [pc, #488]	; (80077c0 <AdatiWayReturn+0xa94>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <AdatiWayReturn+0x8b4>
			left_count = MAX_WALKCOUNT;
 80075dc:	23ff      	movs	r3, #255	; 0xff
 80075de:	833b      	strh	r3, [r7, #24]
		}
// 移動の優先順位 ： 前→右→左→後
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80075e0:	8bfb      	ldrh	r3, [r7, #30]
 80075e2:	2bff      	cmp	r3, #255	; 0xff
 80075e4:	d109      	bne.n	80075fa <AdatiWayReturn+0x8ce>
 80075e6:	8bbb      	ldrh	r3, [r7, #28]
 80075e8:	2bff      	cmp	r3, #255	; 0xff
 80075ea:	d106      	bne.n	80075fa <AdatiWayReturn+0x8ce>
 80075ec:	8b3b      	ldrh	r3, [r7, #24]
 80075ee:	2bff      	cmp	r3, #255	; 0xff
 80075f0:	d103      	bne.n	80075fa <AdatiWayReturn+0x8ce>
 80075f2:	8b7b      	ldrh	r3, [r7, #26]
 80075f4:	2bff      	cmp	r3, #255	; 0xff
 80075f6:	f000 8184 	beq.w	8007902 <AdatiWayReturn+0xbd6>
			break;
		}

		if (front_count <= right_count && front_count <= left_count
 80075fa:	8bfa      	ldrh	r2, [r7, #30]
 80075fc:	8bbb      	ldrh	r3, [r7, #28]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d81c      	bhi.n	800763c <AdatiWayReturn+0x910>
 8007602:	8bfa      	ldrh	r2, [r7, #30]
 8007604:	8b3b      	ldrh	r3, [r7, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	d818      	bhi.n	800763c <AdatiWayReturn+0x910>
				&& front_count <= back_count){
 800760a:	8bfa      	ldrh	r2, [r7, #30]
 800760c:	8b7b      	ldrh	r3, [r7, #26]
 800760e:	429a      	cmp	r2, r3
 8007610:	d814      	bhi.n	800763c <AdatiWayReturn+0x910>
			//直進
			mode.WallControlMode=1;
 8007612:	2301      	movs	r3, #1
 8007614:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8007616:	2300      	movs	r3, #0
 8007618:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]
			v_e=straight_table(180-MAZE_OFFSET, v_e,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	ed97 2a01 	vldr	s4, [r7, #4]
 8007624:	edd7 1a03 	vldr	s3, [r7, #12]
 8007628:	ed97 1a03 	vldr	s2, [r7, #12]
 800762c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8007630:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80077c4 <AdatiWayReturn+0xa98>
 8007634:	f7fa fab0 	bl	8001b98 <straight_table>
 8007638:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		}
		if(right_count < front_count && right_count <= left_count
 800763c:	8bba      	ldrh	r2, [r7, #28]
 800763e:	8bfb      	ldrh	r3, [r7, #30]
 8007640:	429a      	cmp	r2, r3
 8007642:	d21d      	bcs.n	8007680 <AdatiWayReturn+0x954>
 8007644:	8bba      	ldrh	r2, [r7, #28]
 8007646:	8b3b      	ldrh	r3, [r7, #24]
 8007648:	429a      	cmp	r2, r3
 800764a:	d819      	bhi.n	8007680 <AdatiWayReturn+0x954>
				&& right_count <= back_count){
 800764c:	8bba      	ldrh	r2, [r7, #28]
 800764e:	8b7b      	ldrh	r3, [r7, #26]
 8007650:	429a      	cmp	r2, r3
 8007652:	d815      	bhi.n	8007680 <AdatiWayReturn+0x954>
			//右旋回
			mode.WallControlMode=0;
 8007654:	2300      	movs	r3, #0
 8007656:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 8007658:	2300      	movs	r3, #0
 800765a:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
			slalomR(speed500_exploration.slalom_R, OFF,EXPLORATION);
 8007660:	4b59      	ldr	r3, [pc, #356]	; (80077c8 <AdatiWayReturn+0xa9c>)
 8007662:	2200      	movs	r2, #0
 8007664:	9202      	str	r2, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	9200      	str	r2, [sp, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007672:	f7fc fe9b 	bl	80043ac <slalomR>
			direction++;
 8007676:	4b55      	ldr	r3, [pc, #340]	; (80077cc <AdatiWayReturn+0xaa0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3301      	adds	r3, #1
 800767c:	4a53      	ldr	r2, [pc, #332]	; (80077cc <AdatiWayReturn+0xaa0>)
 800767e:	6013      	str	r3, [r2, #0]

		}
		if(left_count < front_count && left_count < right_count
 8007680:	8b3a      	ldrh	r2, [r7, #24]
 8007682:	8bfb      	ldrh	r3, [r7, #30]
 8007684:	429a      	cmp	r2, r3
 8007686:	d21d      	bcs.n	80076c4 <AdatiWayReturn+0x998>
 8007688:	8b3a      	ldrh	r2, [r7, #24]
 800768a:	8bbb      	ldrh	r3, [r7, #28]
 800768c:	429a      	cmp	r2, r3
 800768e:	d219      	bcs.n	80076c4 <AdatiWayReturn+0x998>
				&& left_count <= back_count){
 8007690:	8b3a      	ldrh	r2, [r7, #24]
 8007692:	8b7b      	ldrh	r3, [r7, #26]
 8007694:	429a      	cmp	r2, r3
 8007696:	d815      	bhi.n	80076c4 <AdatiWayReturn+0x998>
			mode.WallControlMode=0;
 8007698:	2300      	movs	r3, #0
 800769a:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800769c:	2300      	movs	r3, #0
 800769e:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
			slalomL(speed500_exploration.slalom_L, OFF,EXPLORATION);
 80076a4:	4b48      	ldr	r3, [pc, #288]	; (80077c8 <AdatiWayReturn+0xa9c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	9202      	str	r2, [sp, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	9201      	str	r2, [sp, #4]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	331c      	adds	r3, #28
 80076b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076b6:	f7fc ffc5 	bl	8004644 <slalomL>
			direction--;
 80076ba:	4b44      	ldr	r3, [pc, #272]	; (80077cc <AdatiWayReturn+0xaa0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	4a42      	ldr	r2, [pc, #264]	; (80077cc <AdatiWayReturn+0xaa0>)
 80076c2:	6013      	str	r3, [r2, #0]
		}
		if(back_count < front_count && back_count < right_count
 80076c4:	8b7a      	ldrh	r2, [r7, #26]
 80076c6:	8bfb      	ldrh	r3, [r7, #30]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	f080 80f9 	bcs.w	80078c0 <AdatiWayReturn+0xb94>
 80076ce:	8b7a      	ldrh	r2, [r7, #26]
 80076d0:	8bbb      	ldrh	r3, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	f080 80f4 	bcs.w	80078c0 <AdatiWayReturn+0xb94>
				&& back_count < left_count){
 80076d8:	8b7a      	ldrh	r2, [r7, #26]
 80076da:	8b3b      	ldrh	r3, [r7, #24]
 80076dc:	429a      	cmp	r2, r3
 80076de:	f080 80ef 	bcs.w	80078c0 <AdatiWayReturn+0xb94>

			if (front_wall){
 80076e2:	4b35      	ldr	r3, [pc, #212]	; (80077b8 <AdatiWayReturn+0xa8c>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8084 	beq.w	80077f4 <AdatiWayReturn+0xac8>
				mode.WallControlMode=0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 80076f8:	6978      	ldr	r0, [r7, #20]
 80076fa:	ed97 2a01 	vldr	s4, [r7, #4]
 80076fe:	edd7 1a03 	vldr	s3, [r7, #12]
 8007702:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80077d4 <AdatiWayReturn+0xaa8>
 8007706:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800770a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80077d8 <AdatiWayReturn+0xaac>
 800770e:	f7fa fa43 	bl	8001b98 <straight_table>
 8007712:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8007716:	f7fb f885 	bl	8002824 <pl_motor_stop>
				wait_ms(300);
 800771a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800771e:	f7fc fa8f 	bl	8003c40 <wait_ms>
				pl_motor_start();
 8007722:	f7fb f86b 	bl	80027fc <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8007726:	ed97 2a00 	vldr	s4, [r7]
 800772a:	edd7 1a02 	vldr	s3, [r7, #8]
 800772e:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80077ec <AdatiWayReturn+0xac0>
 8007732:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80077ec <AdatiWayReturn+0xac0>
 8007736:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80077dc <AdatiWayReturn+0xab0>
 800773a:	f7fa fb27 	bl	8001d8c <turning_table>
 800773e:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 8007742:	f7fb f86f 	bl	8002824 <pl_motor_stop>
				wait_ms(300);
 8007746:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800774a:	f7fc fa79 	bl	8003c40 <wait_ms>
				pl_motor_start();
 800774e:	f7fb f855 	bl	80027fc <pl_motor_start>
				v_e=straight_table(-90, -v_e,-100,-200,input_StraightAcceleration, mode);
 8007752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007756:	eef1 7a67 	vneg.f32	s15, s15
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	ed97 2a01 	vldr	s4, [r7, #4]
 8007760:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80077e0 <AdatiWayReturn+0xab4>
 8007764:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80077e4 <AdatiWayReturn+0xab8>
 8007768:	eef0 0a67 	vmov.f32	s1, s15
 800776c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80077d0 <AdatiWayReturn+0xaa4>
 8007770:	f7fa fa12 	bl	8001b98 <straight_table>
 8007774:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8007778:	f7fb f854 	bl	8002824 <pl_motor_stop>
				wait_ms(600);
 800777c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007780:	f7fc fa5e 	bl	8003c40 <wait_ms>
				mode.WallControlMode=1;
 8007784:	2301      	movs	r3, #1
 8007786:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 8007788:	f7fb f838 	bl	80027fc <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800778c:	6978      	ldr	r0, [r7, #20]
 800778e:	ed97 2a01 	vldr	s4, [r7, #4]
 8007792:	edd7 1a03 	vldr	s3, [r7, #12]
 8007796:	ed97 1a03 	vldr	s2, [r7, #12]
 800779a:	eddf 0a14 	vldr	s1, [pc, #80]	; 80077ec <AdatiWayReturn+0xac0>
 800779e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80077f0 <AdatiWayReturn+0xac4>
 80077a2:	f7fa f9f9 	bl	8001b98 <straight_table>
 80077a6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 80077aa:	4b08      	ldr	r3, [pc, #32]	; (80077cc <AdatiWayReturn+0xaa0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3302      	adds	r3, #2
 80077b0:	4a06      	ldr	r2, [pc, #24]	; (80077cc <AdatiWayReturn+0xaa0>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e084      	b.n	80078c0 <AdatiWayReturn+0xb94>
 80077b6:	bf00      	nop
 80077b8:	20000f7c 	.word	0x20000f7c
 80077bc:	20000f7d 	.word	0x20000f7d
 80077c0:	20000f7e 	.word	0x20000f7e
 80077c4:	43200000 	.word	0x43200000
 80077c8:	20000a50 	.word	0x20000a50
 80077cc:	20000f78 	.word	0x20000f78
 80077d0:	c2b40000 	.word	0xc2b40000
 80077d4:	42c80000 	.word	0x42c80000
 80077d8:	428c0000 	.word	0x428c0000
 80077dc:	43340000 	.word	0x43340000
 80077e0:	c3480000 	.word	0xc3480000
 80077e4:	c2c80000 	.word	0xc2c80000
 80077e8:	c1f40000 	.word	0xc1f40000
 80077ec:	42f00000 	.word	0x42f00000
 80077f0:	42f10000 	.word	0x42f10000
			}else{
				mode.WallControlMode=0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75fb      	strb	r3, [r7, #23]
				pl_motor_start();
 8007800:	f7fa fffc 	bl	80027fc <pl_motor_start>
				v_e=straight_table(90-MAZE_OFFSET, v_e,100,input_StraightVelocity,input_StraightAcceleration, mode);
 8007804:	6978      	ldr	r0, [r7, #20]
 8007806:	ed97 2a01 	vldr	s4, [r7, #4]
 800780a:	edd7 1a03 	vldr	s3, [r7, #12]
 800780e:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 80077d4 <AdatiWayReturn+0xaa8>
 8007812:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8007816:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80077d8 <AdatiWayReturn+0xaac>
 800781a:	f7fa f9bd 	bl	8001b98 <straight_table>
 800781e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8007822:	f7fa ffff 	bl	8002824 <pl_motor_stop>
				wait_ms(300);
 8007826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800782a:	f7fc fa09 	bl	8003c40 <wait_ms>
				pl_motor_start();
 800782e:	f7fa ffe5 	bl	80027fc <pl_motor_start>
				v_ea=turning_table(180, 120,120,input_TurningVelocity,input_TurningAcceleration);
 8007832:	ed97 2a00 	vldr	s4, [r7]
 8007836:	edd7 1a02 	vldr	s3, [r7, #8]
 800783a:	ed1f 1a14 	vldr	s2, [pc, #-80]	; 80077ec <AdatiWayReturn+0xac0>
 800783e:	ed5f 0a15 	vldr	s1, [pc, #-84]	; 80077ec <AdatiWayReturn+0xac0>
 8007842:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 80077dc <AdatiWayReturn+0xab0>
 8007846:	f7fa faa1 	bl	8001d8c <turning_table>
 800784a:	ed87 0a08 	vstr	s0, [r7, #32]
				pl_motor_stop();
 800784e:	f7fa ffe9 	bl	8002824 <pl_motor_stop>
				wait_ms(300);
 8007852:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007856:	f7fc f9f3 	bl	8003c40 <wait_ms>
				pl_motor_start();
 800785a:	f7fa ffcf 	bl	80027fc <pl_motor_start>
				v_e=straight_table(-BACK_TO_CENTER, -v_e,-100,-200,input_StraightAcceleration, mode);
 800785e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007862:	eef1 7a67 	vneg.f32	s15, s15
 8007866:	6978      	ldr	r0, [r7, #20]
 8007868:	ed97 2a01 	vldr	s4, [r7, #4]
 800786c:	ed5f 1a24 	vldr	s3, [pc, #-144]	; 80077e0 <AdatiWayReturn+0xab4>
 8007870:	ed1f 1a24 	vldr	s2, [pc, #-144]	; 80077e4 <AdatiWayReturn+0xab8>
 8007874:	eef0 0a67 	vmov.f32	s1, s15
 8007878:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 80077e8 <AdatiWayReturn+0xabc>
 800787c:	f7fa f98c 	bl	8001b98 <straight_table>
 8007880:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				pl_motor_stop();
 8007884:	f7fa ffce 	bl	8002824 <pl_motor_stop>
				wait_ms(600);
 8007888:	f44f 7016 	mov.w	r0, #600	; 0x258
 800788c:	f7fc f9d8 	bl	8003c40 <wait_ms>
				mode.WallControlMode=1;
 8007890:	2301      	movs	r3, #1
 8007892:	753b      	strb	r3, [r7, #20]
				pl_motor_start();
 8007894:	f7fa ffb2 	bl	80027fc <pl_motor_start>
				v_e=straight_table(90+BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	ed97 2a01 	vldr	s4, [r7, #4]
 800789e:	edd7 1a03 	vldr	s3, [r7, #12]
 80078a2:	ed97 1a03 	vldr	s2, [r7, #12]
 80078a6:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80077ec <AdatiWayReturn+0xac0>
 80078aa:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80077f0 <AdatiWayReturn+0xac4>
 80078ae:	f7fa f973 	bl	8001b98 <straight_table>
 80078b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
				direction = direction + 2;
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3302      	adds	r3, #2
 80078bc:	4a19      	ldr	r2, [pc, #100]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078be:	6013      	str	r3, [r2, #0]
			}

		}


		if (direction == 5) {
 80078c0:	4b18      	ldr	r3, [pc, #96]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d102      	bne.n	80078ce <AdatiWayReturn+0xba2>
			direction = 1;
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d102      	bne.n	80078dc <AdatiWayReturn+0xbb0>
			direction = 2;
 80078d6:	4b13      	ldr	r3, [pc, #76]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078d8:	2202      	movs	r2, #2
 80078da:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <AdatiWayReturn+0xbbe>
			direction = 4;
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078e6:	2204      	movs	r2, #4
 80078e8:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	f47f ada0 	bne.w	8007436 <AdatiWayReturn+0x70a>
			direction = 3;
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <AdatiWayReturn+0xbf8>)
 80078f8:	2203      	movs	r2, #3
 80078fa:	601a      	str	r2, [r3, #0]
		update_coordinate();
 80078fc:	e59b      	b.n	8007436 <AdatiWayReturn+0x70a>
			break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <AdatiWayReturn+0xbd8>
			break;
 8007902:	bf00      	nop
//			}
//			while (green_switch == 0) {
//			}

	}
	pl_motor_stop();
 8007904:	f7fa ff8e 	bl	8002824 <pl_motor_stop>
	wait_ms(500);
 8007908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800790c:	f7fc f998 	bl	8003c40 <wait_ms>
	pl_motor_standby(0);
 8007910:	2000      	movs	r0, #0
 8007912:	f7fa ff09 	bl	8002728 <pl_motor_standby>
	maze_display();
 8007916:	f002 fc4d 	bl	800a1b4 <maze_display>


}
 800791a:	bf00      	nop
 800791c:	3728      	adds	r7, #40	; 0x28
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000f78 	.word	0x20000f78

08007928 <update_coordinate>:

void update_coordinate(void){
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
// int direction,int *x_coordinate,int *y_coordinate
	switch (direction) {
 800792c:	4b16      	ldr	r3, [pc, #88]	; (8007988 <update_coordinate+0x60>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	2b03      	cmp	r3, #3
 8007934:	d822      	bhi.n	800797c <update_coordinate+0x54>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <update_coordinate+0x14>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	0800794d 	.word	0x0800794d
 8007940:	08007959 	.word	0x08007959
 8007944:	08007965 	.word	0x08007965
 8007948:	08007971 	.word	0x08007971
	case 1://北
		y = y + 1;
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <update_coordinate+0x64>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a0e      	ldr	r2, [pc, #56]	; (800798c <update_coordinate+0x64>)
 8007954:	6013      	str	r3, [r2, #0]
		break;
 8007956:	e011      	b.n	800797c <update_coordinate+0x54>
	case 2://東
		x = x + 1;
 8007958:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <update_coordinate+0x68>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3301      	adds	r3, #1
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <update_coordinate+0x68>)
 8007960:	6013      	str	r3, [r2, #0]
		break;
 8007962:	e00b      	b.n	800797c <update_coordinate+0x54>
	case 3://南
		y = y - 1;
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <update_coordinate+0x64>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3b01      	subs	r3, #1
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <update_coordinate+0x64>)
 800796c:	6013      	str	r3, [r2, #0]
		break;
 800796e:	e005      	b.n	800797c <update_coordinate+0x54>
	case 4://西
		x = x - 1;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <update_coordinate+0x68>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3b01      	subs	r3, #1
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <update_coordinate+0x68>)
 8007978:	6013      	str	r3, [r2, #0]
		break;
 800797a:	bf00      	nop
	}

}
 800797c:	bf00      	nop
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000f78 	.word	0x20000f78
 800798c:	20000f74 	.word	0x20000f74
 8007990:	20000f70 	.word	0x20000f70
 8007994:	00000000 	.word	0x00000000

08007998 <ShortestWay>:



void ShortestWay(float input_StraightVelocity, float input_StraightAcceleration,parameter_speed input_turn,char slant_mode){
 8007998:	b084      	sub	sp, #16
 800799a:	b590      	push	{r4, r7, lr}
 800799c:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80079a0:	af04      	add	r7, sp, #16
 80079a2:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 80079a6:	f2a4 442c 	subw	r4, r4, #1068	; 0x42c
 80079aa:	ed84 0a00 	vstr	s0, [r4]
 80079ae:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 80079b2:	f5a4 6486 	sub.w	r4, r4, #1072	; 0x430
 80079b6:	edc4 0a00 	vstr	s1, [r4]
 80079ba:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 80079be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pass[255];
	unsigned char slant_count;
	int slant_direction;
	_Bool north_wall,east_wall,south_wall,west_wall;
	unsigned short front_count, right_count, back_count, left_count;
	unsigned short pass_count = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	int t=0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	x = 0;
 80079ce:	4bb5      	ldr	r3, [pc, #724]	; (8007ca4 <ShortestWay+0x30c>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
	y = 0;
 80079d4:	4bb4      	ldr	r3, [pc, #720]	; (8007ca8 <ShortestWay+0x310>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
	direction = 1;
 80079da:	4bb4      	ldr	r3, [pc, #720]	; (8007cac <ShortestWay+0x314>)
 80079dc:	2201      	movs	r2, #1
 80079de:	601a      	str	r2, [r3, #0]
	slant_direction = -2;
 80079e0:	f06f 0301 	mvn.w	r3, #1
 80079e4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

	//highspeed_mode = 1;
	while (t <= 255) {
 80079e8:	e00d      	b.n	8007a06 <ShortestWay+0x6e>
		pass[t] = 0;
 80079ea:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80079ee:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80079f2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80079f6:	2100      	movs	r1, #0
 80079f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		t++;
 80079fc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 255) {
 8007a06:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a0a:	2bff      	cmp	r3, #255	; 0xff
 8007a0c:	dded      	ble.n	80079ea <ShortestWay+0x52>
	}
	t = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a14:	e01d      	b.n	8007a52 <ShortestWay+0xba>
		record.row[t] = wall.row[t];
 8007a16:	4aa6      	ldr	r2, [pc, #664]	; (8007cb0 <ShortestWay+0x318>)
 8007a18:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007a20:	4aa4      	ldr	r2, [pc, #656]	; (8007cb4 <ShortestWay+0x31c>)
 8007a22:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007a2a:	4aa1      	ldr	r2, [pc, #644]	; (8007cb0 <ShortestWay+0x318>)
 8007a2c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a30:	330c      	adds	r3, #12
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	4413      	add	r3, r2
 8007a36:	88d9      	ldrh	r1, [r3, #6]
 8007a38:	4a9e      	ldr	r2, [pc, #632]	; (8007cb4 <ShortestWay+0x31c>)
 8007a3a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a3e:	330c      	adds	r3, #12
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	4413      	add	r3, r2
 8007a44:	460a      	mov	r2, r1
 8007a46:	80da      	strh	r2, [r3, #6]
		t++;
 8007a48:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a52:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a56:	2b0e      	cmp	r3, #14
 8007a58:	dddd      	ble.n	8007a16 <ShortestWay+0x7e>
	}
	t = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007a60:	e022      	b.n	8007aa8 <ShortestWay+0x110>
		record.row_look[t] = wall.row_look[t];
 8007a62:	4a93      	ldr	r2, [pc, #588]	; (8007cb0 <ShortestWay+0x318>)
 8007a64:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a68:	331c      	adds	r3, #28
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	4413      	add	r3, r2
 8007a6e:	8899      	ldrh	r1, [r3, #4]
 8007a70:	4a90      	ldr	r2, [pc, #576]	; (8007cb4 <ShortestWay+0x31c>)
 8007a72:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a76:	331c      	adds	r3, #28
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007a80:	4a8b      	ldr	r2, [pc, #556]	; (8007cb0 <ShortestWay+0x318>)
 8007a82:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a86:	332c      	adds	r3, #44	; 0x2c
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	8859      	ldrh	r1, [r3, #2]
 8007a8e:	4a89      	ldr	r2, [pc, #548]	; (8007cb4 <ShortestWay+0x31c>)
 8007a90:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007a94:	332c      	adds	r3, #44	; 0x2c
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	4413      	add	r3, r2
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	805a      	strh	r2, [r3, #2]
		t++;
 8007a9e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007aa8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007aac:	2b0e      	cmp	r3, #14
 8007aae:	ddd8      	ble.n	8007a62 <ShortestWay+0xca>
	}
	t = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007ab6:	e039      	b.n	8007b2c <ShortestWay+0x194>
		wall.row[t] = wall.row[t] | ~wall.row_look[t];
 8007ab8:	4a7d      	ldr	r2, [pc, #500]	; (8007cb0 <ShortestWay+0x318>)
 8007aba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac2:	b21a      	sxth	r2, r3
 8007ac4:	497a      	ldr	r1, [pc, #488]	; (8007cb0 <ShortestWay+0x318>)
 8007ac6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007aca:	331c      	adds	r3, #28
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	440b      	add	r3, r1
 8007ad0:	889b      	ldrh	r3, [r3, #4]
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	b21b      	sxth	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	b299      	uxth	r1, r3
 8007ade:	4a74      	ldr	r2, [pc, #464]	; (8007cb0 <ShortestWay+0x318>)
 8007ae0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = wall.column[t] | ~wall.column_look[t];
 8007ae8:	4a71      	ldr	r2, [pc, #452]	; (8007cb0 <ShortestWay+0x318>)
 8007aea:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007aee:	330c      	adds	r3, #12
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	4413      	add	r3, r2
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	b21a      	sxth	r2, r3
 8007af8:	496d      	ldr	r1, [pc, #436]	; (8007cb0 <ShortestWay+0x318>)
 8007afa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007afe:	332c      	adds	r3, #44	; 0x2c
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	440b      	add	r3, r1
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	b21b      	sxth	r3, r3
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	b21b      	sxth	r3, r3
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	b21b      	sxth	r3, r3
 8007b10:	b299      	uxth	r1, r3
 8007b12:	4a67      	ldr	r2, [pc, #412]	; (8007cb0 <ShortestWay+0x318>)
 8007b14:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007b18:	330c      	adds	r3, #12
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	460a      	mov	r2, r1
 8007b20:	80da      	strh	r2, [r3, #6]
		t++;
 8007b22:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007b26:	3301      	adds	r3, #1
 8007b28:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8007b2c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8007b30:	2b0e      	cmp	r3, #14
 8007b32:	ddc1      	ble.n	8007ab8 <ShortestWay+0x120>
	}

	pass_count = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
//	maze_makerhosuu(direction, x, y);
//	maze_makerST(stmass);//あとで修正
	maze_maker0(0,1);
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f001 fec5 	bl	80098cc <maze_maker0>
	maze_display();
 8007b42:	f002 fb37 	bl	800a1b4 <maze_display>

	pass[0] = 1;
 8007b46:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007b4a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {
//
//			break;
//		}
		update_coordinate();
 8007b52:	f7ff fee9 	bl	8007928 <update_coordinate>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count);
 8007b56:	f107 0310 	add.w	r3, r7, #16
 8007b5a:	f107 0212 	add.w	r2, r7, #18
 8007b5e:	f107 0114 	add.w	r1, r7, #20
 8007b62:	f107 0016 	add.w	r0, r7, #22
 8007b66:	f001 fe0f 	bl	8009788 <search_AroundWalkCount>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8007b6a:	4b4e      	ldr	r3, [pc, #312]	; (8007ca4 <ShortestWay+0x30c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d003      	beq.n	8007b7a <ShortestWay+0x1e2>
 8007b72:	4b4c      	ldr	r3, [pc, #304]	; (8007ca4 <ShortestWay+0x30c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d128      	bne.n	8007bcc <ShortestWay+0x234>
 8007b7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <ShortestWay+0x310>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d003      	beq.n	8007b8a <ShortestWay+0x1f2>
 8007b82:	4b49      	ldr	r3, [pc, #292]	; (8007ca8 <ShortestWay+0x310>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d120      	bne.n	8007bcc <ShortestWay+0x234>
			if (pass[pass_count] >= 0) {
 8007b8a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007b8e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007b92:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da04      	bge.n	8007ba8 <ShortestWay+0x210>
			} else {
				pass_count++;
 8007b9e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			}
			pass[pass_count] = pass[pass_count] + 1;
 8007ba8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007bac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007bb0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007bbc:	1c59      	adds	r1, r3, #1
 8007bbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007bc2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			break;
 8007bca:	e1b0      	b.n	8007f2e <ShortestWay+0x596>
		}

		if (y <= 14) {
 8007bcc:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <ShortestWay+0x310>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b0e      	cmp	r3, #14
 8007bd2:	dc14      	bgt.n	8007bfe <ShortestWay+0x266>
			north_wall = wall.column[y] & (1 << x);
 8007bd4:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <ShortestWay+0x310>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a35      	ldr	r2, [pc, #212]	; (8007cb0 <ShortestWay+0x318>)
 8007bda:	330c      	adds	r3, #12
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	88db      	ldrh	r3, [r3, #6]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <ShortestWay+0x30c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2201      	movs	r2, #1
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	400b      	ands	r3, r1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
 8007bfc:	e002      	b.n	8007c04 <ShortestWay+0x26c>
		} else {
			north_wall = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		}

		if (y >= 1) {
 8007c04:	4b28      	ldr	r3, [pc, #160]	; (8007ca8 <ShortestWay+0x310>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd15      	ble.n	8007c38 <ShortestWay+0x2a0>
			south_wall = wall.column[y - 1] & (1 << x);
 8007c0c:	4b26      	ldr	r3, [pc, #152]	; (8007ca8 <ShortestWay+0x310>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4a27      	ldr	r2, [pc, #156]	; (8007cb0 <ShortestWay+0x318>)
 8007c14:	330c      	adds	r3, #12
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	88db      	ldrh	r3, [r3, #6]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <ShortestWay+0x30c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	fa02 f303 	lsl.w	r3, r2, r3
 8007c28:	400b      	ands	r3, r1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
 8007c36:	e002      	b.n	8007c3e <ShortestWay+0x2a6>
		} else {
			south_wall = 1;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
		}

		if (x <= 14) {
 8007c3e:	4b19      	ldr	r3, [pc, #100]	; (8007ca4 <ShortestWay+0x30c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b0e      	cmp	r3, #14
 8007c44:	dc12      	bgt.n	8007c6c <ShortestWay+0x2d4>
			east_wall = wall.row[x] & (1 << y);
 8007c46:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <ShortestWay+0x30c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <ShortestWay+0x318>)
 8007c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c50:	4619      	mov	r1, r3
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <ShortestWay+0x310>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2201      	movs	r2, #1
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
 8007c6a:	e002      	b.n	8007c72 <ShortestWay+0x2da>
		} else {
			east_wall = 1;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
		}

		if (x >= 1) {
 8007c72:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <ShortestWay+0x30c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd1e      	ble.n	8007cb8 <ShortestWay+0x320>
			west_wall = wall.row[x - 1] & (1 << y);
 8007c7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <ShortestWay+0x30c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4a0b      	ldr	r2, [pc, #44]	; (8007cb0 <ShortestWay+0x318>)
 8007c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <ShortestWay+0x310>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	400b      	ands	r3, r1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bf14      	ite	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	2300      	moveq	r3, #0
 8007c9c:	f887 3424 	strb.w	r3, [r7, #1060]	; 0x424
 8007ca0:	e00d      	b.n	8007cbe <ShortestWay+0x326>
 8007ca2:	bf00      	nop
 8007ca4:	20000f70 	.word	0x20000f70
 8007ca8:	20000f74 	.word	0x20000f74
 8007cac:	20000f78 	.word	0x20000f78
 8007cb0:	20000f80 	.word	0x20000f80
 8007cb4:	20000ff8 	.word	0x20000ff8
		} else {
			west_wall = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3424 	strb.w	r3, [r7, #1060]	; 0x424
		}

		switch (direction) {
 8007cbe:	4b97      	ldr	r3, [pc, #604]	; (8007f1c <ShortestWay+0x584>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d83f      	bhi.n	8007d48 <ShortestWay+0x3b0>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <ShortestWay+0x338>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007cfb 	.word	0x08007cfb
 8007cd8:	08007d15 	.word	0x08007d15
 8007cdc:	08007d2f 	.word	0x08007d2f
		case 1:
			front_wall = north_wall;
 8007ce0:	4a8f      	ldr	r2, [pc, #572]	; (8007f20 <ShortestWay+0x588>)
 8007ce2:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007ce6:	7013      	strb	r3, [r2, #0]
			left_wall = west_wall;
 8007ce8:	4a8e      	ldr	r2, [pc, #568]	; (8007f24 <ShortestWay+0x58c>)
 8007cea:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007cee:	7013      	strb	r3, [r2, #0]
			right_wall = east_wall;
 8007cf0:	4a8d      	ldr	r2, [pc, #564]	; (8007f28 <ShortestWay+0x590>)
 8007cf2:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007cf6:	7013      	strb	r3, [r2, #0]
			break;
 8007cf8:	e026      	b.n	8007d48 <ShortestWay+0x3b0>
		case 2:
			front_wall = east_wall;
 8007cfa:	4a89      	ldr	r2, [pc, #548]	; (8007f20 <ShortestWay+0x588>)
 8007cfc:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007d00:	7013      	strb	r3, [r2, #0]
			left_wall = north_wall;
 8007d02:	4a88      	ldr	r2, [pc, #544]	; (8007f24 <ShortestWay+0x58c>)
 8007d04:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007d08:	7013      	strb	r3, [r2, #0]
			right_wall = south_wall;
 8007d0a:	4a87      	ldr	r2, [pc, #540]	; (8007f28 <ShortestWay+0x590>)
 8007d0c:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007d10:	7013      	strb	r3, [r2, #0]
			break;
 8007d12:	e019      	b.n	8007d48 <ShortestWay+0x3b0>
		case 3:
			front_wall = south_wall;
 8007d14:	4a82      	ldr	r2, [pc, #520]	; (8007f20 <ShortestWay+0x588>)
 8007d16:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007d1a:	7013      	strb	r3, [r2, #0]
			left_wall = east_wall;
 8007d1c:	4a81      	ldr	r2, [pc, #516]	; (8007f24 <ShortestWay+0x58c>)
 8007d1e:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8007d22:	7013      	strb	r3, [r2, #0]
			right_wall = west_wall;
 8007d24:	4a80      	ldr	r2, [pc, #512]	; (8007f28 <ShortestWay+0x590>)
 8007d26:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007d2a:	7013      	strb	r3, [r2, #0]

			break;
 8007d2c:	e00c      	b.n	8007d48 <ShortestWay+0x3b0>
		case 4:
			front_wall = west_wall;
 8007d2e:	4a7c      	ldr	r2, [pc, #496]	; (8007f20 <ShortestWay+0x588>)
 8007d30:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 8007d34:	7013      	strb	r3, [r2, #0]
			left_wall = south_wall;
 8007d36:	4a7b      	ldr	r2, [pc, #492]	; (8007f24 <ShortestWay+0x58c>)
 8007d38:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8007d3c:	7013      	strb	r3, [r2, #0]
			right_wall = north_wall;
 8007d3e:	4a7a      	ldr	r2, [pc, #488]	; (8007f28 <ShortestWay+0x590>)
 8007d40:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8007d44:	7013      	strb	r3, [r2, #0]
			break;
 8007d46:	bf00      	nop

		}
		if (front_wall) {
 8007d48:	4b75      	ldr	r3, [pc, #468]	; (8007f20 <ShortestWay+0x588>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <ShortestWay+0x3c4>
			front_count = MAX_WALKCOUNT;
 8007d50:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d54:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007d58:	22ff      	movs	r2, #255	; 0xff
 8007d5a:	801a      	strh	r2, [r3, #0]
		}
		if (right_wall) {
 8007d5c:	4b72      	ldr	r3, [pc, #456]	; (8007f28 <ShortestWay+0x590>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <ShortestWay+0x3d8>
			right_count = MAX_WALKCOUNT;
 8007d64:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d68:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	801a      	strh	r2, [r3, #0]
		}
		if (left_wall) {
 8007d70:	4b6c      	ldr	r3, [pc, #432]	; (8007f24 <ShortestWay+0x58c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <ShortestWay+0x3ec>
			left_count = MAX_WALKCOUNT;
 8007d78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d7c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	801a      	strh	r2, [r3, #0]
		}

		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8007d84:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d88:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	2bff      	cmp	r3, #255	; 0xff
 8007d90:	d115      	bne.n	8007dbe <ShortestWay+0x426>
 8007d92:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007d96:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	2bff      	cmp	r3, #255	; 0xff
 8007d9e:	d10e      	bne.n	8007dbe <ShortestWay+0x426>
 8007da0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007da4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	2bff      	cmp	r3, #255	; 0xff
 8007dac:	d107      	bne.n	8007dbe <ShortestWay+0x426>
 8007dae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007db2:	f2a3 431e 	subw	r3, r3, #1054	; 0x41e
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	2bff      	cmp	r3, #255	; 0xff
 8007dba:	f000 80b7 	beq.w	8007f2c <ShortestWay+0x594>
			break;
		}

		if (front_count <= right_count && front_count <= left_count){
 8007dbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007dc2:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007dc6:	881a      	ldrh	r2, [r3, #0]
 8007dc8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007dcc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d82b      	bhi.n	8007e2e <ShortestWay+0x496>
 8007dd6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007dda:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007de4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d81f      	bhi.n	8007e2e <ShortestWay+0x496>
			//直進
			if (pass[pass_count] >= 0) {
 8007dee:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007df2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007df6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	da04      	bge.n	8007e0c <ShortestWay+0x474>
			} else {
				pass_count++;
 8007e02:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			}
			pass[pass_count] = pass[pass_count] + 2;
 8007e0c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007e10:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007e20:	1c99      	adds	r1, r3, #2
 8007e22:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e26:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count){
 8007e2e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e32:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007e36:	881a      	ldrh	r2, [r3, #0]
 8007e38:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e3c:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d21f      	bcs.n	8007e86 <ShortestWay+0x4ee>
 8007e46:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e4a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007e4e:	881a      	ldrh	r2, [r3, #0]
 8007e50:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e54:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d813      	bhi.n	8007e86 <ShortestWay+0x4ee>
			//右旋回
			pass_count++;
 8007e5e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			pass[pass_count] = -2;
 8007e68:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007e6c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e70:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007e74:	f06f 0101 	mvn.w	r1, #1
 8007e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			direction++;
 8007e7c:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <ShortestWay+0x584>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <ShortestWay+0x584>)
 8007e84:	6013      	str	r3, [r2, #0]

		}
		if(left_count < front_count && left_count < right_count){
 8007e86:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e8a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007e94:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d21f      	bcs.n	8007ede <ShortestWay+0x546>
 8007e9e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ea2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007eac:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d213      	bcs.n	8007ede <ShortestWay+0x546>
			//左旋回
			pass_count++;
 8007eb6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			pass[pass_count] = -3;
 8007ec0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007ec4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ec8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ecc:	f06f 0102 	mvn.w	r1, #2
 8007ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			direction--;
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <ShortestWay+0x584>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <ShortestWay+0x584>)
 8007edc:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <ShortestWay+0x584>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d102      	bne.n	8007eec <ShortestWay+0x554>
			direction = 1;
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <ShortestWay+0x584>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
		}
		if (direction == 6) {
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <ShortestWay+0x584>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	d102      	bne.n	8007efa <ShortestWay+0x562>
			direction = 2;
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <ShortestWay+0x584>)
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	601a      	str	r2, [r3, #0]
		}
		if (direction == 0) {
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <ShortestWay+0x584>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <ShortestWay+0x570>
			direction = 4;
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <ShortestWay+0x584>)
 8007f04:	2204      	movs	r2, #4
 8007f06:	601a      	str	r2, [r3, #0]
		}
		if (direction == -1) {
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <ShortestWay+0x584>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	f47f ae1f 	bne.w	8007b52 <ShortestWay+0x1ba>
			direction = 3;
 8007f14:	4b01      	ldr	r3, [pc, #4]	; (8007f1c <ShortestWay+0x584>)
 8007f16:	2203      	movs	r2, #3
 8007f18:	601a      	str	r2, [r3, #0]
		update_coordinate();
 8007f1a:	e61a      	b.n	8007b52 <ShortestWay+0x1ba>
 8007f1c:	20000f78 	.word	0x20000f78
 8007f20:	20000f7c 	.word	0x20000f7c
 8007f24:	20000f7e 	.word	0x20000f7e
 8007f28:	20000f7d 	.word	0x20000f7d
			break;
 8007f2c:	bf00      	nop
		}

	}
	pass_count = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 8007f34:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f38:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8198 	beq.w	800827a <ShortestWay+0x8e2>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 8007f4a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007f4e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f52:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	f113 0f02 	cmn.w	r3, #2
 8007f5e:	d145      	bne.n	8007fec <ShortestWay+0x654>
 8007f60:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f6a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	dd3a      	ble.n	8007fec <ShortestWay+0x654>
		&& pass[pass_count + 1] >= 1) {
 8007f76:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd2f      	ble.n	8007fec <ShortestWay+0x654>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 8007f8c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007f90:	1e5a      	subs	r2, r3, #1
 8007f92:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007f96:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	1e59      	subs	r1, r3, #1
 8007fa6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007faa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8007fb2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fbc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fc8:	3201      	adds	r2, #1
 8007fca:	1e59      	subs	r1, r3, #1
 8007fcc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fd0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 8007fd8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007fdc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007fe0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007fe4:	f06f 0103 	mvn.w	r1, #3
 8007fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 8007fec:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8007ff0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007ff4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffc:	f113 0f03 	cmn.w	r3, #3
 8008000:	d145      	bne.n	800808e <ShortestWay+0x6f6>
 8008002:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008006:	1e5a      	subs	r2, r3, #1
 8008008:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800800c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd3a      	ble.n	800808e <ShortestWay+0x6f6>
		&& pass[pass_count + 1] >= 1) {
 8008018:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008022:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd2f      	ble.n	800808e <ShortestWay+0x6f6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800802e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008038:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008044:	3a01      	subs	r2, #1
 8008046:	1e59      	subs	r1, r3, #1
 8008048:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800804c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8008054:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800805e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800806a:	3201      	adds	r2, #1
 800806c:	1e59      	subs	r1, r3, #1
 800806e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008072:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800807a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800807e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008082:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008086:	f06f 0104 	mvn.w	r1, #4
 800808a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800808e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008098:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dd5c      	ble.n	800815e <ShortestWay+0x7c6>
 80080a4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80080a8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	f113 0f02 	cmn.w	r3, #2
 80080b8:	d151      	bne.n	800815e <ShortestWay+0x7c6>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 80080ba:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	f113 0f02 	cmn.w	r3, #2
 80080d0:	d145      	bne.n	800815e <ShortestWay+0x7c6>
 80080d2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080d6:	1c9a      	adds	r2, r3, #2
 80080d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080dc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dd3a      	ble.n	800815e <ShortestWay+0x7c6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80080e8:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80080ec:	1e5a      	subs	r2, r3, #1
 80080ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80080f2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80080fe:	3a01      	subs	r2, #1
 8008100:	1e59      	subs	r1, r3, #1
 8008102:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008106:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800810a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -6;
 800810e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008112:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008116:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800811a:	f06f 0105 	mvn.w	r1, #5
 800811e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = -1;
 8008122:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800812c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008130:	f04f 31ff 	mov.w	r1, #4294967295
 8008134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 8008138:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008142:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800814e:	3202      	adds	r2, #2
 8008150:	1e59      	subs	r1, r3, #1
 8008152:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008156:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800815a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800815e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008162:	1e5a      	subs	r2, r3, #1
 8008164:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008168:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd5c      	ble.n	800822e <ShortestWay+0x896>
 8008174:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008178:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800817c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008184:	f113 0f03 	cmn.w	r3, #3
 8008188:	d151      	bne.n	800822e <ShortestWay+0x896>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800818a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008194:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819c:	f113 0f03 	cmn.w	r3, #3
 80081a0:	d145      	bne.n	800822e <ShortestWay+0x896>
 80081a2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081a6:	1c9a      	adds	r2, r3, #2
 80081a8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd3a      	ble.n	800822e <ShortestWay+0x896>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80081b8:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081bc:	1e5a      	subs	r2, r3, #1
 80081be:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80081ce:	3a01      	subs	r2, #1
 80081d0:	1e59      	subs	r1, r3, #1
 80081d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081d6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count] = -7;
 80081de:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80081e2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081e6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80081ea:	f06f 0106 	mvn.w	r1, #6
 80081ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 1] = -1;
 80081f2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80081fc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008200:	f04f 31ff 	mov.w	r1, #4294967295
 8008204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 8008208:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800820c:	1c9a      	adds	r2, r3, #2
 800820e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008212:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800821e:	3202      	adds	r2, #2
 8008220:	1e59      	subs	r1, r3, #1
 8008222:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008226:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800822a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800822e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008232:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008236:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800823a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823e:	f113 0f02 	cmn.w	r3, #2

				) {
		}
		if (pass[pass_count - 1] == 0) {
 8008242:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008246:	1e5a      	subs	r2, r3, #1
 8008248:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800824c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <ShortestWay+0x8d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 8008258:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800825c:	1e5a      	subs	r2, r3, #1
 800825e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008262:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008266:	f04f 31ff 	mov.w	r1, #4294967295
 800826a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		pass_count++;
 800826e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008272:	3301      	adds	r3, #1
 8008274:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		if (pass[pass_count] == 0) {
 8008278:	e65c      	b.n	8007f34 <ShortestWay+0x59c>
			break;
 800827a:	bf00      	nop
	}

	pass_count = 1;
 800827c:	2301      	movs	r3, #1
 800827e:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
	if (slant_mode == 1) {
 8008282:	f897 3588 	ldrb.w	r3, [r7, #1416]	; 0x588
 8008286:	2b01      	cmp	r3, #1
 8008288:	f040 8417 	bne.w	8008aba <ShortestWay+0x1122>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800828c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008290:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008294:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 827f 	beq.w	80087a0 <ShortestWay+0xe08>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 80082a2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80082a6:	1e5a      	subs	r2, r3, #1
 80082a8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f340 826d 	ble.w	8008794 <ShortestWay+0xdfc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 80082ba:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80082be:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	f113 0f02 	cmn.w	r3, #2
 80082ce:	d00b      	beq.n	80082e8 <ShortestWay+0x950>
 80082d0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80082d4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082d8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e0:	f113 0f03 	cmn.w	r3, #3
 80082e4:	f040 8256 	bne.w	8008794 <ShortestWay+0xdfc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 80082e8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80082ec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80082f0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80082f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f8:	f113 0f02 	cmn.w	r3, #2
 80082fc:	d13e      	bne.n	800837c <ShortestWay+0x9e4>
 80082fe:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008308:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800830c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008310:	f113 0f03 	cmn.w	r3, #3
 8008314:	d132      	bne.n	800837c <ShortestWay+0x9e4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8008316:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800831a:	1e5a      	subs	r2, r3, #1
 800831c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008320:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008328:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800832c:	3a01      	subs	r2, #1
 800832e:	1e59      	subs	r1, r3, #1
 8008330:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008334:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800833c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008340:	1e5a      	subs	r2, r3, #1
 8008342:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008346:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <ShortestWay+0x9d0>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8008352:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008356:	1e5a      	subs	r2, r3, #1
 8008358:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800835c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008360:	f04f 31ff 	mov.w	r1, #4294967295
 8008364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 8008368:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800836c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008370:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008374:	f06f 0107 	mvn.w	r1, #7
 8008378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800837c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008380:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008384:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	f113 0f03 	cmn.w	r3, #3
 8008390:	d13e      	bne.n	8008410 <ShortestWay+0xa78>
 8008392:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800839c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	f113 0f02 	cmn.w	r3, #2
 80083a8:	d132      	bne.n	8008410 <ShortestWay+0xa78>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80083aa:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083b4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80083c0:	3a01      	subs	r2, #1
 80083c2:	1e59      	subs	r1, r3, #1
 80083c4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083c8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 80083d0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <ShortestWay+0xa64>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 80083e6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80083ea:	1e5a      	subs	r2, r3, #1
 80083ec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80083f0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80083f4:	f04f 31ff 	mov.w	r1, #4294967295
 80083f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 80083fc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008400:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008404:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008408:	f06f 0108 	mvn.w	r1, #8
 800840c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 8008410:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008414:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008418:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	f113 0f02 	cmn.w	r3, #2
 8008424:	d149      	bne.n	80084ba <ShortestWay+0xb22>
 8008426:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008430:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	f113 0f02 	cmn.w	r3, #2
 800843c:	d13d      	bne.n	80084ba <ShortestWay+0xb22>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800843e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008448:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800844c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008450:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008454:	3a01      	subs	r2, #1
 8008456:	1e59      	subs	r1, r3, #1
 8008458:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800845c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8008464:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008468:	1e5a      	subs	r2, r3, #1
 800846a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800846e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <ShortestWay+0xaf8>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800847a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800847e:	1e5a      	subs	r2, r3, #1
 8008480:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008484:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008488:	f04f 31ff 	mov.w	r1, #4294967295
 800848c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 8008490:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008494:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008498:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800849c:	f06f 0109 	mvn.w	r1, #9
 80084a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						pass[pass_count + 1] = -1;
 80084a4:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084ae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084b2:	f04f 31ff 	mov.w	r1, #4294967295
 80084b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 80084ba:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80084be:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	f113 0f03 	cmn.w	r3, #3
 80084ce:	d14f      	bne.n	8008570 <ShortestWay+0xbd8>
 80084d0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e2:	f113 0f03 	cmn.w	r3, #3
 80084e6:	d143      	bne.n	8008570 <ShortestWay+0xbd8>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80084e8:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80084f2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80084fe:	3a01      	subs	r2, #1
 8008500:	1e59      	subs	r1, r3, #1
 8008502:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008506:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800850a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800850e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008518:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <ShortestWay+0xba2>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8008524:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800852e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008532:	f04f 31ff 	mov.w	r1, #4294967295
 8008536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800853a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800853e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008542:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008546:	f06f 010a 	mvn.w	r1, #10
 800854a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						pass[pass_count + 1] = -1;
 800854e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008558:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800855c:	f04f 31ff 	mov.w	r1, #4294967295
 8008560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 8008564:	e004      	b.n	8008570 <ShortestWay+0xbd8>
						pass_count++;
 8008566:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800856a:	3301      	adds	r3, #1
 800856c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
					while (pass[pass_count] <= -1) {
 8008570:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008574:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008578:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dbf0      	blt.n	8008566 <ShortestWay+0xbce>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 8008584:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008588:	1e5a      	subs	r2, r3, #1
 800858a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800858e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	f113 0f02 	cmn.w	r3, #2
 800859a:	d177      	bne.n	800868c <ShortestWay+0xcf4>
						if (pass[pass_count - 2] == -2) {
 800859c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80085a0:	1e9a      	subs	r2, r3, #2
 80085a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085a6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ae:	f113 0f02 	cmn.w	r3, #2
 80085b2:	d13b      	bne.n	800862c <ShortestWay+0xc94>
							pass[pass_count] = pass[pass_count] - 1;
 80085b4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085bc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085c8:	1e59      	subs	r1, r3, #1
 80085ca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085ce:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 80085d6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085da:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085de:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <ShortestWay+0xc66>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80085ea:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80085ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80085f2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80085f6:	f04f 31ff 	mov.w	r1, #4294967295
 80085fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 80085fe:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008602:	1e5a      	subs	r2, r3, #1
 8008604:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008608:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800860c:	f06f 010d 	mvn.w	r1, #13
 8008610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							pass[pass_count - 2] = -1;
 8008614:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008618:	1e9a      	subs	r2, r3, #2
 800861a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800861e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008622:	f04f 31ff 	mov.w	r1, #4294967295
 8008626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800862a:	e02f      	b.n	800868c <ShortestWay+0xcf4>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800862c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008630:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008634:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008640:	1e59      	subs	r1, r3, #1
 8008642:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008646:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800864a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 800864e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008652:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008656:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <ShortestWay+0xcde>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8008662:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008666:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800866a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800866e:	f04f 31ff 	mov.w	r1, #4294967295
 8008672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 8008676:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008680:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008684:	f06f 010b 	mvn.w	r1, #11
 8008688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800868c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008690:	1e5a      	subs	r2, r3, #1
 8008692:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008696:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800869a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869e:	f113 0f03 	cmn.w	r3, #3
 80086a2:	d177      	bne.n	8008794 <ShortestWay+0xdfc>
						if (pass[pass_count - 2] == -3) {
 80086a4:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80086a8:	1e9a      	subs	r2, r3, #2
 80086aa:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086ae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	f113 0f03 	cmn.w	r3, #3
 80086ba:	d13b      	bne.n	8008734 <ShortestWay+0xd9c>
							pass[pass_count] = pass[pass_count] - 1;
 80086bc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086d0:	1e59      	subs	r1, r3, #1
 80086d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086d6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 80086de:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086e2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086e6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <ShortestWay+0xd6e>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80086f2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80086f6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80086fa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80086fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8008706:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 800870a:	1e5a      	subs	r2, r3, #1
 800870c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008710:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008714:	f06f 010e 	mvn.w	r1, #14
 8008718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							pass[pass_count - 2] = -1;
 800871c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008720:	1e9a      	subs	r2, r3, #2
 8008722:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008726:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800872a:	f04f 31ff 	mov.w	r1, #4294967295
 800872e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008732:	e02f      	b.n	8008794 <ShortestWay+0xdfc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 8008734:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008738:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800873c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008748:	1e59      	subs	r1, r3, #1
 800874a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800874e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							if (pass[pass_count] == 0) {
 8008756:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800875a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800875e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <ShortestWay+0xde6>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800876a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800876e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008772:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008776:	f04f 31ff 	mov.w	r1, #4294967295
 800877a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800877e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008782:	1e5a      	subs	r2, r3, #1
 8008784:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008788:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800878c:	f06f 010c 	mvn.w	r1, #12
 8008790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					}
//***************************************************************************************出のモーションend
				}
			}

			pass_count++;
 8008794:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008798:	3301      	adds	r3, #1
 800879a:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			if (pass[pass_count] == 0) {
 800879e:	e575      	b.n	800828c <ShortestWay+0x8f4>
				break;
 80087a0:	bf00      	nop
		}

		pass_count = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 80087a8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087ac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087b0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 817d 	beq.w	8008ab8 <ShortestWay+0x1120>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 80087be:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087c2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087c6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	f113 0f08 	cmn.w	r3, #8
 80087d2:	d021      	beq.n	8008818 <ShortestWay+0xe80>
 80087d4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087dc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	f113 0f09 	cmn.w	r3, #9
 80087e8:	d016      	beq.n	8008818 <ShortestWay+0xe80>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 80087ea:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80087ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80087f2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	f113 0f0a 	cmn.w	r3, #10
 80087fe:	d00b      	beq.n	8008818 <ShortestWay+0xe80>
 8008800:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008804:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008808:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800880c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008810:	f113 0f0b 	cmn.w	r3, #11
 8008814:	f040 814a 	bne.w	8008aac <ShortestWay+0x1114>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8008818:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800881c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008820:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008828:	f113 0f08 	cmn.w	r3, #8
 800882c:	d00a      	beq.n	8008844 <ShortestWay+0xeac>
 800882e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008832:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008836:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	f113 0f0a 	cmn.w	r3, #10
 8008842:	d103      	bne.n	800884c <ShortestWay+0xeb4>
					slant_direction = -3;
 8008844:	f06f 0302 	mvn.w	r3, #2
 8008848:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800884c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008850:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008854:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	f113 0f09 	cmn.w	r3, #9
 8008860:	d00a      	beq.n	8008878 <ShortestWay+0xee0>
 8008862:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008866:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800886a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800886e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008872:	f113 0f0b 	cmn.w	r3, #11
 8008876:	d103      	bne.n	8008880 <ShortestWay+0xee8>
					slant_direction = -2;
 8008878:	f06f 0301 	mvn.w	r3, #1
 800887c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
				}
				pass_count++;
 8008880:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008884:	3301      	adds	r3, #1
 8008886:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800888a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800888e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008892:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d104      	bne.n	80088aa <ShortestWay+0xf12>
					pass_count++;
 80088a0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80088a4:	3301      	adds	r3, #1
 80088a6:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80088aa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088b2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d104      	bne.n	80088ca <ShortestWay+0xf32>
					pass_count++;
 80088c0:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80088c4:	3301      	adds	r3, #1
 80088c6:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}
				if (pass[pass_count] >= -3) {
 80088ca:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80088ce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088d2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088da:	f113 0f03 	cmn.w	r3, #3
 80088de:	f2c0 80d9 	blt.w	8008a94 <ShortestWay+0x10fc>
					slant_count = pass_count;
 80088e2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80088e6:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
					pass[slant_count] = 51;
 80088ea:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80088ee:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80088f2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80088f6:	2133      	movs	r1, #51	; 0x33
 80088f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					pass_count++;
 80088fc:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008900:	3301      	adds	r3, #1
 8008902:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 8008906:	e0c5      	b.n	8008a94 <ShortestWay+0x10fc>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 8008908:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800890c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008910:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d104      	bne.n	8008928 <ShortestWay+0xf90>
						pass_count++;
 800891e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008922:	3301      	adds	r3, #1
 8008924:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 8008928:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800892c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008930:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008938:	f113 0f0c 	cmn.w	r3, #12
 800893c:	f000 80b6 	beq.w	8008aac <ShortestWay+0x1114>
 8008940:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008944:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008948:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	f113 0f0d 	cmn.w	r3, #13
 8008954:	f000 80aa 	beq.w	8008aac <ShortestWay+0x1114>
							|| pass[pass_count] == -14
 8008958:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800895c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008960:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	f113 0f0e 	cmn.w	r3, #14
 800896c:	f000 809e 	beq.w	8008aac <ShortestWay+0x1114>
							|| pass[pass_count] == -15) {
 8008970:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008974:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008978:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800897c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008980:	f113 0f0f 	cmn.w	r3, #15
 8008984:	f000 8092 	beq.w	8008aac <ShortestWay+0x1114>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 8008988:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800898c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008990:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800899c:	429a      	cmp	r2, r3
 800899e:	d133      	bne.n	8008a08 <ShortestWay+0x1070>
						pass[slant_count] = pass[slant_count] - 1;
 80089a0:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80089a4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089a8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 80089b4:	1e59      	subs	r1, r3, #1
 80089b6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089ba:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						slant_count = pass_count;
 80089c2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 80089c6:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
						if (slant_direction == -2) {
 80089ca:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80089ce:	f113 0f02 	cmn.w	r3, #2
 80089d2:	d109      	bne.n	80089e8 <ShortestWay+0x1050>
							pass[pass_count] = -16;
 80089d4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80089d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089dc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089e0:	f06f 010f 	mvn.w	r1, #15
 80089e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						if (slant_direction == -3) {
 80089e8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80089ec:	f113 0f03 	cmn.w	r3, #3
 80089f0:	d14b      	bne.n	8008a8a <ShortestWay+0x10f2>
							pass[pass_count] = -17;
 80089f2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 80089f6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80089fa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80089fe:	f06f 0110 	mvn.w	r1, #16
 8008a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a06:	e040      	b.n	8008a8a <ShortestWay+0x10f2>
						}

					} else {
						if (pass[slant_count] >= 50) {
 8008a08:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008a0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a10:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	2b31      	cmp	r3, #49	; 0x31
 8008a1a:	dd0a      	ble.n	8008a32 <ShortestWay+0x109a>
							pass[pass_count] = -1;
 8008a1c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008a20:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a28:	f04f 31ff 	mov.w	r1, #4294967295
 8008a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a30:	e00c      	b.n	8008a4c <ShortestWay+0x10b4>
						} else {
							slant_count = pass_count;
 8008a32:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008a36:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
							pass[slant_count] = 50;
 8008a3a:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008a3e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a42:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a46:	2132      	movs	r1, #50	; 0x32
 8008a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 8008a4c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008a50:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a54:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 8008a60:	1c59      	adds	r1, r3, #1
 8008a62:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a66:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (slant_direction == -2) {
 8008a6e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8008a72:	f113 0f02 	cmn.w	r3, #2
 8008a76:	d104      	bne.n	8008a82 <ShortestWay+0x10ea>
							slant_direction = -3;
 8008a78:	f06f 0302 	mvn.w	r3, #2
 8008a7c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8008a80:	e003      	b.n	8008a8a <ShortestWay+0x10f2>
						} else {
							slant_direction = -2;
 8008a82:	f06f 0301 	mvn.w	r3, #1
 8008a86:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
						}

					}

					pass_count++;
 8008a8a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008a8e:	3301      	adds	r3, #1
 8008a90:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
				while (pass[pass_count] >= -3) {
 8008a94:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008a98:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008a9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	f113 0f03 	cmn.w	r3, #3
 8008aa8:	f6bf af2e 	bge.w	8008908 <ShortestWay+0xf70>

			}

			//		if(){}

			pass_count++;
 8008aac:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
			if (pass[pass_count] == 0) {
 8008ab6:	e677      	b.n	80087a8 <ShortestWay+0xe10>
				break;
 8008ab8:	bf00      	nop
		}
	}
	t = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (pass[t] != 0) {
 8008ac0:	e012      	b.n	8008ae8 <ShortestWay+0x1150>
		printf("pass_count %d pass %d\n", t, pass[t]);
 8008ac2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ac6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008aca:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8008ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8008ad8:	4832      	ldr	r0, [pc, #200]	; (8008ba4 <ShortestWay+0x120c>)
 8008ada:	f009 fc87 	bl	80123ec <iprintf>
		t++;
 8008ade:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (pass[t] != 0) {
 8008ae8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008aec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008af0:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8008af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e2      	bne.n	8008ac2 <ShortestWay+0x112a>
	}
wait_ms(1000);
 8008afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b00:	f7fb f89e 	bl	8003c40 <wait_ms>
// 最短走行の実行
	MOTOR_MODE mode;
	float v_start,v_end;
	mode.WallControlMode=1;
 8008b04:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b08:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	701a      	strb	r2, [r3, #0]
	mode.WallControlStatus=0;
 8008b10:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b14:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008b18:	2200      	movs	r2, #0
 8008b1a:	705a      	strb	r2, [r3, #1]
	mode.WallCutMode=0;
 8008b1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b20:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008b24:	2200      	movs	r2, #0
 8008b26:	70da      	strb	r2, [r3, #3]
	mode.calMazeMode=0;
 8008b28:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b2c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008b30:	2200      	movs	r2, #0
 8008b32:	709a      	strb	r2, [r3, #2]
	pl_motor_standby(1);
 8008b34:	2001      	movs	r0, #1
 8008b36:	f7f9 fdf7 	bl	8002728 <pl_motor_standby>
	HAL_Delay(500);
 8008b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b3e:	f003 fcd3 	bl	800c4e8 <HAL_Delay>
	pl_motor_start();
 8008b42:	f7f9 fe5b 	bl	80027fc <pl_motor_start>

//	maze_mode = 1;
//	highspeed_mode = 1;
//	Avespeed = 1400;
//	wall_control = 0;
	pass_count = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
//		v_e=straight_table(BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
//	} else {
//		v_e=straight_table(BACK_TO_CENTER, 120,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
//		//straight_table(39.5, 0, howspeed.turn90_R.g_speed,howspeed.turn90_R.g_speed,howspeed.turn90_R.g_speed * howspeed.turn90_R.g_speed / 39.5);
//	}
	v_start=straight_table(BACK_TO_CENTER, 120,input_turn.TurnCentervelocity,input_turn.TurnCentervelocity,input_turn.TurnCentervelocity * input_turn.TurnCentervelocity / BACK_TO_CENTER, mode);
 8008b4c:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008b50:	edd3 6a00 	vldr	s13, [r3]
 8008b54:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008b58:	ed93 6a00 	vldr	s12, [r3]
 8008b5c:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008b60:	ed93 7a00 	vldr	s14, [r3]
 8008b64:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008b68:	edd3 7a00 	vldr	s15, [r3]
 8008b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b70:	eddf 5a0d 	vldr	s11, [pc, #52]	; 8008ba8 <ShortestWay+0x1210>
 8008b74:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8008b78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008b7c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	eeb0 2a47 	vmov.f32	s4, s14
 8008b86:	eef0 1a46 	vmov.f32	s3, s12
 8008b8a:	eeb0 1a66 	vmov.f32	s2, s13
 8008b8e:	eddf 0a07 	vldr	s1, [pc, #28]	; 8008bac <ShortestWay+0x1214>
 8008b92:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008ba8 <ShortestWay+0x1210>
 8008b96:	f7f8 ffff 	bl	8001b98 <straight_table>
 8008b9a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008b9e:	ed83 0a00 	vstr	s0, [r3]

	while (pass_count <= 255) {
 8008ba2:	e273      	b.n	800908c <ShortestWay+0x16f4>
 8008ba4:	08014c74 	.word	0x08014c74
 8008ba8:	41f40000 	.word	0x41f40000
 8008bac:	42f00000 	.word	0x42f00000

		if (pass[pass_count] == -1) {
 8008bb0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008bb4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008bb8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d104      	bne.n	8008bd0 <ShortestWay+0x1238>
			pass_count++;
 8008bc6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -2) {
 8008bd0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008bd4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008bd8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	f113 0f02 	cmn.w	r3, #2
 8008be4:	d110      	bne.n	8008c08 <ShortestWay+0x1270>
			slalomR(input_turn.slalom_R, OFF,SHORTEST);
 8008be6:	2301      	movs	r3, #1
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8008bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bfa:	f7fb fbd7 	bl	80043ac <slalomR>
			pass_count++;
 8008bfe:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c02:	3301      	adds	r3, #1
 8008c04:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -3) {
 8008c08:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c10:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c18:	f113 0f03 	cmn.w	r3, #3
 8008c1c:	d110      	bne.n	8008c40 <ShortestWay+0x12a8>
			slalomL(input_turn.slalom_L, OFF,SHORTEST);
 8008c1e:	2301      	movs	r3, #1
 8008c20:	9302      	str	r3, [sp, #8]
 8008c22:	2300      	movs	r3, #0
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8008c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c32:	f7fb fd07 	bl	8004644 <slalomL>
			pass_count++;
 8008c36:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -4) {
 8008c40:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c44:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c48:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c50:	f113 0f04 	cmn.w	r3, #4
 8008c54:	d10e      	bne.n	8008c74 <ShortestWay+0x12dc>
			turn90R(input_turn.turn90_R, OFF);
 8008c56:	2300      	movs	r3, #0
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8008c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c66:	f7fb fe3f 	bl	80048e8 <turn90R>
			pass_count++;
 8008c6a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008c6e:	3301      	adds	r3, #1
 8008c70:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -5) {
 8008c74:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008c78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c7c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	f113 0f05 	cmn.w	r3, #5
 8008c88:	d10e      	bne.n	8008ca8 <ShortestWay+0x1310>
			turn90L(input_turn.turn90_L, OFF);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c9a:	f7fb ff41 	bl	8004b20 <turn90L>
			pass_count++;
 8008c9e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -6) {
 8008ca8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008cac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008cb0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	f113 0f06 	cmn.w	r3, #6
 8008cbc:	d10e      	bne.n	8008cdc <ShortestWay+0x1344>
			turn180R(input_turn.turn180_R, OFF);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8008ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cce:	f7fc f849 	bl	8004d64 <turn180R>
			pass_count++;
 8008cd2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -7) {
 8008cdc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ce0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008ce4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	f113 0f07 	cmn.w	r3, #7
 8008cf0:	d10e      	bne.n	8008d10 <ShortestWay+0x1378>
			turn180L(input_turn.turn180_L, OFF);
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8008d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d02:	f7fc f94b 	bl	8004f9c <turn180L>
			pass_count++;
 8008d06:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -8) { //入り45R
 8008d10:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d18:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	f113 0f08 	cmn.w	r3, #8
 8008d24:	d10e      	bne.n	8008d44 <ShortestWay+0x13ac>
			turn45inR(input_turn.turn45in_R, OFF);
 8008d26:	2300      	movs	r3, #0
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d36:	f7fc fa53 	bl	80051e0 <turn45inR>
			pass_count++;
 8008d3a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d3e:	3301      	adds	r3, #1
 8008d40:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -9) { //入り45L
 8008d44:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d48:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d4c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d54:	f113 0f09 	cmn.w	r3, #9
 8008d58:	d10e      	bne.n	8008d78 <ShortestWay+0x13e0>
			turn45inL(input_turn.turn45in_L, OFF);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8008d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d6a:	f7fc fbf9 	bl	8005560 <turn45inL>
			pass_count++;
 8008d6e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008d72:	3301      	adds	r3, #1
 8008d74:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -10) { //入り135R
 8008d78:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008d7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008d80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d88:	f113 0f0a 	cmn.w	r3, #10
 8008d8c:	d10e      	bne.n	8008dac <ShortestWay+0x1414>
			turn135inR(input_turn.turn135in_R, OFF);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8008d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d9e:	f7fc fda3 	bl	80058e8 <turn135inR>
			pass_count++;
 8008da2:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008da6:	3301      	adds	r3, #1
 8008da8:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -11) { //入り135L
 8008dac:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008db0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008db4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	f113 0f0b 	cmn.w	r3, #11
 8008dc0:	d10e      	bne.n	8008de0 <ShortestWay+0x1448>
			turn135inL(input_turn.turn135in_L, OFF);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8008dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dd2:	f7fc ff49 	bl	8005c68 <turn135inL>
			pass_count++;
 8008dd6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -12) { //出り45R
 8008de0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008de4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008de8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df0:	f113 0f0c 	cmn.w	r3, #12
 8008df4:	d10e      	bne.n	8008e14 <ShortestWay+0x147c>
			turn45outR(input_turn.turn45out_R, OFF);
 8008df6:	2300      	movs	r3, #0
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e06:	f7fd f8f3 	bl	8005ff0 <turn45outR>
			pass_count++;
 8008e0a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e0e:	3301      	adds	r3, #1
 8008e10:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -13) { //出り45L
 8008e14:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e18:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e1c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	f113 0f0d 	cmn.w	r3, #13
 8008e28:	d10e      	bne.n	8008e48 <ShortestWay+0x14b0>
			turn45outL(input_turn.turn45out_L, OFF);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8008e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e3a:	f7fd f9e1 	bl	8006200 <turn45outL>
			pass_count++;
 8008e3e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e42:	3301      	adds	r3, #1
 8008e44:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -14) { //出り135R
 8008e48:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e50:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e58:	f113 0f0e 	cmn.w	r3, #14
 8008e5c:	d10e      	bne.n	8008e7c <ShortestWay+0x14e4>
			turn135outR(input_turn.turn135out_R, OFF);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8008e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e6e:	f7fd fad3 	bl	8006418 <turn135outR>
			pass_count++;
 8008e72:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008e76:	3301      	adds	r3, #1
 8008e78:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -15) { //出り135L
 8008e7c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008e80:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e84:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	f113 0f0f 	cmn.w	r3, #15
 8008e90:	d10e      	bne.n	8008eb0 <ShortestWay+0x1518>
			turn135outL(input_turn.turn135out_L, OFF);
 8008e92:	2300      	movs	r3, #0
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8008ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ea2:	f7fd fbc1 	bl	8006628 <turn135outL>
			pass_count++;
 8008ea6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -16) { //V90R
 8008eb0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008eb4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008eb8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	f113 0f10 	cmn.w	r3, #16
 8008ec4:	d10e      	bne.n	8008ee4 <ShortestWay+0x154c>
			V90R(input_turn.V90_R, OFF);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8008ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ed6:	f7fd fcb3 	bl	8006840 <V90R>
			pass_count++;
 8008eda:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008ede:	3301      	adds	r3, #1
 8008ee0:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] == -17) { //V90L
 8008ee4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008ee8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008eec:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	f113 0f11 	cmn.w	r3, #17
 8008ef8:	d10e      	bne.n	8008f18 <ShortestWay+0x1580>
			V90L(input_turn.V90_L, OFF);
 8008efa:	2300      	movs	r3, #0
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8008f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f0a:	f7fd fd9d 	bl	8006a48 <V90L>
			pass_count++;
 8008f0e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008f12:	3301      	adds	r3, #1
 8008f14:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}
		if (pass[pass_count] >= 1) {
 8008f18:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008f1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f20:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f340 809d 	ble.w	8009068 <ShortestWay+0x16d0>
			v_end = input_turn.TurnCentervelocity;
 8008f2e:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8008f38:	6013      	str	r3, [r2, #0]
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8008f3a:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f44:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	f113 0f02 	cmn.w	r3, #2
 8008f50:	d00b      	beq.n	8008f6a <ShortestWay+0x15d2>
 8008f52:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f64:	f113 0f03 	cmn.w	r3, #3
 8008f68:	d105      	bne.n	8008f76 <ShortestWay+0x15de>
				v_end = input_turn.SlalomCentervelocity;
 8008f6a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8008f74:	6013      	str	r3, [r2, #0]
			}
			if (pass[pass_count] >= 50) {
 8008f76:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008f7a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	2b31      	cmp	r3, #49	; 0x31
 8008f88:	dd39      	ble.n	8008ffe <ShortestWay+0x1666>
				//wall_control_mode = 2;
				v_start=straight_table((90 * 1.414 * (pass[pass_count] - 50)), v_start,v_end,input_StraightVelocity,input_StraightAcceleration, mode);
 8008f8a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8008f8e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f92:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	3b32      	subs	r3, #50	; 0x32
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f7 fac1 	bl	8000524 <__aeabi_i2d>
 8008fa2:	a36f      	add	r3, pc, #444	; (adr r3, 8009160 <ShortestWay+0x17c8>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	f7f7 fe18 	bl	8000be8 <__aeabi_d2f>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fbe:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8008fc2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fc6:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 8008fca:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008fce:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8008fd2:	6808      	ldr	r0, [r1, #0]
 8008fd4:	ed92 2a00 	vldr	s4, [r2]
 8008fd8:	edd3 1a00 	vldr	s3, [r3]
 8008fdc:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8008fe0:	ed93 1a00 	vldr	s2, [r3]
 8008fe4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008fe8:	edd3 0a00 	vldr	s1, [r3]
 8008fec:	ee00 4a10 	vmov	s0, r4
 8008ff0:	f7f8 fdd2 	bl	8001b98 <straight_table>
 8008ff4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008ff8:	ed83 0a00 	vstr	s0, [r3]
 8008ffc:	e02f      	b.n	800905e <ShortestWay+0x16c6>
			} else {
				//wall_control_mode = 1;
				//straight_table((90 * pass[pass_count]), first_v, last_v,inspeed, inacc);
				v_start=straight_table((90 * pass[pass_count]), v_start,v_end,input_StraightVelocity,input_StraightAcceleration, mode);
 8008ffe:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 8009002:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009006:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	225a      	movs	r2, #90	; 0x5a
 8009010:	fb02 f303 	mul.w	r3, r2, r3
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800901c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009020:	f2a3 4124 	subw	r1, r3, #1060	; 0x424
 8009024:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009028:	f5a3 6286 	sub.w	r2, r3, #1072	; 0x430
 800902c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009030:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8009034:	6808      	ldr	r0, [r1, #0]
 8009036:	ed92 2a00 	vldr	s4, [r2]
 800903a:	edd3 1a00 	vldr	s3, [r3]
 800903e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8009042:	ed93 1a00 	vldr	s2, [r3]
 8009046:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800904a:	edd3 0a00 	vldr	s1, [r3]
 800904e:	eeb0 0a67 	vmov.f32	s0, s15
 8009052:	f7f8 fda1 	bl	8001b98 <straight_table>
 8009056:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800905a:	ed83 0a00 	vstr	s0, [r3]

			}
			pass_count++;
 800905e:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8009062:	3301      	adds	r3, #1
 8009064:	f8a7 3422 	strh.w	r3, [r7, #1058]	; 0x422
		}

		if (pass[pass_count] == 0) {
 8009068:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	; 0x422
 800906c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009070:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00d      	beq.n	8009098 <ShortestWay+0x1700>
			break;
		}

		if (x == 0 && y == 0) {
 800907c:	4b30      	ldr	r3, [pc, #192]	; (8009140 <ShortestWay+0x17a8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <ShortestWay+0x16f4>
 8009084:	4b2f      	ldr	r3, [pc, #188]	; (8009144 <ShortestWay+0x17ac>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d007      	beq.n	800909c <ShortestWay+0x1704>
	while (pass_count <= 255) {
 800908c:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	; 0x422
 8009090:	2bff      	cmp	r3, #255	; 0xff
 8009092:	f67f ad8d 	bls.w	8008bb0 <ShortestWay+0x1218>
 8009096:	e002      	b.n	800909e <ShortestWay+0x1706>
			break;
 8009098:	bf00      	nop
 800909a:	e000      	b.n	800909e <ShortestWay+0x1706>
			break;
 800909c:	bf00      	nop
		}

	}
	if (x == 0 && y == 0) {
 800909e:	4b28      	ldr	r3, [pc, #160]	; (8009140 <ShortestWay+0x17a8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d103      	bne.n	80090ae <ShortestWay+0x1716>
 80090a6:	4b27      	ldr	r3, [pc, #156]	; (8009144 <ShortestWay+0x17ac>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00f      	beq.n	80090ce <ShortestWay+0x1736>
	} else {
//		straight_table(180, (E_speedR + E_speedL) / 2, 0,(E_speedR + E_speedL) / 2, inacc);
		HAL_Delay(700);
 80090ae:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80090b2:	f003 fa19 	bl	800c4e8 <HAL_Delay>
		turning_table(180, 0, 0, 400, 5000);
 80090b6:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8009148 <ShortestWay+0x17b0>
 80090ba:	eddf 1a24 	vldr	s3, [pc, #144]	; 800914c <ShortestWay+0x17b4>
 80090be:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8009150 <ShortestWay+0x17b8>
 80090c2:	eddf 0a23 	vldr	s1, [pc, #140]	; 8009150 <ShortestWay+0x17b8>
 80090c6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8009154 <ShortestWay+0x17bc>
 80090ca:	f7f8 fe5f 	bl	8001d8c <turning_table>
	}
	pl_motor_stop();
 80090ce:	f7f9 fba9 	bl	8002824 <pl_motor_stop>
	HAL_Delay(500);
 80090d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d6:	f003 fa07 	bl	800c4e8 <HAL_Delay>
	pl_motor_standby(0);
 80090da:	2000      	movs	r0, #0
 80090dc:	f7f9 fb24 	bl	8002728 <pl_motor_standby>



	t = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 80090e6:	e01d      	b.n	8009124 <ShortestWay+0x178c>
		wall.row[t] = record.row[t];
 80090e8:	4a1b      	ldr	r2, [pc, #108]	; (8009158 <ShortestWay+0x17c0>)
 80090ea:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80090ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80090f2:	4a1a      	ldr	r2, [pc, #104]	; (800915c <ShortestWay+0x17c4>)
 80090f4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80090f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80090fc:	4a16      	ldr	r2, [pc, #88]	; (8009158 <ShortestWay+0x17c0>)
 80090fe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009102:	330c      	adds	r3, #12
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4413      	add	r3, r2
 8009108:	88d9      	ldrh	r1, [r3, #6]
 800910a:	4a14      	ldr	r2, [pc, #80]	; (800915c <ShortestWay+0x17c4>)
 800910c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009110:	330c      	adds	r3, #12
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	4413      	add	r3, r2
 8009116:	460a      	mov	r2, r1
 8009118:	80da      	strh	r2, [r3, #6]
		t++;
 800911a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800911e:	3301      	adds	r3, #1
 8009120:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (t <= 14) {
 8009124:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009128:	2b0e      	cmp	r3, #14
 800912a:	dddd      	ble.n	80090e8 <ShortestWay+0x1750>
	}

}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	f207 4734 	addw	r7, r7, #1076	; 0x434
 8009134:	46bd      	mov	sp, r7
 8009136:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800913a:	b004      	add	sp, #16
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000f70 	.word	0x20000f70
 8009144:	20000f74 	.word	0x20000f74
 8009148:	459c4000 	.word	0x459c4000
 800914c:	43c80000 	.word	0x43c80000
 8009150:	00000000 	.word	0x00000000
 8009154:	43340000 	.word	0x43340000
 8009158:	20000ff8 	.word	0x20000ff8
 800915c:	20000f80 	.word	0x20000f80
 8009160:	d70a3d70 	.word	0xd70a3d70
 8009164:	405fd0a3 	.word	0x405fd0a3

08009168 <update_wall>:

//kokomade

}

void update_wall(void){
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0


	switch (direction) {
 800916c:	4b5e      	ldr	r3, [pc, #376]	; (80092e8 <update_wall+0x180>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3b01      	subs	r3, #1
 8009172:	2b03      	cmp	r3, #3
 8009174:	f200 82f7 	bhi.w	8009766 <update_wall+0x5fe>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <update_wall+0x18>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009191 	.word	0x08009191
 8009184:	08009305 	.word	0x08009305
 8009188:	0800947d 	.word	0x0800947d
 800918c:	080095f5 	.word	0x080095f5
	case 1:
		if (y <= 14) {
 8009190:	4b56      	ldr	r3, [pc, #344]	; (80092ec <update_wall+0x184>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b0e      	cmp	r3, #14
 8009196:	dc35      	bgt.n	8009204 <update_wall+0x9c>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8009198:	4b54      	ldr	r3, [pc, #336]	; (80092ec <update_wall+0x184>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a54      	ldr	r2, [pc, #336]	; (80092f0 <update_wall+0x188>)
 800919e:	332c      	adds	r3, #44	; 0x2c
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4413      	add	r3, r2
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	b21a      	sxth	r2, r3
 80091a8:	4b52      	ldr	r3, [pc, #328]	; (80092f4 <update_wall+0x18c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2101      	movs	r1, #1
 80091ae:	fa01 f303 	lsl.w	r3, r1, r3
 80091b2:	b21b      	sxth	r3, r3
 80091b4:	4313      	orrs	r3, r2
 80091b6:	b21a      	sxth	r2, r3
 80091b8:	4b4c      	ldr	r3, [pc, #304]	; (80092ec <update_wall+0x184>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	b291      	uxth	r1, r2
 80091be:	4a4c      	ldr	r2, [pc, #304]	; (80092f0 <update_wall+0x188>)
 80091c0:	332c      	adds	r3, #44	; 0x2c
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	460a      	mov	r2, r1
 80091c8:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80091ca:	4b4b      	ldr	r3, [pc, #300]	; (80092f8 <update_wall+0x190>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d018      	beq.n	8009204 <update_wall+0x9c>
 80091d2:	4b46      	ldr	r3, [pc, #280]	; (80092ec <update_wall+0x184>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a46      	ldr	r2, [pc, #280]	; (80092f0 <update_wall+0x188>)
 80091d8:	330c      	adds	r3, #12
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	88db      	ldrh	r3, [r3, #6]
 80091e0:	b21a      	sxth	r2, r3
 80091e2:	4b44      	ldr	r3, [pc, #272]	; (80092f4 <update_wall+0x18c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2101      	movs	r1, #1
 80091e8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	4313      	orrs	r3, r2
 80091f0:	b21a      	sxth	r2, r3
 80091f2:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <update_wall+0x184>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	b291      	uxth	r1, r2
 80091f8:	4a3d      	ldr	r2, [pc, #244]	; (80092f0 <update_wall+0x188>)
 80091fa:	330c      	adds	r3, #12
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4413      	add	r3, r2
 8009200:	460a      	mov	r2, r1
 8009202:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8009204:	4b3b      	ldr	r3, [pc, #236]	; (80092f4 <update_wall+0x18c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd34      	ble.n	8009276 <update_wall+0x10e>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 800920c:	4b39      	ldr	r3, [pc, #228]	; (80092f4 <update_wall+0x18c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	4a37      	ldr	r2, [pc, #220]	; (80092f0 <update_wall+0x188>)
 8009214:	331c      	adds	r3, #28
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	4413      	add	r3, r2
 800921a:	889b      	ldrh	r3, [r3, #4]
 800921c:	b21a      	sxth	r2, r3
 800921e:	4b33      	ldr	r3, [pc, #204]	; (80092ec <update_wall+0x184>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2101      	movs	r1, #1
 8009224:	fa01 f303 	lsl.w	r3, r1, r3
 8009228:	b21b      	sxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b21a      	sxth	r2, r3
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <update_wall+0x18c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3b01      	subs	r3, #1
 8009234:	b291      	uxth	r1, r2
 8009236:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <update_wall+0x188>)
 8009238:	331c      	adds	r3, #28
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	4413      	add	r3, r2
 800923e:	460a      	mov	r2, r1
 8009240:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8009242:	4b2e      	ldr	r3, [pc, #184]	; (80092fc <update_wall+0x194>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d015      	beq.n	8009276 <update_wall+0x10e>
 800924a:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <update_wall+0x18c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3b01      	subs	r3, #1
 8009250:	4a27      	ldr	r2, [pc, #156]	; (80092f0 <update_wall+0x188>)
 8009252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009256:	b21a      	sxth	r2, r3
 8009258:	4b24      	ldr	r3, [pc, #144]	; (80092ec <update_wall+0x184>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2101      	movs	r1, #1
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	b21b      	sxth	r3, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	b21a      	sxth	r2, r3
 8009268:	4b22      	ldr	r3, [pc, #136]	; (80092f4 <update_wall+0x18c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	b291      	uxth	r1, r2
 8009270:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <update_wall+0x188>)
 8009272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <update_wall+0x18c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b0e      	cmp	r3, #14
 800927c:	f300 826c 	bgt.w	8009758 <update_wall+0x5f0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8009280:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <update_wall+0x18c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1a      	ldr	r2, [pc, #104]	; (80092f0 <update_wall+0x188>)
 8009286:	331c      	adds	r3, #28
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4413      	add	r3, r2
 800928c:	889b      	ldrh	r3, [r3, #4]
 800928e:	b21a      	sxth	r2, r3
 8009290:	4b16      	ldr	r3, [pc, #88]	; (80092ec <update_wall+0x184>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2101      	movs	r1, #1
 8009296:	fa01 f303 	lsl.w	r3, r1, r3
 800929a:	b21b      	sxth	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b21a      	sxth	r2, r3
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <update_wall+0x18c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	b291      	uxth	r1, r2
 80092a6:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <update_wall+0x188>)
 80092a8:	331c      	adds	r3, #28
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	4413      	add	r3, r2
 80092ae:	460a      	mov	r2, r1
 80092b0:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 80092b2:	4b13      	ldr	r3, [pc, #76]	; (8009300 <update_wall+0x198>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 824e 	beq.w	8009758 <update_wall+0x5f0>
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <update_wall+0x18c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <update_wall+0x188>)
 80092c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c6:	b21a      	sxth	r2, r3
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <update_wall+0x184>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2101      	movs	r1, #1
 80092ce:	fa01 f303 	lsl.w	r3, r1, r3
 80092d2:	b21b      	sxth	r3, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	b21a      	sxth	r2, r3
 80092d8:	4b06      	ldr	r3, [pc, #24]	; (80092f4 <update_wall+0x18c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	b291      	uxth	r1, r2
 80092de:	4a04      	ldr	r2, [pc, #16]	; (80092f0 <update_wall+0x188>)
 80092e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 80092e4:	e238      	b.n	8009758 <update_wall+0x5f0>
 80092e6:	bf00      	nop
 80092e8:	20000f78 	.word	0x20000f78
 80092ec:	20000f74 	.word	0x20000f74
 80092f0:	20000f80 	.word	0x20000f80
 80092f4:	20000f70 	.word	0x20000f70
 80092f8:	20000f7c 	.word	0x20000f7c
 80092fc:	20000f7e 	.word	0x20000f7e
 8009300:	20000f7d 	.word	0x20000f7d
	case 2:
		if (x <= 14) {
 8009304:	4b57      	ldr	r3, [pc, #348]	; (8009464 <update_wall+0x2fc>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b0e      	cmp	r3, #14
 800930a:	dc30      	bgt.n	800936e <update_wall+0x206>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 800930c:	4b55      	ldr	r3, [pc, #340]	; (8009464 <update_wall+0x2fc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a55      	ldr	r2, [pc, #340]	; (8009468 <update_wall+0x300>)
 8009312:	331c      	adds	r3, #28
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	4413      	add	r3, r2
 8009318:	889b      	ldrh	r3, [r3, #4]
 800931a:	b21a      	sxth	r2, r3
 800931c:	4b53      	ldr	r3, [pc, #332]	; (800946c <update_wall+0x304>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2101      	movs	r1, #1
 8009322:	fa01 f303 	lsl.w	r3, r1, r3
 8009326:	b21b      	sxth	r3, r3
 8009328:	4313      	orrs	r3, r2
 800932a:	b21a      	sxth	r2, r3
 800932c:	4b4d      	ldr	r3, [pc, #308]	; (8009464 <update_wall+0x2fc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	b291      	uxth	r1, r2
 8009332:	4a4d      	ldr	r2, [pc, #308]	; (8009468 <update_wall+0x300>)
 8009334:	331c      	adds	r3, #28
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	4413      	add	r3, r2
 800933a:	460a      	mov	r2, r1
 800933c:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 800933e:	4b4c      	ldr	r3, [pc, #304]	; (8009470 <update_wall+0x308>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d013      	beq.n	800936e <update_wall+0x206>
 8009346:	4b47      	ldr	r3, [pc, #284]	; (8009464 <update_wall+0x2fc>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a47      	ldr	r2, [pc, #284]	; (8009468 <update_wall+0x300>)
 800934c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009350:	b21a      	sxth	r2, r3
 8009352:	4b46      	ldr	r3, [pc, #280]	; (800946c <update_wall+0x304>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2101      	movs	r1, #1
 8009358:	fa01 f303 	lsl.w	r3, r1, r3
 800935c:	b21b      	sxth	r3, r3
 800935e:	4313      	orrs	r3, r2
 8009360:	b21a      	sxth	r2, r3
 8009362:	4b40      	ldr	r3, [pc, #256]	; (8009464 <update_wall+0x2fc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	b291      	uxth	r1, r2
 8009368:	4a3f      	ldr	r2, [pc, #252]	; (8009468 <update_wall+0x300>)
 800936a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 800936e:	4b3f      	ldr	r3, [pc, #252]	; (800946c <update_wall+0x304>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b0e      	cmp	r3, #14
 8009374:	dc35      	bgt.n	80093e2 <update_wall+0x27a>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8009376:	4b3d      	ldr	r3, [pc, #244]	; (800946c <update_wall+0x304>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a3b      	ldr	r2, [pc, #236]	; (8009468 <update_wall+0x300>)
 800937c:	332c      	adds	r3, #44	; 0x2c
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	4413      	add	r3, r2
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b21a      	sxth	r2, r3
 8009386:	4b37      	ldr	r3, [pc, #220]	; (8009464 <update_wall+0x2fc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2101      	movs	r1, #1
 800938c:	fa01 f303 	lsl.w	r3, r1, r3
 8009390:	b21b      	sxth	r3, r3
 8009392:	4313      	orrs	r3, r2
 8009394:	b21a      	sxth	r2, r3
 8009396:	4b35      	ldr	r3, [pc, #212]	; (800946c <update_wall+0x304>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	b291      	uxth	r1, r2
 800939c:	4a32      	ldr	r2, [pc, #200]	; (8009468 <update_wall+0x300>)
 800939e:	332c      	adds	r3, #44	; 0x2c
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4413      	add	r3, r2
 80093a4:	460a      	mov	r2, r1
 80093a6:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80093a8:	4b32      	ldr	r3, [pc, #200]	; (8009474 <update_wall+0x30c>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d018      	beq.n	80093e2 <update_wall+0x27a>
 80093b0:	4b2e      	ldr	r3, [pc, #184]	; (800946c <update_wall+0x304>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a2c      	ldr	r2, [pc, #176]	; (8009468 <update_wall+0x300>)
 80093b6:	330c      	adds	r3, #12
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	88db      	ldrh	r3, [r3, #6]
 80093be:	b21a      	sxth	r2, r3
 80093c0:	4b28      	ldr	r3, [pc, #160]	; (8009464 <update_wall+0x2fc>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2101      	movs	r1, #1
 80093c6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ca:	b21b      	sxth	r3, r3
 80093cc:	4313      	orrs	r3, r2
 80093ce:	b21a      	sxth	r2, r3
 80093d0:	4b26      	ldr	r3, [pc, #152]	; (800946c <update_wall+0x304>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b291      	uxth	r1, r2
 80093d6:	4a24      	ldr	r2, [pc, #144]	; (8009468 <update_wall+0x300>)
 80093d8:	330c      	adds	r3, #12
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	4413      	add	r3, r2
 80093de:	460a      	mov	r2, r1
 80093e0:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 80093e2:	4b22      	ldr	r3, [pc, #136]	; (800946c <update_wall+0x304>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f340 81b8 	ble.w	800975c <update_wall+0x5f4>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80093ec:	4b1f      	ldr	r3, [pc, #124]	; (800946c <update_wall+0x304>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	4a1d      	ldr	r2, [pc, #116]	; (8009468 <update_wall+0x300>)
 80093f4:	332c      	adds	r3, #44	; 0x2c
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4413      	add	r3, r2
 80093fa:	885b      	ldrh	r3, [r3, #2]
 80093fc:	b21a      	sxth	r2, r3
 80093fe:	4b19      	ldr	r3, [pc, #100]	; (8009464 <update_wall+0x2fc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2101      	movs	r1, #1
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	b21b      	sxth	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	b21a      	sxth	r2, r3
 800940e:	4b17      	ldr	r3, [pc, #92]	; (800946c <update_wall+0x304>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	b291      	uxth	r1, r2
 8009416:	4a14      	ldr	r2, [pc, #80]	; (8009468 <update_wall+0x300>)
 8009418:	332c      	adds	r3, #44	; 0x2c
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	4413      	add	r3, r2
 800941e:	460a      	mov	r2, r1
 8009420:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <update_wall+0x310>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 8198 	beq.w	800975c <update_wall+0x5f4>
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <update_wall+0x304>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <update_wall+0x300>)
 8009434:	330c      	adds	r3, #12
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	4413      	add	r3, r2
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	b21a      	sxth	r2, r3
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <update_wall+0x2fc>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2101      	movs	r1, #1
 8009444:	fa01 f303 	lsl.w	r3, r1, r3
 8009448:	b21b      	sxth	r3, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	b21a      	sxth	r2, r3
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <update_wall+0x304>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3b01      	subs	r3, #1
 8009454:	b291      	uxth	r1, r2
 8009456:	4a04      	ldr	r2, [pc, #16]	; (8009468 <update_wall+0x300>)
 8009458:	330c      	adds	r3, #12
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	4413      	add	r3, r2
 800945e:	460a      	mov	r2, r1
 8009460:	80da      	strh	r2, [r3, #6]
		}

		break;
 8009462:	e17b      	b.n	800975c <update_wall+0x5f4>
 8009464:	20000f70 	.word	0x20000f70
 8009468:	20000f80 	.word	0x20000f80
 800946c:	20000f74 	.word	0x20000f74
 8009470:	20000f7c 	.word	0x20000f7c
 8009474:	20000f7e 	.word	0x20000f7e
 8009478:	20000f7d 	.word	0x20000f7d
	case 3:
		if (y >= 1) {
 800947c:	4b57      	ldr	r3, [pc, #348]	; (80095dc <update_wall+0x474>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dd39      	ble.n	80094f8 <update_wall+0x390>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8009484:	4b55      	ldr	r3, [pc, #340]	; (80095dc <update_wall+0x474>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3b01      	subs	r3, #1
 800948a:	4a55      	ldr	r2, [pc, #340]	; (80095e0 <update_wall+0x478>)
 800948c:	332c      	adds	r3, #44	; 0x2c
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	885b      	ldrh	r3, [r3, #2]
 8009494:	b21a      	sxth	r2, r3
 8009496:	4b53      	ldr	r3, [pc, #332]	; (80095e4 <update_wall+0x47c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2101      	movs	r1, #1
 800949c:	fa01 f303 	lsl.w	r3, r1, r3
 80094a0:	b21b      	sxth	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b21a      	sxth	r2, r3
 80094a6:	4b4d      	ldr	r3, [pc, #308]	; (80095dc <update_wall+0x474>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b291      	uxth	r1, r2
 80094ae:	4a4c      	ldr	r2, [pc, #304]	; (80095e0 <update_wall+0x478>)
 80094b0:	332c      	adds	r3, #44	; 0x2c
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	4413      	add	r3, r2
 80094b6:	460a      	mov	r2, r1
 80094b8:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80094ba:	4b4b      	ldr	r3, [pc, #300]	; (80095e8 <update_wall+0x480>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d01a      	beq.n	80094f8 <update_wall+0x390>
 80094c2:	4b46      	ldr	r3, [pc, #280]	; (80095dc <update_wall+0x474>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a45      	ldr	r2, [pc, #276]	; (80095e0 <update_wall+0x478>)
 80094ca:	330c      	adds	r3, #12
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4413      	add	r3, r2
 80094d0:	88db      	ldrh	r3, [r3, #6]
 80094d2:	b21a      	sxth	r2, r3
 80094d4:	4b43      	ldr	r3, [pc, #268]	; (80095e4 <update_wall+0x47c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2101      	movs	r1, #1
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	b21b      	sxth	r3, r3
 80094e0:	4313      	orrs	r3, r2
 80094e2:	b21a      	sxth	r2, r3
 80094e4:	4b3d      	ldr	r3, [pc, #244]	; (80095dc <update_wall+0x474>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b291      	uxth	r1, r2
 80094ec:	4a3c      	ldr	r2, [pc, #240]	; (80095e0 <update_wall+0x478>)
 80094ee:	330c      	adds	r3, #12
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	4413      	add	r3, r2
 80094f4:	460a      	mov	r2, r1
 80094f6:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 80094f8:	4b3a      	ldr	r3, [pc, #232]	; (80095e4 <update_wall+0x47c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b0e      	cmp	r3, #14
 80094fe:	dc30      	bgt.n	8009562 <update_wall+0x3fa>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8009500:	4b38      	ldr	r3, [pc, #224]	; (80095e4 <update_wall+0x47c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a36      	ldr	r2, [pc, #216]	; (80095e0 <update_wall+0x478>)
 8009506:	331c      	adds	r3, #28
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	889b      	ldrh	r3, [r3, #4]
 800950e:	b21a      	sxth	r2, r3
 8009510:	4b32      	ldr	r3, [pc, #200]	; (80095dc <update_wall+0x474>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f303 	lsl.w	r3, r1, r3
 800951a:	b21b      	sxth	r3, r3
 800951c:	4313      	orrs	r3, r2
 800951e:	b21a      	sxth	r2, r3
 8009520:	4b30      	ldr	r3, [pc, #192]	; (80095e4 <update_wall+0x47c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	b291      	uxth	r1, r2
 8009526:	4a2e      	ldr	r2, [pc, #184]	; (80095e0 <update_wall+0x478>)
 8009528:	331c      	adds	r3, #28
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	4413      	add	r3, r2
 800952e:	460a      	mov	r2, r1
 8009530:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8009532:	4b2e      	ldr	r3, [pc, #184]	; (80095ec <update_wall+0x484>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d013      	beq.n	8009562 <update_wall+0x3fa>
 800953a:	4b2a      	ldr	r3, [pc, #168]	; (80095e4 <update_wall+0x47c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a28      	ldr	r2, [pc, #160]	; (80095e0 <update_wall+0x478>)
 8009540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009544:	b21a      	sxth	r2, r3
 8009546:	4b25      	ldr	r3, [pc, #148]	; (80095dc <update_wall+0x474>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2101      	movs	r1, #1
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	b21b      	sxth	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b21a      	sxth	r2, r3
 8009556:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <update_wall+0x47c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	b291      	uxth	r1, r2
 800955c:	4a20      	ldr	r2, [pc, #128]	; (80095e0 <update_wall+0x478>)
 800955e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8009562:	4b20      	ldr	r3, [pc, #128]	; (80095e4 <update_wall+0x47c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f340 80fa 	ble.w	8009760 <update_wall+0x5f8>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 800956c:	4b1d      	ldr	r3, [pc, #116]	; (80095e4 <update_wall+0x47c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3b01      	subs	r3, #1
 8009572:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <update_wall+0x478>)
 8009574:	331c      	adds	r3, #28
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	889b      	ldrh	r3, [r3, #4]
 800957c:	b21a      	sxth	r2, r3
 800957e:	4b17      	ldr	r3, [pc, #92]	; (80095dc <update_wall+0x474>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2101      	movs	r1, #1
 8009584:	fa01 f303 	lsl.w	r3, r1, r3
 8009588:	b21b      	sxth	r3, r3
 800958a:	4313      	orrs	r3, r2
 800958c:	b21a      	sxth	r2, r3
 800958e:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <update_wall+0x47c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3b01      	subs	r3, #1
 8009594:	b291      	uxth	r1, r2
 8009596:	4a12      	ldr	r2, [pc, #72]	; (80095e0 <update_wall+0x478>)
 8009598:	331c      	adds	r3, #28
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	4413      	add	r3, r2
 800959e:	460a      	mov	r2, r1
 80095a0:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80095a2:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <update_wall+0x488>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80da 	beq.w	8009760 <update_wall+0x5f8>
 80095ac:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <update_wall+0x47c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4a0b      	ldr	r2, [pc, #44]	; (80095e0 <update_wall+0x478>)
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	b21a      	sxth	r2, r3
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <update_wall+0x474>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2101      	movs	r1, #1
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	b21a      	sxth	r2, r3
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <update_wall+0x47c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b291      	uxth	r1, r2
 80095d2:	4a03      	ldr	r2, [pc, #12]	; (80095e0 <update_wall+0x478>)
 80095d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 80095d8:	e0c2      	b.n	8009760 <update_wall+0x5f8>
 80095da:	bf00      	nop
 80095dc:	20000f74 	.word	0x20000f74
 80095e0:	20000f80 	.word	0x20000f80
 80095e4:	20000f70 	.word	0x20000f70
 80095e8:	20000f7c 	.word	0x20000f7c
 80095ec:	20000f7e 	.word	0x20000f7e
 80095f0:	20000f7d 	.word	0x20000f7d
	case 4:
		if (x >= 1) {
 80095f4:	4b5e      	ldr	r3, [pc, #376]	; (8009770 <update_wall+0x608>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dd34      	ble.n	8009666 <update_wall+0x4fe>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80095fc:	4b5c      	ldr	r3, [pc, #368]	; (8009770 <update_wall+0x608>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	4a5c      	ldr	r2, [pc, #368]	; (8009774 <update_wall+0x60c>)
 8009604:	331c      	adds	r3, #28
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	889b      	ldrh	r3, [r3, #4]
 800960c:	b21a      	sxth	r2, r3
 800960e:	4b5a      	ldr	r3, [pc, #360]	; (8009778 <update_wall+0x610>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2101      	movs	r1, #1
 8009614:	fa01 f303 	lsl.w	r3, r1, r3
 8009618:	b21b      	sxth	r3, r3
 800961a:	4313      	orrs	r3, r2
 800961c:	b21a      	sxth	r2, r3
 800961e:	4b54      	ldr	r3, [pc, #336]	; (8009770 <update_wall+0x608>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3b01      	subs	r3, #1
 8009624:	b291      	uxth	r1, r2
 8009626:	4a53      	ldr	r2, [pc, #332]	; (8009774 <update_wall+0x60c>)
 8009628:	331c      	adds	r3, #28
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	4413      	add	r3, r2
 800962e:	460a      	mov	r2, r1
 8009630:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8009632:	4b52      	ldr	r3, [pc, #328]	; (800977c <update_wall+0x614>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d015      	beq.n	8009666 <update_wall+0x4fe>
 800963a:	4b4d      	ldr	r3, [pc, #308]	; (8009770 <update_wall+0x608>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	4a4c      	ldr	r2, [pc, #304]	; (8009774 <update_wall+0x60c>)
 8009642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009646:	b21a      	sxth	r2, r3
 8009648:	4b4b      	ldr	r3, [pc, #300]	; (8009778 <update_wall+0x610>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2101      	movs	r1, #1
 800964e:	fa01 f303 	lsl.w	r3, r1, r3
 8009652:	b21b      	sxth	r3, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	b21a      	sxth	r2, r3
 8009658:	4b45      	ldr	r3, [pc, #276]	; (8009770 <update_wall+0x608>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3b01      	subs	r3, #1
 800965e:	b291      	uxth	r1, r2
 8009660:	4a44      	ldr	r2, [pc, #272]	; (8009774 <update_wall+0x60c>)
 8009662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8009666:	4b44      	ldr	r3, [pc, #272]	; (8009778 <update_wall+0x610>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	dd39      	ble.n	80096e2 <update_wall+0x57a>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 800966e:	4b42      	ldr	r3, [pc, #264]	; (8009778 <update_wall+0x610>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3b01      	subs	r3, #1
 8009674:	4a3f      	ldr	r2, [pc, #252]	; (8009774 <update_wall+0x60c>)
 8009676:	332c      	adds	r3, #44	; 0x2c
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	4413      	add	r3, r2
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	b21a      	sxth	r2, r3
 8009680:	4b3b      	ldr	r3, [pc, #236]	; (8009770 <update_wall+0x608>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	b21b      	sxth	r3, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	b21a      	sxth	r2, r3
 8009690:	4b39      	ldr	r3, [pc, #228]	; (8009778 <update_wall+0x610>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3b01      	subs	r3, #1
 8009696:	b291      	uxth	r1, r2
 8009698:	4a36      	ldr	r2, [pc, #216]	; (8009774 <update_wall+0x60c>)
 800969a:	332c      	adds	r3, #44	; 0x2c
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4413      	add	r3, r2
 80096a0:	460a      	mov	r2, r1
 80096a2:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80096a4:	4b36      	ldr	r3, [pc, #216]	; (8009780 <update_wall+0x618>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01a      	beq.n	80096e2 <update_wall+0x57a>
 80096ac:	4b32      	ldr	r3, [pc, #200]	; (8009778 <update_wall+0x610>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a30      	ldr	r2, [pc, #192]	; (8009774 <update_wall+0x60c>)
 80096b4:	330c      	adds	r3, #12
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	88db      	ldrh	r3, [r3, #6]
 80096bc:	b21a      	sxth	r2, r3
 80096be:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <update_wall+0x608>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2101      	movs	r1, #1
 80096c4:	fa01 f303 	lsl.w	r3, r1, r3
 80096c8:	b21b      	sxth	r3, r3
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	4b2a      	ldr	r3, [pc, #168]	; (8009778 <update_wall+0x610>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b291      	uxth	r1, r2
 80096d6:	4a27      	ldr	r2, [pc, #156]	; (8009774 <update_wall+0x60c>)
 80096d8:	330c      	adds	r3, #12
 80096da:	005b      	lsls	r3, r3, #1
 80096dc:	4413      	add	r3, r2
 80096de:	460a      	mov	r2, r1
 80096e0:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 80096e2:	4b25      	ldr	r3, [pc, #148]	; (8009778 <update_wall+0x610>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b0e      	cmp	r3, #14
 80096e8:	dc3c      	bgt.n	8009764 <update_wall+0x5fc>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80096ea:	4b23      	ldr	r3, [pc, #140]	; (8009778 <update_wall+0x610>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a21      	ldr	r2, [pc, #132]	; (8009774 <update_wall+0x60c>)
 80096f0:	332c      	adds	r3, #44	; 0x2c
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	885b      	ldrh	r3, [r3, #2]
 80096f8:	b21a      	sxth	r2, r3
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <update_wall+0x608>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2101      	movs	r1, #1
 8009700:	fa01 f303 	lsl.w	r3, r1, r3
 8009704:	b21b      	sxth	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b21a      	sxth	r2, r3
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <update_wall+0x610>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	b291      	uxth	r1, r2
 8009710:	4a18      	ldr	r2, [pc, #96]	; (8009774 <update_wall+0x60c>)
 8009712:	332c      	adds	r3, #44	; 0x2c
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	4413      	add	r3, r2
 8009718:	460a      	mov	r2, r1
 800971a:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 800971c:	4b19      	ldr	r3, [pc, #100]	; (8009784 <update_wall+0x61c>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01f      	beq.n	8009764 <update_wall+0x5fc>
 8009724:	4b14      	ldr	r3, [pc, #80]	; (8009778 <update_wall+0x610>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a12      	ldr	r2, [pc, #72]	; (8009774 <update_wall+0x60c>)
 800972a:	330c      	adds	r3, #12
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4413      	add	r3, r2
 8009730:	88db      	ldrh	r3, [r3, #6]
 8009732:	b21a      	sxth	r2, r3
 8009734:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <update_wall+0x608>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2101      	movs	r1, #1
 800973a:	fa01 f303 	lsl.w	r3, r1, r3
 800973e:	b21b      	sxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b21a      	sxth	r2, r3
 8009744:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <update_wall+0x610>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	b291      	uxth	r1, r2
 800974a:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <update_wall+0x60c>)
 800974c:	330c      	adds	r3, #12
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4413      	add	r3, r2
 8009752:	460a      	mov	r2, r1
 8009754:	80da      	strh	r2, [r3, #6]
		}

		break;
 8009756:	e005      	b.n	8009764 <update_wall+0x5fc>
		break;
 8009758:	bf00      	nop
 800975a:	e004      	b.n	8009766 <update_wall+0x5fe>
		break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <update_wall+0x5fe>
		break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <update_wall+0x5fe>
		break;
 8009764:	bf00      	nop

	}


}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	20000f70 	.word	0x20000f70
 8009774:	20000f80 	.word	0x20000f80
 8009778:	20000f74 	.word	0x20000f74
 800977c:	20000f7c 	.word	0x20000f7c
 8009780:	20000f7e 	.word	0x20000f7e
 8009784:	20000f7d 	.word	0x20000f7d

08009788 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count){
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8009796:	4b49      	ldr	r3, [pc, #292]	; (80098bc <search_AroundWalkCount+0x134>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b0e      	cmp	r3, #14
 800979c:	dd02      	ble.n	80097a4 <search_AroundWalkCount+0x1c>
 800979e:	23ff      	movs	r3, #255	; 0xff
 80097a0:	82fb      	strh	r3, [r7, #22]
 80097a2:	e00a      	b.n	80097ba <search_AroundWalkCount+0x32>
	else {north_count = walk_count[16 * x + y + 1];}
 80097a4:	4b46      	ldr	r3, [pc, #280]	; (80098c0 <search_AroundWalkCount+0x138>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	011a      	lsls	r2, r3, #4
 80097aa:	4b44      	ldr	r3, [pc, #272]	; (80098bc <search_AroundWalkCount+0x134>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4413      	add	r3, r2
 80097b0:	3301      	adds	r3, #1
 80097b2:	4a44      	ldr	r2, [pc, #272]	; (80098c4 <search_AroundWalkCount+0x13c>)
 80097b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b8:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80097ba:	4b41      	ldr	r3, [pc, #260]	; (80098c0 <search_AroundWalkCount+0x138>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b0e      	cmp	r3, #14
 80097c0:	dd02      	ble.n	80097c8 <search_AroundWalkCount+0x40>
 80097c2:	23ff      	movs	r3, #255	; 0xff
 80097c4:	82bb      	strh	r3, [r7, #20]
 80097c6:	e00a      	b.n	80097de <search_AroundWalkCount+0x56>
	else {east_count = walk_count[16 * (x + 1) + y];}
 80097c8:	4b3d      	ldr	r3, [pc, #244]	; (80098c0 <search_AroundWalkCount+0x138>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	011a      	lsls	r2, r3, #4
 80097d0:	4b3a      	ldr	r3, [pc, #232]	; (80098bc <search_AroundWalkCount+0x134>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a3b      	ldr	r2, [pc, #236]	; (80098c4 <search_AroundWalkCount+0x13c>)
 80097d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097dc:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <search_AroundWalkCount+0x134>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc02      	bgt.n	80097ec <search_AroundWalkCount+0x64>
 80097e6:	23ff      	movs	r3, #255	; 0xff
 80097e8:	827b      	strh	r3, [r7, #18]
 80097ea:	e00a      	b.n	8009802 <search_AroundWalkCount+0x7a>
	else {south_count = walk_count[16 * x + y - 1];}
 80097ec:	4b34      	ldr	r3, [pc, #208]	; (80098c0 <search_AroundWalkCount+0x138>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	011a      	lsls	r2, r3, #4
 80097f2:	4b32      	ldr	r3, [pc, #200]	; (80098bc <search_AroundWalkCount+0x134>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4413      	add	r3, r2
 80097f8:	3b01      	subs	r3, #1
 80097fa:	4a32      	ldr	r2, [pc, #200]	; (80098c4 <search_AroundWalkCount+0x13c>)
 80097fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009800:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8009802:	4b2f      	ldr	r3, [pc, #188]	; (80098c0 <search_AroundWalkCount+0x138>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	dc02      	bgt.n	8009810 <search_AroundWalkCount+0x88>
 800980a:	23ff      	movs	r3, #255	; 0xff
 800980c:	823b      	strh	r3, [r7, #16]
 800980e:	e00a      	b.n	8009826 <search_AroundWalkCount+0x9e>
	else {west_count = walk_count[16 * (x - 1) + y];}
 8009810:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <search_AroundWalkCount+0x138>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3b01      	subs	r3, #1
 8009816:	011a      	lsls	r2, r3, #4
 8009818:	4b28      	ldr	r3, [pc, #160]	; (80098bc <search_AroundWalkCount+0x134>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4413      	add	r3, r2
 800981e:	4a29      	ldr	r2, [pc, #164]	; (80098c4 <search_AroundWalkCount+0x13c>)
 8009820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009824:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8009826:	4b28      	ldr	r3, [pc, #160]	; (80098c8 <search_AroundWalkCount+0x140>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3b01      	subs	r3, #1
 800982c:	2b03      	cmp	r3, #3
 800982e:	d83f      	bhi.n	80098b0 <search_AroundWalkCount+0x128>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <search_AroundWalkCount+0xb0>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	08009863 	.word	0x08009863
 8009840:	0800987d 	.word	0x0800987d
 8009844:	08009897 	.word	0x08009897
	case 1:
		*front_count = north_count;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8afa      	ldrh	r2, [r7, #22]
 800984c:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	8aba      	ldrh	r2, [r7, #20]
 8009852:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8a7a      	ldrh	r2, [r7, #18]
 8009858:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	8a3a      	ldrh	r2, [r7, #16]
 800985e:	801a      	strh	r2, [r3, #0]
		break;
 8009860:	e026      	b.n	80098b0 <search_AroundWalkCount+0x128>
	case 2:
		*front_count = east_count;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8aba      	ldrh	r2, [r7, #20]
 8009866:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	8a7a      	ldrh	r2, [r7, #18]
 800986c:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	8a3a      	ldrh	r2, [r7, #16]
 8009872:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	8afa      	ldrh	r2, [r7, #22]
 8009878:	801a      	strh	r2, [r3, #0]
		break;
 800987a:	e019      	b.n	80098b0 <search_AroundWalkCount+0x128>
	case 3:
		*front_count = south_count;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8a7a      	ldrh	r2, [r7, #18]
 8009880:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	8a3a      	ldrh	r2, [r7, #16]
 8009886:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8afa      	ldrh	r2, [r7, #22]
 800988c:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	8aba      	ldrh	r2, [r7, #20]
 8009892:	801a      	strh	r2, [r3, #0]
		break;
 8009894:	e00c      	b.n	80098b0 <search_AroundWalkCount+0x128>
	case 4:
		*front_count = west_count;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8a3a      	ldrh	r2, [r7, #16]
 800989a:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	8afa      	ldrh	r2, [r7, #22]
 80098a0:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	8aba      	ldrh	r2, [r7, #20]
 80098a6:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	8a7a      	ldrh	r2, [r7, #18]
 80098ac:	801a      	strh	r2, [r3, #0]
		break;
 80098ae:	bf00      	nop

	}


}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	20000f74 	.word	0x20000f74
 80098c0:	20000f70 	.word	0x20000f70
 80098c4:	20001070 	.word	0x20001070
 80098c8:	20000f78 	.word	0x20000f78

080098cc <maze_maker0>:



void maze_maker0(_Bool WallUpdataMode,_Bool WalkUpdataMode) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	460a      	mov	r2, r1
 80098d6:	71fb      	strb	r3, [r7, #7]
 80098d8:	4613      	mov	r3, r2
 80098da:	71bb      	strb	r3, [r7, #6]
	if(WallUpdataMode){
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <maze_maker0+0x1a>
	update_wall();
 80098e2:	f7ff fc41 	bl	8009168 <update_wall>
	}

	if(WalkUpdataMode){
 80098e6:	79bb      	ldrb	r3, [r7, #6]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 80e2 	beq.w	8009ab2 <maze_maker0+0x1e6>
//	歩数マップを作成　*************************************
	int tt = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
	while (tt <= 255) {
 80098f2:	e007      	b.n	8009904 <maze_maker0+0x38>
		walk_count[tt] = 255;
 80098f4:	4a71      	ldr	r2, [pc, #452]	; (8009abc <maze_maker0+0x1f0>)
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	21ff      	movs	r1, #255	; 0xff
 80098fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	3301      	adds	r3, #1
 8009902:	61fb      	str	r3, [r7, #28]
	while (tt <= 255) {
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2bff      	cmp	r3, #255	; 0xff
 8009908:	ddf4      	ble.n	80098f4 <maze_maker0+0x28>
	}
//　ゴール座標の歩数を0にする
	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 800990a:	4b6c      	ldr	r3, [pc, #432]	; (8009abc <maze_maker0+0x1f0>)
 800990c:	2200      	movs	r2, #0
 800990e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8009912:	4b6a      	ldr	r3, [pc, #424]	; (8009abc <maze_maker0+0x1f0>)
 8009914:	2200      	movs	r2, #0
 8009916:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 800991a:	4b68      	ldr	r3, [pc, #416]	; (8009abc <maze_maker0+0x1f0>)
 800991c:	2200      	movs	r2, #0
 800991e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8009922:	4b66      	ldr	r3, [pc, #408]	; (8009abc <maze_maker0+0x1f0>)
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	unsigned short coordinate;
	unsigned short count_number = 1;
 800992a:	2301      	movs	r3, #1
 800992c:	833b      	strh	r3, [r7, #24]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	while (count_number <= 255) {
 800992e:	e0ba      	b.n	8009aa6 <maze_maker0+0x1da>
		coordinate = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	837b      	strh	r3, [r7, #26]
		while (coordinate <= 255) {
 8009934:	e0ab      	b.n	8009a8e <maze_maker0+0x1c2>
			if (walk_count[coordinate] == count_number - 1) {
 8009936:	8b7b      	ldrh	r3, [r7, #26]
 8009938:	4a60      	ldr	r2, [pc, #384]	; (8009abc <maze_maker0+0x1f0>)
 800993a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993e:	461a      	mov	r2, r3
 8009940:	8b3b      	ldrh	r3, [r7, #24]
 8009942:	3b01      	subs	r3, #1
 8009944:	429a      	cmp	r2, r3
 8009946:	f040 809c 	bne.w	8009a82 <maze_maker0+0x1b6>
				Xcoordinate = (coordinate & 0xf0) >> 4;
 800994a:	8b7b      	ldrh	r3, [r7, #26]
 800994c:	111b      	asrs	r3, r3, #4
 800994e:	b29b      	uxth	r3, r3
 8009950:	f003 030f 	and.w	r3, r3, #15
 8009954:	81fb      	strh	r3, [r7, #14]
				Ycoordinate = coordinate & 0x0f;
 8009956:	8b7b      	ldrh	r3, [r7, #26]
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	81bb      	strh	r3, [r7, #12]

//壁情報のときに使う

				if (Ycoordinate <= 14) {
 800995e:	89bb      	ldrh	r3, [r7, #12]
 8009960:	2b0e      	cmp	r3, #14
 8009962:	d80e      	bhi.n	8009982 <maze_maker0+0xb6>
					wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8009964:	89bb      	ldrh	r3, [r7, #12]
 8009966:	4a56      	ldr	r2, [pc, #344]	; (8009ac0 <maze_maker0+0x1f4>)
 8009968:	330c      	adds	r3, #12
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	88db      	ldrh	r3, [r3, #6]
 8009970:	b21a      	sxth	r2, r3
 8009972:	89fb      	ldrh	r3, [r7, #14]
 8009974:	2101      	movs	r1, #1
 8009976:	fa01 f303 	lsl.w	r3, r1, r3
 800997a:	b21b      	sxth	r3, r3
 800997c:	4013      	ands	r3, r2
 800997e:	b21b      	sxth	r3, r3
 8009980:	82fb      	strh	r3, [r7, #22]
				}
				if (Ycoordinate >= 1) {
 8009982:	89bb      	ldrh	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00f      	beq.n	80099a8 <maze_maker0+0xdc>
					wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009988:	89bb      	ldrh	r3, [r7, #12]
 800998a:	3b01      	subs	r3, #1
 800998c:	4a4c      	ldr	r2, [pc, #304]	; (8009ac0 <maze_maker0+0x1f4>)
 800998e:	330c      	adds	r3, #12
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	4413      	add	r3, r2
 8009994:	88db      	ldrh	r3, [r3, #6]
 8009996:	b21a      	sxth	r2, r3
 8009998:	89fb      	ldrh	r3, [r7, #14]
 800999a:	2101      	movs	r1, #1
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	4013      	ands	r3, r2
 80099a4:	b21b      	sxth	r3, r3
 80099a6:	82bb      	strh	r3, [r7, #20]
				}
				if (Xcoordinate <= 14) {
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	2b0e      	cmp	r3, #14
 80099ac:	d80c      	bhi.n	80099c8 <maze_maker0+0xfc>
					wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80099ae:	89fb      	ldrh	r3, [r7, #14]
 80099b0:	4a43      	ldr	r2, [pc, #268]	; (8009ac0 <maze_maker0+0x1f4>)
 80099b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b6:	b21a      	sxth	r2, r3
 80099b8:	89bb      	ldrh	r3, [r7, #12]
 80099ba:	2101      	movs	r1, #1
 80099bc:	fa01 f303 	lsl.w	r3, r1, r3
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	4013      	ands	r3, r2
 80099c4:	b21b      	sxth	r3, r3
 80099c6:	827b      	strh	r3, [r7, #18]
				}
				if (Xcoordinate >= 1) {
 80099c8:	89fb      	ldrh	r3, [r7, #14]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <maze_maker0+0x11e>
					wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80099ce:	89fb      	ldrh	r3, [r7, #14]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4a3b      	ldr	r2, [pc, #236]	; (8009ac0 <maze_maker0+0x1f4>)
 80099d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099d8:	b21a      	sxth	r2, r3
 80099da:	89bb      	ldrh	r3, [r7, #12]
 80099dc:	2101      	movs	r1, #1
 80099de:	fa01 f303 	lsl.w	r3, r1, r3
 80099e2:	b21b      	sxth	r3, r3
 80099e4:	4013      	ands	r3, r2
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	823b      	strh	r3, [r7, #16]
				}

				if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 80099ea:	8b7b      	ldrh	r3, [r7, #26]
 80099ec:	3301      	adds	r3, #1
 80099ee:	4a33      	ldr	r2, [pc, #204]	; (8009abc <maze_maker0+0x1f0>)
 80099f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f4:	2bfe      	cmp	r3, #254	; 0xfe
 80099f6:	d90b      	bls.n	8009a10 <maze_maker0+0x144>
 80099f8:	89bb      	ldrh	r3, [r7, #12]
 80099fa:	2b0f      	cmp	r3, #15
 80099fc:	d008      	beq.n	8009a10 <maze_maker0+0x144>
						|| wall_north >= 1) {
 80099fe:	8afb      	ldrh	r3, [r7, #22]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d105      	bne.n	8009a10 <maze_maker0+0x144>
				} else {
					walk_count[coordinate + 1] = count_number;
 8009a04:	8b7b      	ldrh	r3, [r7, #26]
 8009a06:	3301      	adds	r3, #1
 8009a08:	492c      	ldr	r1, [pc, #176]	; (8009abc <maze_maker0+0x1f0>)
 8009a0a:	8b3a      	ldrh	r2, [r7, #24]
 8009a0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 8009a10:	8b7b      	ldrh	r3, [r7, #26]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	4a29      	ldr	r2, [pc, #164]	; (8009abc <maze_maker0+0x1f0>)
 8009a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a1a:	2bfe      	cmp	r3, #254	; 0xfe
 8009a1c:	d90b      	bls.n	8009a36 <maze_maker0+0x16a>
 8009a1e:	89bb      	ldrh	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d008      	beq.n	8009a36 <maze_maker0+0x16a>
						|| wall_south >= 1) {
 8009a24:	8abb      	ldrh	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <maze_maker0+0x16a>
				} else {
					walk_count[coordinate - 1] = count_number;
 8009a2a:	8b7b      	ldrh	r3, [r7, #26]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	4923      	ldr	r1, [pc, #140]	; (8009abc <maze_maker0+0x1f0>)
 8009a30:	8b3a      	ldrh	r2, [r7, #24]
 8009a32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 8009a36:	8b7b      	ldrh	r3, [r7, #26]
 8009a38:	3310      	adds	r3, #16
 8009a3a:	4a20      	ldr	r2, [pc, #128]	; (8009abc <maze_maker0+0x1f0>)
 8009a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a40:	2bfe      	cmp	r3, #254	; 0xfe
 8009a42:	d90b      	bls.n	8009a5c <maze_maker0+0x190>
 8009a44:	89fb      	ldrh	r3, [r7, #14]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	d008      	beq.n	8009a5c <maze_maker0+0x190>
						|| wall_east >= 1) {
 8009a4a:	8a7b      	ldrh	r3, [r7, #18]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d105      	bne.n	8009a5c <maze_maker0+0x190>
				} else {
					walk_count[coordinate + 16] = count_number;
 8009a50:	8b7b      	ldrh	r3, [r7, #26]
 8009a52:	3310      	adds	r3, #16
 8009a54:	4919      	ldr	r1, [pc, #100]	; (8009abc <maze_maker0+0x1f0>)
 8009a56:	8b3a      	ldrh	r2, [r7, #24]
 8009a58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 8009a5c:	8b7b      	ldrh	r3, [r7, #26]
 8009a5e:	3b10      	subs	r3, #16
 8009a60:	4a16      	ldr	r2, [pc, #88]	; (8009abc <maze_maker0+0x1f0>)
 8009a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a66:	2bfe      	cmp	r3, #254	; 0xfe
 8009a68:	d90b      	bls.n	8009a82 <maze_maker0+0x1b6>
 8009a6a:	89fb      	ldrh	r3, [r7, #14]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d008      	beq.n	8009a82 <maze_maker0+0x1b6>
						|| wall_west >= 1) {
 8009a70:	8a3b      	ldrh	r3, [r7, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <maze_maker0+0x1b6>
				} else {
					walk_count[coordinate - 16] = count_number;
 8009a76:	8b7b      	ldrh	r3, [r7, #26]
 8009a78:	3b10      	subs	r3, #16
 8009a7a:	4910      	ldr	r1, [pc, #64]	; (8009abc <maze_maker0+0x1f0>)
 8009a7c:	8b3a      	ldrh	r2, [r7, #24]
 8009a7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

			}
			if (coordinate == 255) {break;}
 8009a82:	8b7b      	ldrh	r3, [r7, #26]
 8009a84:	2bff      	cmp	r3, #255	; 0xff
 8009a86:	d007      	beq.n	8009a98 <maze_maker0+0x1cc>
			coordinate++;
 8009a88:	8b7b      	ldrh	r3, [r7, #26]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	837b      	strh	r3, [r7, #26]
		while (coordinate <= 255) {
 8009a8e:	8b7b      	ldrh	r3, [r7, #26]
 8009a90:	2bff      	cmp	r3, #255	; 0xff
 8009a92:	f67f af50 	bls.w	8009936 <maze_maker0+0x6a>
 8009a96:	e000      	b.n	8009a9a <maze_maker0+0x1ce>
			if (coordinate == 255) {break;}
 8009a98:	bf00      	nop
		}
		if (count_number == 255) {break;}
 8009a9a:	8b3b      	ldrh	r3, [r7, #24]
 8009a9c:	2bff      	cmp	r3, #255	; 0xff
 8009a9e:	d007      	beq.n	8009ab0 <maze_maker0+0x1e4>
		count_number++;
 8009aa0:	8b3b      	ldrh	r3, [r7, #24]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	833b      	strh	r3, [r7, #24]
	while (count_number <= 255) {
 8009aa6:	8b3b      	ldrh	r3, [r7, #24]
 8009aa8:	2bff      	cmp	r3, #255	; 0xff
 8009aaa:	f67f af41 	bls.w	8009930 <maze_maker0+0x64>
	}
	}

}
 8009aae:	e000      	b.n	8009ab2 <maze_maker0+0x1e6>
		if (count_number == 255) {break;}
 8009ab0:	bf00      	nop
}
 8009ab2:	bf00      	nop
 8009ab4:	3720      	adds	r7, #32
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20001070 	.word	0x20001070
 8009ac0:	20000f80 	.word	0x20000f80

08009ac4 <maze_maker>:

//試験用歩数マップ作成短縮方法＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

void maze_maker(void) {
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b0ae      	sub	sp, #184	; 0xb8
 8009ac8:	af00      	add	r7, sp, #0

	update_wall();
 8009aca:	f7ff fb4d 	bl	8009168 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 8009ad4:	e00a      	b.n	8009aec <maze_maker+0x28>
		walk_count[tt] = 255;
 8009ad6:	4ac1      	ldr	r2, [pc, #772]	; (8009ddc <maze_maker+0x318>)
 8009ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009adc:	21ff      	movs	r1, #255	; 0xff
 8009ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8009ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 8009aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009af0:	2bff      	cmp	r3, #255	; 0xff
 8009af2:	ddf0      	ble.n	8009ad6 <maze_maker+0x12>
	}
	tt = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009afa:	e016      	b.n	8009b2a <maze_maker+0x66>
		count_box[tt] = 256;
 8009afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	33b8      	adds	r3, #184	; 0xb8
 8009b04:	443b      	add	r3, r7
 8009b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b0a:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8009b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	33b8      	adds	r3, #184	; 0xb8
 8009b16:	443b      	add	r3, r7
 8009b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b1c:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8009b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b24:	3301      	adds	r3, #1
 8009b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b2e:	2b27      	cmp	r3, #39	; 0x27
 8009b30:	dde4      	ble.n	8009afc <maze_maker+0x38>
	}

	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8009b32:	4baa      	ldr	r3, [pc, #680]	; (8009ddc <maze_maker+0x318>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8009b3a:	4ba8      	ldr	r3, [pc, #672]	; (8009ddc <maze_maker+0x318>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8009b42:	4ba6      	ldr	r3, [pc, #664]	; (8009ddc <maze_maker+0x318>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8009b4a:	4ba4      	ldr	r3, [pc, #656]	; (8009ddc <maze_maker+0x318>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	count_box[0] = (GOAL_X * 16) + GOAL_Y;
 8009b52:	2333      	movs	r3, #51	; 0x33
 8009b54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	count_box[1] = ((GOAL_X + 1) * 16) + GOAL_Y;
 8009b58:	2343      	movs	r3, #67	; 0x43
 8009b5a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	count_box[2] = (GOAL_X * 16) + GOAL_Y + 1;
 8009b5e:	2334      	movs	r3, #52	; 0x34
 8009b60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	count_box[3] = ((GOAL_X + 1) * 16) + GOAL_Y + 1;
 8009b64:	2344      	movs	r3, #68	; 0x44
 8009b66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	unsigned short coordinate;
	unsigned short count_number = 1;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 8009b70:	e166      	b.n	8009e40 <maze_maker+0x37c>
		box=0;boxnext=0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 8009b7e:	e11f      	b.n	8009dc0 <maze_maker+0x2fc>

			coordinate = count_box[box];
 8009b80:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	33b8      	adds	r3, #184	; 0xb8
 8009b88:	443b      	add	r3, r7
 8009b8a:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009b8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 8009b92:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009b96:	111b      	asrs	r3, r3, #4
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 8009ba2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8009bae:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bb2:	2b0e      	cmp	r3, #14
 8009bb4:	d811      	bhi.n	8009bda <maze_maker+0x116>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8009bb6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bba:	4a89      	ldr	r2, [pc, #548]	; (8009de0 <maze_maker+0x31c>)
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4413      	add	r3, r2
 8009bc2:	88db      	ldrh	r3, [r3, #6]
 8009bc4:	b21a      	sxth	r2, r3
 8009bc6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009bca:	2101      	movs	r1, #1
 8009bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd0:	b21b      	sxth	r3, r3
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	b21b      	sxth	r3, r3
 8009bd6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 8009bda:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d012      	beq.n	8009c08 <maze_maker+0x144>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009be2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009be6:	3b01      	subs	r3, #1
 8009be8:	4a7d      	ldr	r2, [pc, #500]	; (8009de0 <maze_maker+0x31c>)
 8009bea:	330c      	adds	r3, #12
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	88db      	ldrh	r3, [r3, #6]
 8009bf2:	b21a      	sxth	r2, r3
 8009bf4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfe:	b21b      	sxth	r3, r3
 8009c00:	4013      	ands	r3, r2
 8009c02:	b21b      	sxth	r3, r3
 8009c04:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 8009c08:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c0c:	2b0e      	cmp	r3, #14
 8009c0e:	d80f      	bhi.n	8009c30 <maze_maker+0x16c>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8009c10:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c14:	4a72      	ldr	r2, [pc, #456]	; (8009de0 <maze_maker+0x31c>)
 8009c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c1a:	b21a      	sxth	r2, r3
 8009c1c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c20:	2101      	movs	r1, #1
 8009c22:	fa01 f303 	lsl.w	r3, r1, r3
 8009c26:	b21b      	sxth	r3, r3
 8009c28:	4013      	ands	r3, r2
 8009c2a:	b21b      	sxth	r3, r3
 8009c2c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 8009c30:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d010      	beq.n	8009c5a <maze_maker+0x196>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8009c38:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	4a68      	ldr	r2, [pc, #416]	; (8009de0 <maze_maker+0x31c>)
 8009c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c44:	b21a      	sxth	r2, r3
 8009c46:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	4013      	ands	r3, r2
 8009c54:	b21b      	sxth	r3, r3
 8009c56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 8009c5a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009c5e:	3301      	adds	r3, #1
 8009c60:	4a5e      	ldr	r2, [pc, #376]	; (8009ddc <maze_maker+0x318>)
 8009c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c66:	2bfe      	cmp	r3, #254	; 0xfe
 8009c68:	d91f      	bls.n	8009caa <maze_maker+0x1e6>
 8009c6a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d01b      	beq.n	8009caa <maze_maker+0x1e6>
					|| wall_north >= 1) {} else {
 8009c72:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d117      	bne.n	8009caa <maze_maker+0x1e6>
				walk_count[coordinate + 1] = count_number;
 8009c7a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009c7e:	3301      	adds	r3, #1
 8009c80:	4956      	ldr	r1, [pc, #344]	; (8009ddc <maze_maker+0x318>)
 8009c82:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009c86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 8009c8a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009c8e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009c92:	3201      	adds	r2, #1
 8009c94:	b292      	uxth	r2, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	33b8      	adds	r3, #184	; 0xb8
 8009c9a:	443b      	add	r3, r7
 8009c9c:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009ca0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 8009caa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	4a4a      	ldr	r2, [pc, #296]	; (8009ddc <maze_maker+0x318>)
 8009cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb6:	2bfe      	cmp	r3, #254	; 0xfe
 8009cb8:	d91f      	bls.n	8009cfa <maze_maker+0x236>
 8009cba:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <maze_maker+0x236>
					|| wall_south >= 1) {} else {
 8009cc2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d117      	bne.n	8009cfa <maze_maker+0x236>
				walk_count[coordinate - 1] = count_number;
 8009cca:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	4942      	ldr	r1, [pc, #264]	; (8009ddc <maze_maker+0x318>)
 8009cd2:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009cd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 8009cda:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009cde:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	b292      	uxth	r2, r2
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	33b8      	adds	r3, #184	; 0xb8
 8009cea:	443b      	add	r3, r7
 8009cec:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009cf0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 8009cfa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009cfe:	3310      	adds	r3, #16
 8009d00:	4a36      	ldr	r2, [pc, #216]	; (8009ddc <maze_maker+0x318>)
 8009d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d06:	2bfe      	cmp	r3, #254	; 0xfe
 8009d08:	d91f      	bls.n	8009d4a <maze_maker+0x286>
 8009d0a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d01b      	beq.n	8009d4a <maze_maker+0x286>
					|| wall_east >= 1) {} else {
 8009d12:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d117      	bne.n	8009d4a <maze_maker+0x286>
				walk_count[coordinate + 16] = count_number;
 8009d1a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d1e:	3310      	adds	r3, #16
 8009d20:	492e      	ldr	r1, [pc, #184]	; (8009ddc <maze_maker+0x318>)
 8009d22:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009d26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 8009d2a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009d32:	3210      	adds	r2, #16
 8009d34:	b292      	uxth	r2, r2
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	33b8      	adds	r3, #184	; 0xb8
 8009d3a:	443b      	add	r3, r7
 8009d3c:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009d40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d44:	3301      	adds	r3, #1
 8009d46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 8009d4a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d4e:	3b10      	subs	r3, #16
 8009d50:	4a22      	ldr	r2, [pc, #136]	; (8009ddc <maze_maker+0x318>)
 8009d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d56:	2bfe      	cmp	r3, #254	; 0xfe
 8009d58:	d91f      	bls.n	8009d9a <maze_maker+0x2d6>
 8009d5a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d01b      	beq.n	8009d9a <maze_maker+0x2d6>
					|| wall_west >= 1) {} else {
 8009d62:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d117      	bne.n	8009d9a <maze_maker+0x2d6>
				walk_count[coordinate - 16] = count_number;
 8009d6a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009d6e:	3b10      	subs	r3, #16
 8009d70:	491a      	ldr	r1, [pc, #104]	; (8009ddc <maze_maker+0x318>)
 8009d72:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009d76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 8009d7a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009d82:	3a10      	subs	r2, #16
 8009d84:	b292      	uxth	r2, r2
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	33b8      	adds	r3, #184	; 0xb8
 8009d8a:	443b      	add	r3, r7
 8009d8c:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 8009d90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d94:	3301      	adds	r3, #1
 8009d96:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 8009d9a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009d9e:	2b27      	cmp	r3, #39	; 0x27
 8009da0:	d014      	beq.n	8009dcc <maze_maker+0x308>
			box++;
 8009da2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009da6:	3301      	adds	r3, #1
 8009da8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 8009dac:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	33b8      	adds	r3, #184	; 0xb8
 8009db4:	443b      	add	r3, r7
 8009db6:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dbe:	d007      	beq.n	8009dd0 <maze_maker+0x30c>
		while (box <= 39) {
 8009dc0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009dc4:	2b27      	cmp	r3, #39	; 0x27
 8009dc6:	f67f aedb 	bls.w	8009b80 <maze_maker+0xbc>
 8009dca:	e002      	b.n	8009dd2 <maze_maker+0x30e>
			if (box == 39) {break;}
 8009dcc:	bf00      	nop
 8009dce:	e000      	b.n	8009dd2 <maze_maker+0x30e>
			if (count_box[box] == 256) {break;}
 8009dd0:	bf00      	nop
		}

		tt = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8009dd8:	e020      	b.n	8009e1c <maze_maker+0x358>
 8009dda:	bf00      	nop
 8009ddc:	20001070 	.word	0x20001070
 8009de0:	20000f80 	.word	0x20000f80
			count_box[tt] = count_boxnext[tt];
 8009de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	33b8      	adds	r3, #184	; 0xb8
 8009dec:	443b      	add	r3, r7
 8009dee:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 8009df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	33b8      	adds	r3, #184	; 0xb8
 8009dfa:	443b      	add	r3, r7
 8009dfc:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 8009e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	33b8      	adds	r3, #184	; 0xb8
 8009e08:	443b      	add	r3, r7
 8009e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e0e:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 8009e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e16:	3301      	adds	r3, #1
 8009e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 8009e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e20:	2b27      	cmp	r3, #39	; 0x27
 8009e22:	dddf      	ble.n	8009de4 <maze_maker+0x320>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 8009e24:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e28:	2bff      	cmp	r3, #255	; 0xff
 8009e2a:	d00e      	beq.n	8009e4a <maze_maker+0x386>
 8009e2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e34:	d009      	beq.n	8009e4a <maze_maker+0x386>
		count_number++;
 8009e36:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 8009e40:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009e44:	2bff      	cmp	r3, #255	; 0xff
 8009e46:	f67f ae94 	bls.w	8009b72 <maze_maker+0xae>
	}

}
 8009e4a:	bf00      	nop
 8009e4c:	37b8      	adds	r7, #184	; 0xb8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop

08009e54 <maze_makerBack>:


void maze_makerBack(void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b0ae      	sub	sp, #184	; 0xb8
 8009e58:	af00      	add	r7, sp, #0
	update_wall();
 8009e5a:	f7ff f985 	bl	8009168 <update_wall>

//ここから歩数マップを作る．*************************************
	int tt = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned short count_box[40];
	unsigned short count_boxnext[40];
	while (tt <= 255) {
 8009e64:	e00a      	b.n	8009e7c <maze_makerBack+0x28>
		walk_count[tt] = 255;
 8009e66:	4ad1      	ldr	r2, [pc, #836]	; (800a1ac <maze_makerBack+0x358>)
 8009e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e6c:	21ff      	movs	r1, #255	; 0xff
 8009e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tt++;
 8009e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e76:	3301      	adds	r3, #1
 8009e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 255) {
 8009e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e80:	2bff      	cmp	r3, #255	; 0xff
 8009e82:	ddf0      	ble.n	8009e66 <maze_makerBack+0x12>
	}
	tt = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009e8a:	e016      	b.n	8009eba <maze_makerBack+0x66>
		count_box[tt] = 256;
 8009e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	33b8      	adds	r3, #184	; 0xb8
 8009e94:	443b      	add	r3, r7
 8009e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e9a:	f823 2c68 	strh.w	r2, [r3, #-104]
		count_boxnext[tt] = 256;
 8009e9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	33b8      	adds	r3, #184	; 0xb8
 8009ea6:	443b      	add	r3, r7
 8009ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009eac:	f823 2cb8 	strh.w	r2, [r3, #-184]
		tt++;
 8009eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (tt <= 39) {
 8009eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ebe:	2b27      	cmp	r3, #39	; 0x27
 8009ec0:	dde4      	ble.n	8009e8c <maze_makerBack+0x38>
	}

	walk_count[0] = 0;
 8009ec2:	4bba      	ldr	r3, [pc, #744]	; (800a1ac <maze_makerBack+0x358>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	801a      	strh	r2, [r3, #0]
	count_box[0] = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	unsigned short coordinate;
	unsigned short count_number = 1;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north,wall_south,wall_east,wall_west;
	unsigned short box,boxnext;
	while (count_number <= 255) {
 8009ed4:	e161      	b.n	800a19a <maze_makerBack+0x346>
		box=0;boxnext=0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		while (box <= 39) {
 8009ee2:	e11f      	b.n	800a124 <maze_makerBack+0x2d0>

			coordinate = count_box[box];
 8009ee4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	33b8      	adds	r3, #184	; 0xb8
 8009eec:	443b      	add	r3, r7
 8009eee:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8009ef2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			Xcoordinate = (coordinate & 0xf0) >> 4;
 8009ef6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009efa:	111b      	asrs	r3, r3, #4
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			Ycoordinate = coordinate & 0x0f;
 8009f06:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
//壁情報のときに使う
			if (Ycoordinate <= 14) {
 8009f12:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f16:	2b0e      	cmp	r3, #14
 8009f18:	d811      	bhi.n	8009f3e <maze_makerBack+0xea>
				wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8009f1a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f1e:	4aa4      	ldr	r2, [pc, #656]	; (800a1b0 <maze_makerBack+0x35c>)
 8009f20:	330c      	adds	r3, #12
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	88db      	ldrh	r3, [r3, #6]
 8009f28:	b21a      	sxth	r2, r3
 8009f2a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f2e:	2101      	movs	r1, #1
 8009f30:	fa01 f303 	lsl.w	r3, r1, r3
 8009f34:	b21b      	sxth	r3, r3
 8009f36:	4013      	ands	r3, r2
 8009f38:	b21b      	sxth	r3, r3
 8009f3a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
			}
			if (Ycoordinate >= 1) {
 8009f3e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d012      	beq.n	8009f6c <maze_makerBack+0x118>
				wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8009f46:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	4a98      	ldr	r2, [pc, #608]	; (800a1b0 <maze_makerBack+0x35c>)
 8009f4e:	330c      	adds	r3, #12
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	b21a      	sxth	r2, r3
 8009f58:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f62:	b21b      	sxth	r3, r3
 8009f64:	4013      	ands	r3, r2
 8009f66:	b21b      	sxth	r3, r3
 8009f68:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			}
			if (Xcoordinate <= 14) {
 8009f6c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f70:	2b0e      	cmp	r3, #14
 8009f72:	d80f      	bhi.n	8009f94 <maze_makerBack+0x140>
				wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8009f74:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f78:	4a8d      	ldr	r2, [pc, #564]	; (800a1b0 <maze_makerBack+0x35c>)
 8009f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7e:	b21a      	sxth	r2, r3
 8009f80:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8a:	b21b      	sxth	r3, r3
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			}
			if (Xcoordinate >= 1) {
 8009f94:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d010      	beq.n	8009fbe <maze_makerBack+0x16a>
				wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8009f9c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	4a83      	ldr	r2, [pc, #524]	; (800a1b0 <maze_makerBack+0x35c>)
 8009fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa8:	b21a      	sxth	r2, r3
 8009faa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009fae:	2101      	movs	r1, #1
 8009fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb4:	b21b      	sxth	r3, r3
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	b21b      	sxth	r3, r3
 8009fba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}

			if (walk_count[coordinate + 1] <= 254 || Ycoordinate == 15
 8009fbe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	4a79      	ldr	r2, [pc, #484]	; (800a1ac <maze_makerBack+0x358>)
 8009fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fca:	2bfe      	cmp	r3, #254	; 0xfe
 8009fcc:	d91f      	bls.n	800a00e <maze_makerBack+0x1ba>
 8009fce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8009fd2:	2b0f      	cmp	r3, #15
 8009fd4:	d01b      	beq.n	800a00e <maze_makerBack+0x1ba>
					|| wall_north >= 1) {} else {
 8009fd6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d117      	bne.n	800a00e <maze_makerBack+0x1ba>
				walk_count[coordinate + 1] = count_number;
 8009fde:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	4971      	ldr	r1, [pc, #452]	; (800a1ac <maze_makerBack+0x358>)
 8009fe6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8009fea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 1;
 8009fee:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009ff2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009ff6:	3201      	adds	r2, #1
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	33b8      	adds	r3, #184	; 0xb8
 8009ffe:	443b      	add	r3, r7
 800a000:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a004:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a008:	3301      	adds	r3, #1
 800a00a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 1] <= 254 || Ycoordinate == 0
 800a00e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a012:	3b01      	subs	r3, #1
 800a014:	4a65      	ldr	r2, [pc, #404]	; (800a1ac <maze_makerBack+0x358>)
 800a016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a01a:	2bfe      	cmp	r3, #254	; 0xfe
 800a01c:	d91f      	bls.n	800a05e <maze_makerBack+0x20a>
 800a01e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01b      	beq.n	800a05e <maze_makerBack+0x20a>
					|| wall_south >= 1) {} else {
 800a026:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d117      	bne.n	800a05e <maze_makerBack+0x20a>
				walk_count[coordinate - 1] = count_number;
 800a02e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a032:	3b01      	subs	r3, #1
 800a034:	495d      	ldr	r1, [pc, #372]	; (800a1ac <maze_makerBack+0x358>)
 800a036:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a03a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 1;
 800a03e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a042:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a046:	3a01      	subs	r2, #1
 800a048:	b292      	uxth	r2, r2
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	33b8      	adds	r3, #184	; 0xb8
 800a04e:	443b      	add	r3, r7
 800a050:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a054:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a058:	3301      	adds	r3, #1
 800a05a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate + 16] <= 254 || Xcoordinate == 15
 800a05e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a062:	3310      	adds	r3, #16
 800a064:	4a51      	ldr	r2, [pc, #324]	; (800a1ac <maze_makerBack+0x358>)
 800a066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a06a:	2bfe      	cmp	r3, #254	; 0xfe
 800a06c:	d91f      	bls.n	800a0ae <maze_makerBack+0x25a>
 800a06e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d01b      	beq.n	800a0ae <maze_makerBack+0x25a>
					|| wall_east >= 1) {} else {
 800a076:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d117      	bne.n	800a0ae <maze_makerBack+0x25a>
				walk_count[coordinate + 16] = count_number;
 800a07e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a082:	3310      	adds	r3, #16
 800a084:	4949      	ldr	r1, [pc, #292]	; (800a1ac <maze_makerBack+0x358>)
 800a086:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a08a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate + 16;
 800a08e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a092:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a096:	3210      	adds	r2, #16
 800a098:	b292      	uxth	r2, r2
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	33b8      	adds	r3, #184	; 0xb8
 800a09e:	443b      	add	r3, r7
 800a0a0:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a0a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (walk_count[coordinate - 16] <= 254 || Xcoordinate == 0
 800a0ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a0b2:	3b10      	subs	r3, #16
 800a0b4:	4a3d      	ldr	r2, [pc, #244]	; (800a1ac <maze_makerBack+0x358>)
 800a0b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ba:	2bfe      	cmp	r3, #254	; 0xfe
 800a0bc:	d91f      	bls.n	800a0fe <maze_makerBack+0x2aa>
 800a0be:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01b      	beq.n	800a0fe <maze_makerBack+0x2aa>
					|| wall_west >= 1) {} else {
 800a0c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d117      	bne.n	800a0fe <maze_makerBack+0x2aa>
				walk_count[coordinate - 16] = count_number;
 800a0ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800a0d2:	3b10      	subs	r3, #16
 800a0d4:	4935      	ldr	r1, [pc, #212]	; (800a1ac <maze_makerBack+0x358>)
 800a0d6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a0da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				count_boxnext[boxnext] = coordinate - 16;
 800a0de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a0e6:	3a10      	subs	r2, #16
 800a0e8:	b292      	uxth	r2, r2
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	33b8      	adds	r3, #184	; 0xb8
 800a0ee:	443b      	add	r3, r7
 800a0f0:	f823 2cb8 	strh.w	r2, [r3, #-184]
				boxnext++;
 800a0f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			}
			if (box == 39) {break;}
 800a0fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a102:	2b27      	cmp	r3, #39	; 0x27
 800a104:	d014      	beq.n	800a130 <maze_makerBack+0x2dc>
			box++;
 800a106:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a10a:	3301      	adds	r3, #1
 800a10c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if (count_box[box] == 256) {break;}
 800a110:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	33b8      	adds	r3, #184	; 0xb8
 800a118:	443b      	add	r3, r7
 800a11a:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a122:	d007      	beq.n	800a134 <maze_makerBack+0x2e0>
		while (box <= 39) {
 800a124:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a128:	2b27      	cmp	r3, #39	; 0x27
 800a12a:	f67f aedb 	bls.w	8009ee4 <maze_makerBack+0x90>
 800a12e:	e002      	b.n	800a136 <maze_makerBack+0x2e2>
			if (box == 39) {break;}
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <maze_makerBack+0x2e2>
			if (count_box[box] == 256) {break;}
 800a134:	bf00      	nop
		}

		tt = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 800a13c:	e01b      	b.n	800a176 <maze_makerBack+0x322>
			count_box[tt] = count_boxnext[tt];
 800a13e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	33b8      	adds	r3, #184	; 0xb8
 800a146:	443b      	add	r3, r7
 800a148:	f833 2cb8 	ldrh.w	r2, [r3, #-184]
 800a14c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	33b8      	adds	r3, #184	; 0xb8
 800a154:	443b      	add	r3, r7
 800a156:	f823 2c68 	strh.w	r2, [r3, #-104]
			count_boxnext[tt] = 256;
 800a15a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	33b8      	adds	r3, #184	; 0xb8
 800a162:	443b      	add	r3, r7
 800a164:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a168:	f823 2cb8 	strh.w	r2, [r3, #-184]
			tt++;
 800a16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a170:	3301      	adds	r3, #1
 800a172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		while (tt <= 39) {
 800a176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a17a:	2b27      	cmp	r3, #39	; 0x27
 800a17c:	dddf      	ble.n	800a13e <maze_makerBack+0x2ea>
		}
		if (count_number == 255 || count_box[0] == 256) {break;}
 800a17e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a182:	2bff      	cmp	r3, #255	; 0xff
 800a184:	d00e      	beq.n	800a1a4 <maze_makerBack+0x350>
 800a186:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18e:	d009      	beq.n	800a1a4 <maze_makerBack+0x350>
		count_number++;
 800a190:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a194:	3301      	adds	r3, #1
 800a196:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	while (count_number <= 255) {
 800a19a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a19e:	2bff      	cmp	r3, #255	; 0xff
 800a1a0:	f67f ae99 	bls.w	8009ed6 <maze_makerBack+0x82>
	}

}
 800a1a4:	bf00      	nop
 800a1a6:	37b8      	adds	r7, #184	; 0xb8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20001070 	.word	0x20001070
 800a1b0:	20000f80 	.word	0x20000f80

0800a1b4 <maze_display>:

void maze_display(void) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08a      	sub	sp, #40	; 0x28
 800a1b8:	af00      	add	r7, sp, #0
	int ss;
	int tt = 14;
 800a1ba:	230e      	movs	r3, #14
 800a1bc:	623b      	str	r3, [r7, #32]
	unsigned short presence[16];

	printf(
 800a1be:	48a6      	ldr	r0, [pc, #664]	; (800a458 <maze_display+0x2a4>)
 800a1c0:	f008 f9b0 	bl	8012524 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	while (tt >= -1) { //ttはｙ軸
 800a1c4:	e0a3      	b.n	800a30e <maze_display+0x15a>
		ss = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	4aa3      	ldr	r2, [pc, #652]	; (800a45c <maze_display+0x2a8>)
 800a1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	48a2      	ldr	r0, [pc, #648]	; (800a460 <maze_display+0x2ac>)
 800a1d8:	f008 f908 	bl	80123ec <iprintf>
		while (ss < 15) {
 800a1dc:	e039      	b.n	800a252 <maze_display+0x9e>
			presence[ss] = wall.row[ss] & (1 << (tt + 1));
 800a1de:	4aa1      	ldr	r2, [pc, #644]	; (800a464 <maze_display+0x2b0>)
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e6:	b21a      	sxth	r2, r3
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f2:	b21b      	sxth	r3, r3
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	b21b      	sxth	r3, r3
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	3328      	adds	r3, #40	; 0x28
 800a200:	443b      	add	r3, r7
 800a202:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	3328      	adds	r3, #40	; 0x28
 800a20c:	443b      	add	r3, r7
 800a20e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10d      	bne.n	800a232 <maze_display+0x7e>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	3301      	adds	r3, #1
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	4413      	add	r3, r2
 800a222:	4a8e      	ldr	r2, [pc, #568]	; (800a45c <maze_display+0x2a8>)
 800a224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a228:	4619      	mov	r1, r3
 800a22a:	488f      	ldr	r0, [pc, #572]	; (800a468 <maze_display+0x2b4>)
 800a22c:	f008 f8de 	bl	80123ec <iprintf>
 800a230:	e00c      	b.n	800a24c <maze_display+0x98>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	3301      	adds	r3, #1
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	4413      	add	r3, r2
 800a23e:	4a87      	ldr	r2, [pc, #540]	; (800a45c <maze_display+0x2a8>)
 800a240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a244:	4619      	mov	r1, r3
 800a246:	4886      	ldr	r0, [pc, #536]	; (800a460 <maze_display+0x2ac>)
 800a248:	f008 f8d0 	bl	80123ec <iprintf>
			}
			ss++;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	3301      	adds	r3, #1
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	2b0e      	cmp	r3, #14
 800a256:	ddc2      	ble.n	800a1de <maze_display+0x2a>
		}
		printf("|\n");
 800a258:	4884      	ldr	r0, [pc, #528]	; (800a46c <maze_display+0x2b8>)
 800a25a:	f008 f963 	bl	8012524 <puts>
		ss = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a262:	e009      	b.n	800a278 <maze_display+0xc4>
			presence[ss] = 0;
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	3328      	adds	r3, #40	; 0x28
 800a26a:	443b      	add	r3, r7
 800a26c:	2200      	movs	r2, #0
 800a26e:	f823 2c28 	strh.w	r2, [r3, #-40]
			ss++;
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	3301      	adds	r3, #1
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	2b0f      	cmp	r3, #15
 800a27c:	ddf2      	ble.n	800a264 <maze_display+0xb0>
		}
		ss = 0; // all clear***************************************
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	2b00      	cmp	r3, #0
 800a286:	db48      	blt.n	800a31a <maze_display+0x166>
			break;
		}
		while (ss <= 15) {
 800a288:	e026      	b.n	800a2d8 <maze_display+0x124>
			presence[ss] = wall.column[tt] & (1 << ss);
 800a28a:	4a76      	ldr	r2, [pc, #472]	; (800a464 <maze_display+0x2b0>)
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	330c      	adds	r3, #12
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	4413      	add	r3, r2
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	b21a      	sxth	r2, r3
 800a298:	2101      	movs	r1, #1
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	3328      	adds	r3, #40	; 0x28
 800a2ae:	443b      	add	r3, r7
 800a2b0:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3328      	adds	r3, #40	; 0x28
 800a2ba:	443b      	add	r3, r7
 800a2bc:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <maze_display+0x118>
				printf("+     ");
 800a2c4:	486a      	ldr	r0, [pc, #424]	; (800a470 <maze_display+0x2bc>)
 800a2c6:	f008 f891 	bl	80123ec <iprintf>
 800a2ca:	e002      	b.n	800a2d2 <maze_display+0x11e>
			} else {
				printf("+-----");
 800a2cc:	4869      	ldr	r0, [pc, #420]	; (800a474 <maze_display+0x2c0>)
 800a2ce:	f008 f88d 	bl	80123ec <iprintf>
			}
			ss++;
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	ddd5      	ble.n	800a28a <maze_display+0xd6>
		}

		printf("+\n");
 800a2de:	4866      	ldr	r0, [pc, #408]	; (800a478 <maze_display+0x2c4>)
 800a2e0:	f008 f920 	bl	8012524 <puts>

		ss = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 800a2e8:	e009      	b.n	800a2fe <maze_display+0x14a>
			presence[ss] = 0;
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	3328      	adds	r3, #40	; 0x28
 800a2f0:	443b      	add	r3, r7
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	2b0f      	cmp	r3, #15
 800a302:	ddf2      	ble.n	800a2ea <maze_display+0x136>
		}
		ss = 0; // all clear***************************************
 800a304:	2300      	movs	r3, #0
 800a306:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	f6bf af57 	bge.w	800a1c6 <maze_display+0x12>
 800a318:	e000      	b.n	800a31c <maze_display+0x168>
			break;
 800a31a:	bf00      	nop
	}

	printf(
 800a31c:	4857      	ldr	r0, [pc, #348]	; (800a47c <maze_display+0x2c8>)
 800a31e:	f008 f901 	bl	8012524 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

	tt = 14;
 800a322:	230e      	movs	r3, #14
 800a324:	623b      	str	r3, [r7, #32]
	printf(
 800a326:	484c      	ldr	r0, [pc, #304]	; (800a458 <maze_display+0x2a4>)
 800a328:	f008 f8fc 	bl	8012524 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	while (tt >= -1) { //ttはｙ軸
 800a32c:	e0ba      	b.n	800a4a4 <maze_display+0x2f0>


		ss = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
		printf("|%5d", walk_count[tt + 1]);
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	3301      	adds	r3, #1
 800a336:	4a49      	ldr	r2, [pc, #292]	; (800a45c <maze_display+0x2a8>)
 800a338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33c:	4619      	mov	r1, r3
 800a33e:	4848      	ldr	r0, [pc, #288]	; (800a460 <maze_display+0x2ac>)
 800a340:	f008 f854 	bl	80123ec <iprintf>
		while (ss < 15) {
 800a344:	e03b      	b.n	800a3be <maze_display+0x20a>
			presence[ss] = wall.row_look[ss] & (1 << (tt + 1));
 800a346:	4a47      	ldr	r2, [pc, #284]	; (800a464 <maze_display+0x2b0>)
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	331c      	adds	r3, #28
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	889b      	ldrh	r3, [r3, #4]
 800a352:	b21a      	sxth	r2, r3
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	3301      	adds	r3, #1
 800a358:	2101      	movs	r1, #1
 800a35a:	fa01 f303 	lsl.w	r3, r1, r3
 800a35e:	b21b      	sxth	r3, r3
 800a360:	4013      	ands	r3, r2
 800a362:	b21b      	sxth	r3, r3
 800a364:	b29a      	uxth	r2, r3
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	3328      	adds	r3, #40	; 0x28
 800a36c:	443b      	add	r3, r7
 800a36e:	f823 2c28 	strh.w	r2, [r3, #-40]
			if (presence[ss] == 0) {
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	3328      	adds	r3, #40	; 0x28
 800a378:	443b      	add	r3, r7
 800a37a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10d      	bne.n	800a39e <maze_display+0x1ea>
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	3301      	adds	r3, #1
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	4413      	add	r3, r2
 800a38e:	4a33      	ldr	r2, [pc, #204]	; (800a45c <maze_display+0x2a8>)
 800a390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a394:	4619      	mov	r1, r3
 800a396:	4834      	ldr	r0, [pc, #208]	; (800a468 <maze_display+0x2b4>)
 800a398:	f008 f828 	bl	80123ec <iprintf>
 800a39c:	e00c      	b.n	800a3b8 <maze_display+0x204>
			} else {
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	4413      	add	r3, r2
 800a3aa:	4a2c      	ldr	r2, [pc, #176]	; (800a45c <maze_display+0x2a8>)
 800a3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	482b      	ldr	r0, [pc, #172]	; (800a460 <maze_display+0x2ac>)
 800a3b4:	f008 f81a 	bl	80123ec <iprintf>
			}
			ss++;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss < 15) {
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	2b0e      	cmp	r3, #14
 800a3c2:	ddc0      	ble.n	800a346 <maze_display+0x192>
		}
		printf("|\n");
 800a3c4:	4829      	ldr	r0, [pc, #164]	; (800a46c <maze_display+0x2b8>)
 800a3c6:	f008 f8ad 	bl	8012524 <puts>
		ss = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a3ce:	e009      	b.n	800a3e4 <maze_display+0x230>
			presence[ss] = 0;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	3328      	adds	r3, #40	; 0x28
 800a3d6:	443b      	add	r3, r7
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	2b0f      	cmp	r3, #15
 800a3e8:	ddf2      	ble.n	800a3d0 <maze_display+0x21c>
		}
		ss = 0; // all clear***************************************
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (tt <= -1) {
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	db5d      	blt.n	800a4b0 <maze_display+0x2fc>
			break;
		}
		while (ss <= 15) {
 800a3f4:	e026      	b.n	800a444 <maze_display+0x290>
			presence[ss] = wall.column_look[tt] & (1 << ss);
 800a3f6:	4a1b      	ldr	r2, [pc, #108]	; (800a464 <maze_display+0x2b0>)
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	332c      	adds	r3, #44	; 0x2c
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	4413      	add	r3, r2
 800a400:	885b      	ldrh	r3, [r3, #2]
 800a402:	b21a      	sxth	r2, r3
 800a404:	2101      	movs	r1, #1
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	fa01 f303 	lsl.w	r3, r1, r3
 800a40c:	b21b      	sxth	r3, r3
 800a40e:	4013      	ands	r3, r2
 800a410:	b21b      	sxth	r3, r3
 800a412:	b29a      	uxth	r2, r3
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	3328      	adds	r3, #40	; 0x28
 800a41a:	443b      	add	r3, r7
 800a41c:	f823 2c28 	strh.w	r2, [r3, #-40]

			if (presence[ss] == 0) {
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	3328      	adds	r3, #40	; 0x28
 800a426:	443b      	add	r3, r7
 800a428:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d103      	bne.n	800a438 <maze_display+0x284>
				printf("+     ");
 800a430:	480f      	ldr	r0, [pc, #60]	; (800a470 <maze_display+0x2bc>)
 800a432:	f007 ffdb 	bl	80123ec <iprintf>
 800a436:	e002      	b.n	800a43e <maze_display+0x28a>
			} else {
				printf("+-----");
 800a438:	480e      	ldr	r0, [pc, #56]	; (800a474 <maze_display+0x2c0>)
 800a43a:	f007 ffd7 	bl	80123ec <iprintf>
			}
			ss++;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	3301      	adds	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) {
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	2b0f      	cmp	r3, #15
 800a448:	ddd5      	ble.n	800a3f6 <maze_display+0x242>
		}

		printf("+\n");
 800a44a:	480b      	ldr	r0, [pc, #44]	; (800a478 <maze_display+0x2c4>)
 800a44c:	f008 f86a 	bl	8012524 <puts>

		ss = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	; 0x24

		while (ss <= 15) { // all clear***************************************
 800a454:	e01e      	b.n	800a494 <maze_display+0x2e0>
 800a456:	bf00      	nop
 800a458:	08014c8c 	.word	0x08014c8c
 800a45c:	20001070 	.word	0x20001070
 800a460:	08014cf0 	.word	0x08014cf0
 800a464:	20000f80 	.word	0x20000f80
 800a468:	08014cf8 	.word	0x08014cf8
 800a46c:	08014d00 	.word	0x08014d00
 800a470:	08014d04 	.word	0x08014d04
 800a474:	08014d0c 	.word	0x08014d0c
 800a478:	08014d14 	.word	0x08014d14
 800a47c:	08014d18 	.word	0x08014d18
			presence[ss] = 0;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	3328      	adds	r3, #40	; 0x28
 800a486:	443b      	add	r3, r7
 800a488:	2200      	movs	r2, #0
 800a48a:	f823 2c28 	strh.w	r2, [r3, #-40]

			ss++;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	3301      	adds	r3, #1
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
		while (ss <= 15) { // all clear***************************************
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	2b0f      	cmp	r3, #15
 800a498:	ddf2      	ble.n	800a480 <maze_display+0x2cc>
		}
		ss = 0; // all clear***************************************
 800a49a:	2300      	movs	r3, #0
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24

		tt--;
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	623b      	str	r3, [r7, #32]
	while (tt >= -1) { //ttはｙ軸
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	f6bf af40 	bge.w	800a32e <maze_display+0x17a>
 800a4ae:	e000      	b.n	800a4b2 <maze_display+0x2fe>
			break;
 800a4b0:	bf00      	nop
	}

	printf(
 800a4b2:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <maze_display+0x30c>)
 800a4b4:	f008 f836 	bl	8012524 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 800a4b8:	bf00      	nop
 800a4ba:	3728      	adds	r7, #40	; 0x28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	08014d18 	.word	0x08014d18

0800a4c4 <mode_decision>:
#include "maze_Turning.h"
#include "maze_strategy.h"



unsigned char mode_decision(unsigned char select,unsigned char now_mode){
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	71fb      	strb	r3, [r7, #7]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	71bb      	strb	r3, [r7, #6]

//LCDで現在のモード番号を表示
switch (select){
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <mode_decision+0x1c>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d005      	beq.n	800a4ea <mode_decision+0x26>
 800a4de:	e009      	b.n	800a4f4 <mode_decision+0x30>
case 0:
mode_display0(now_mode);
 800a4e0:	79bb      	ldrb	r3, [r7, #6]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f884 	bl	800a5f0 <mode_display0>
break;
 800a4e8:	e004      	b.n	800a4f4 <mode_decision+0x30>
case 1:
mode_display1(now_mode);
 800a4ea:	79bb      	ldrb	r3, [r7, #6]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f8c5 	bl	800a67c <mode_display1>
break;
 800a4f2:	bf00      	nop
}


while (g_sensor_on[0]<=SENSOR_FINGER_0){
 800a4f4:	e061      	b.n	800a5ba <mode_decision+0xf6>
	if(read_switch1()==1){
 800a4f6:	f7f9 fb5f 	bl	8003bb8 <read_switch1>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d12b      	bne.n	800a558 <mode_decision+0x94>
		if(select==0 && now_mode > MAX_MODE0){now_mode=0;}
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <mode_decision+0x4e>
 800a506:	79bb      	ldrb	r3, [r7, #6]
 800a508:	2b05      	cmp	r3, #5
 800a50a:	d902      	bls.n	800a512 <mode_decision+0x4e>
 800a50c:	2300      	movs	r3, #0
 800a50e:	71bb      	strb	r3, [r7, #6]
 800a510:	e00b      	b.n	800a52a <mode_decision+0x66>
		else if(select==1 && now_mode > MAX_MODE1){now_mode=0;}
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d105      	bne.n	800a524 <mode_decision+0x60>
 800a518:	79bb      	ldrb	r3, [r7, #6]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d902      	bls.n	800a524 <mode_decision+0x60>
 800a51e:	2300      	movs	r3, #0
 800a520:	71bb      	strb	r3, [r7, #6]
 800a522:	e002      	b.n	800a52a <mode_decision+0x66>
		else{now_mode++;}
 800a524:	79bb      	ldrb	r3, [r7, #6]
 800a526:	3301      	adds	r3, #1
 800a528:	71bb      	strb	r3, [r7, #6]

		switch (select){
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <mode_decision+0x72>
 800a530:	2b01      	cmp	r3, #1
 800a532:	d005      	beq.n	800a540 <mode_decision+0x7c>
 800a534:	e009      	b.n	800a54a <mode_decision+0x86>
		case 0:
		mode_display0(now_mode);
 800a536:	79bb      	ldrb	r3, [r7, #6]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f859 	bl	800a5f0 <mode_display0>
		break;
 800a53e:	e004      	b.n	800a54a <mode_decision+0x86>
		case 1:
		mode_display1(now_mode);
 800a540:	79bb      	ldrb	r3, [r7, #6]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f89a 	bl	800a67c <mode_display1>
		break;
 800a548:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 800a54a:	79bb      	ldrb	r3, [r7, #6]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f8 fbfb 	bl	8002d48 <pl_play_oneSound>
		wait_ms(100);
 800a552:	2064      	movs	r0, #100	; 0x64
 800a554:	f7f9 fb74 	bl	8003c40 <wait_ms>
	}
	if(read_switch2()==1){
 800a558:	f7f9 fb44 	bl	8003be4 <read_switch2>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d12b      	bne.n	800a5ba <mode_decision+0xf6>
		if(select==0 && now_mode == 0){now_mode=MAX_MODE0+1;}
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d105      	bne.n	800a574 <mode_decision+0xb0>
 800a568:	79bb      	ldrb	r3, [r7, #6]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <mode_decision+0xb0>
 800a56e:	2306      	movs	r3, #6
 800a570:	71bb      	strb	r3, [r7, #6]
 800a572:	e00b      	b.n	800a58c <mode_decision+0xc8>
		else if(select==1 && now_mode == 0){now_mode=MAX_MODE1+1;}
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d105      	bne.n	800a586 <mode_decision+0xc2>
 800a57a:	79bb      	ldrb	r3, [r7, #6]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <mode_decision+0xc2>
 800a580:	2310      	movs	r3, #16
 800a582:	71bb      	strb	r3, [r7, #6]
 800a584:	e002      	b.n	800a58c <mode_decision+0xc8>
		else{now_mode--;}
 800a586:	79bb      	ldrb	r3, [r7, #6]
 800a588:	3b01      	subs	r3, #1
 800a58a:	71bb      	strb	r3, [r7, #6]

		switch (select){
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d002      	beq.n	800a598 <mode_decision+0xd4>
 800a592:	2b01      	cmp	r3, #1
 800a594:	d005      	beq.n	800a5a2 <mode_decision+0xde>
 800a596:	e009      	b.n	800a5ac <mode_decision+0xe8>
		case 0:
		mode_display0(now_mode);
 800a598:	79bb      	ldrb	r3, [r7, #6]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f828 	bl	800a5f0 <mode_display0>
		break;
 800a5a0:	e004      	b.n	800a5ac <mode_decision+0xe8>
		case 1:
		mode_display1(now_mode);
 800a5a2:	79bb      	ldrb	r3, [r7, #6]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 f869 	bl	800a67c <mode_display1>
		break;
 800a5aa:	bf00      	nop
		}
		pl_play_oneSound(now_mode);
 800a5ac:	79bb      	ldrb	r3, [r7, #6]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7f8 fbca 	bl	8002d48 <pl_play_oneSound>
		wait_ms(100);
 800a5b4:	2064      	movs	r0, #100	; 0x64
 800a5b6:	f7f9 fb43 	bl	8003c40 <wait_ms>
while (g_sensor_on[0]<=SENSOR_FINGER_0){
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <mode_decision+0x124>)
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a5c2:	d998      	bls.n	800a4f6 <mode_decision+0x32>
	}


}

while (g_sensor_on[0]>=SENSOR_FINGER_0){
 800a5c4:	e002      	b.n	800a5cc <mode_decision+0x108>
	wait_ms(1);
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	f7f9 fb3a 	bl	8003c40 <wait_ms>
while (g_sensor_on[0]>=SENSOR_FINGER_0){
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <mode_decision+0x124>)
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a5d4:	d2f7      	bcs.n	800a5c6 <mode_decision+0x102>
}
pl_play_Music(8, Zelda_nazo);
 800a5d6:	4905      	ldr	r1, [pc, #20]	; (800a5ec <mode_decision+0x128>)
 800a5d8:	2008      	movs	r0, #8
 800a5da:	f7f8 fc21 	bl	8002e20 <pl_play_Music>

return now_mode;
 800a5de:	79bb      	ldrb	r3, [r7, #6]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200003b0 	.word	0x200003b0
 800a5ec:	20000914 	.word	0x20000914

0800a5f0 <mode_display0>:

void mode_display0(int mode){
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 800a5f8:	f7f8 f85d 	bl	80026b6 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	2000      	movs	r0, #0
 800a600:	f7f8 f841 	bl	8002686 <pl_lcd_pos>
	switch(mode){
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b04      	cmp	r3, #4
 800a608:	d820      	bhi.n	800a64c <mode_display0+0x5c>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <mode_display0+0x20>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a625 	.word	0x0800a625
 800a614:	0800a62d 	.word	0x0800a62d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a645 	.word	0x0800a645
	case 0:
		pl_lcd_puts("test");
 800a624:	480f      	ldr	r0, [pc, #60]	; (800a664 <mode_display0+0x74>)
 800a626:	f7f7 fff3 	bl	8002610 <pl_lcd_puts>
	break;
 800a62a:	e00f      	b.n	800a64c <mode_display0+0x5c>
	case 1:
		pl_lcd_puts("run");
 800a62c:	480e      	ldr	r0, [pc, #56]	; (800a668 <mode_display0+0x78>)
 800a62e:	f7f7 ffef 	bl	8002610 <pl_lcd_puts>
	break;
 800a632:	e00b      	b.n	800a64c <mode_display0+0x5c>
	case 2:
		pl_lcd_puts("tune");
 800a634:	480d      	ldr	r0, [pc, #52]	; (800a66c <mode_display0+0x7c>)
 800a636:	f7f7 ffeb 	bl	8002610 <pl_lcd_puts>
	break;
 800a63a:	e007      	b.n	800a64c <mode_display0+0x5c>
	case 3:
		pl_lcd_puts("log");
 800a63c:	480c      	ldr	r0, [pc, #48]	; (800a670 <mode_display0+0x80>)
 800a63e:	f7f7 ffe7 	bl	8002610 <pl_lcd_puts>
	break;
 800a642:	e003      	b.n	800a64c <mode_display0+0x5c>
	case 4:
		pl_lcd_puts("endure");
 800a644:	480b      	ldr	r0, [pc, #44]	; (800a674 <mode_display0+0x84>)
 800a646:	f7f7 ffe3 	bl	8002610 <pl_lcd_puts>
	break;
 800a64a:	bf00      	nop
	}

	pl_lcd_pos(1, 0);
 800a64c:	2100      	movs	r1, #0
 800a64e:	2001      	movs	r0, #1
 800a650:	f7f8 f819 	bl	8002686 <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a654:	4808      	ldr	r0, [pc, #32]	; (800a678 <mode_display0+0x88>)
 800a656:	f7f7 ffdb 	bl	8002610 <pl_lcd_puts>

}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	08014d7c 	.word	0x08014d7c
 800a668:	08014d84 	.word	0x08014d84
 800a66c:	08014d88 	.word	0x08014d88
 800a670:	08014d90 	.word	0x08014d90
 800a674:	08014d94 	.word	0x08014d94
 800a678:	08014d9c 	.word	0x08014d9c

0800a67c <mode_display1>:


void mode_display1(int mode){
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	pl_lcd_clear();
 800a684:	f7f8 f817 	bl	80026b6 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a688:	2100      	movs	r1, #0
 800a68a:	2000      	movs	r0, #0
 800a68c:	f7f7 fffb 	bl	8002686 <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a690:	480f      	ldr	r0, [pc, #60]	; (800a6d0 <mode_display1+0x54>)
 800a692:	f7f7 ffbd 	bl	8002610 <pl_lcd_puts>
	char strBuffer[17] = {0};
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	f107 0310 	add.w	r3, r7, #16
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	605a      	str	r2, [r3, #4]
 800a6a4:	609a      	str	r2, [r3, #8]
 800a6a6:	731a      	strb	r2, [r3, #12]
	sprintf(strBuffer, "CNT=%04d", mode);
 800a6a8:	f107 030c 	add.w	r3, r7, #12
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	4909      	ldr	r1, [pc, #36]	; (800a6d4 <mode_display1+0x58>)
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f008 f80d 	bl	80126d0 <siprintf>
	pl_lcd_pos(1, 0);
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	f7f7 ffe4 	bl	8002686 <pl_lcd_pos>
	pl_lcd_puts(strBuffer);
 800a6be:	f107 030c 	add.w	r3, r7, #12
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f7 ffa4 	bl	8002610 <pl_lcd_puts>

}
 800a6c8:	bf00      	nop
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08014d9c 	.word	0x08014d9c
 800a6d4:	08014da4 	.word	0x08014da4

0800a6d8 <mode_execution>:





void mode_execution(unsigned char now_mode1,unsigned char now_mode2){
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	460a      	mov	r2, r1
 800a6e2:	71fb      	strb	r3, [r7, #7]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	71bb      	strb	r3, [r7, #6]
	pl_lcd_clear();
 800a6e8:	f7f7 ffe5 	bl	80026b6 <pl_lcd_clear>
	pl_lcd_pos(0, 0);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	f7f7 ffc9 	bl	8002686 <pl_lcd_pos>
	pl_lcd_puts("mode");
 800a6f4:	482b      	ldr	r0, [pc, #172]	; (800a7a4 <mode_execution+0xcc>)
 800a6f6:	f7f7 ff8b 	bl	8002610 <pl_lcd_puts>
	pl_lcd_pos(1, 0);
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	f7f7 ffc2 	bl	8002686 <pl_lcd_pos>
	pl_lcd_puts("select");
 800a702:	4829      	ldr	r0, [pc, #164]	; (800a7a8 <mode_execution+0xd0>)
 800a704:	f7f7 ff84 	bl	8002610 <pl_lcd_puts>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800a708:	e00f      	b.n	800a72a <mode_execution+0x52>
		wait_ms(1);
 800a70a:	2001      	movs	r0, #1
 800a70c:	f7f9 fa98 	bl	8003c40 <wait_ms>
		if(read_switch1()==1 && read_switch2()==1){
 800a710:	f7f9 fa52 	bl	8003bb8 <read_switch1>
 800a714:	4603      	mov	r3, r0
 800a716:	2b01      	cmp	r3, #1
 800a718:	d107      	bne.n	800a72a <mode_execution+0x52>
 800a71a:	f7f9 fa63 	bl	8003be4 <read_switch2>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b01      	cmp	r3, #1
 800a722:	d102      	bne.n	800a72a <mode_execution+0x52>
			now_mode1=100;
 800a724:	2364      	movs	r3, #100	; 0x64
 800a726:	71fb      	strb	r3, [r7, #7]
			break;
 800a728:	e004      	b.n	800a734 <mode_execution+0x5c>
	while (g_sensor_on[3]<=SENSOR_FINGER_3){
 800a72a:	4b20      	ldr	r3, [pc, #128]	; (800a7ac <mode_execution+0xd4>)
 800a72c:	88db      	ldrh	r3, [r3, #6]
 800a72e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a732:	d9ea      	bls.n	800a70a <mode_execution+0x32>
		}
	}
	pl_play_Music(8, Zelda_nazo);
 800a734:	491e      	ldr	r1, [pc, #120]	; (800a7b0 <mode_execution+0xd8>)
 800a736:	2008      	movs	r0, #8
 800a738:	f7f8 fb72 	bl	8002e20 <pl_play_Music>

switch (now_mode1) {
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	dc10      	bgt.n	800a764 <mode_execution+0x8c>
 800a742:	2b00      	cmp	r3, #0
 800a744:	db2a      	blt.n	800a79c <mode_execution+0xc4>
 800a746:	2b04      	cmp	r3, #4
 800a748:	d828      	bhi.n	800a79c <mode_execution+0xc4>
 800a74a:	a201      	add	r2, pc, #4	; (adr r2, 800a750 <mode_execution+0x78>)
 800a74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a750:	0800a76b 	.word	0x0800a76b
 800a754:	0800a775 	.word	0x0800a775
 800a758:	0800a77f 	.word	0x0800a77f
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	0800a79b 	.word	0x0800a79b
 800a764:	2b64      	cmp	r3, #100	; 0x64
 800a766:	d014      	beq.n	800a792 <mode_execution+0xba>
	case 100://エラー脱出
		wait_ms(10);
	break;

	}
}
 800a768:	e018      	b.n	800a79c <mode_execution+0xc4>
		mode_PLtest(now_mode2);
 800a76a:	79bb      	ldrb	r3, [r7, #6]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 f821 	bl	800a7b4 <mode_PLtest>
	break;
 800a772:	e013      	b.n	800a79c <mode_execution+0xc4>
		mode_Running(now_mode2);
 800a774:	79bb      	ldrb	r3, [r7, #6]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f936 	bl	800a9e8 <mode_Running>
	break;
 800a77c:	e00e      	b.n	800a79c <mode_execution+0xc4>
		mode_Tuning(now_mode2);
 800a77e:	79bb      	ldrb	r3, [r7, #6]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f97f 	bl	800aa84 <mode_Tuning>
	break;
 800a786:	e009      	b.n	800a79c <mode_execution+0xc4>
		mode_Log(now_mode2);
 800a788:	79bb      	ldrb	r3, [r7, #6]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fa6a 	bl	800ac64 <mode_Log>
	break;
 800a790:	e004      	b.n	800a79c <mode_execution+0xc4>
		wait_ms(10);
 800a792:	200a      	movs	r0, #10
 800a794:	f7f9 fa54 	bl	8003c40 <wait_ms>
	break;
 800a798:	e000      	b.n	800a79c <mode_execution+0xc4>
	break;
 800a79a:	bf00      	nop
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	08014d9c 	.word	0x08014d9c
 800a7a8:	08014db0 	.word	0x08014db0
 800a7ac:	200003b0 	.word	0x200003b0
 800a7b0:	20000914 	.word	0x20000914

0800a7b4 <mode_PLtest>:

void mode_PLtest(unsigned char now_mode2){
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b091      	sub	sp, #68	; 0x44
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
	uint8_t Pin=0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hello[] = "Hello World\n\r";
 800a7c4:	4b7e      	ldr	r3, [pc, #504]	; (800a9c0 <mode_PLtest+0x20c>)
 800a7c6:	f107 0420 	add.w	r4, r7, #32
 800a7ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a7cc:	c407      	stmia	r4!, {r0, r1, r2}
 800a7ce:	8023      	strh	r3, [r4, #0]
	char strBuffer[17] = {0};
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	605a      	str	r2, [r3, #4]
 800a7de:	609a      	str	r2, [r3, #8]
 800a7e0:	731a      	strb	r2, [r3, #12]


	switch (now_mode2) {
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b0c      	cmp	r3, #12
 800a7e6:	f200 80e7 	bhi.w	800a9b8 <mode_PLtest+0x204>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <mode_PLtest+0x3c>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a841 	.word	0x0800a841
 800a7f4:	0800a891 	.word	0x0800a891
 800a7f8:	0800a8dd 	.word	0x0800a8dd
 800a7fc:	0800a905 	.word	0x0800a905
 800a800:	0800a937 	.word	0x0800a937
 800a804:	0800a943 	.word	0x0800a943
 800a808:	0800a975 	.word	0x0800a975
 800a80c:	0800a981 	.word	0x0800a981
 800a810:	0800a989 	.word	0x0800a989
 800a814:	0800a991 	.word	0x0800a991
 800a818:	0800a9b7 	.word	0x0800a9b7
 800a81c:	0800a9b7 	.word	0x0800a9b7
 800a820:	0800a9b7 	.word	0x0800a9b7
		case 0://LED
			while(read_switch1()==0){
			write_LED(1);
 800a824:	2001      	movs	r0, #1
 800a826:	f7f7 ff51 	bl	80026cc <write_LED>
			HAL_Delay(500);
 800a82a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a82e:	f001 fe5b 	bl	800c4e8 <HAL_Delay>
			write_LED(0);
 800a832:	2000      	movs	r0, #0
 800a834:	f7f7 ff4a 	bl	80026cc <write_LED>
			HAL_Delay(500);
 800a838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a83c:	f001 fe54 	bl	800c4e8 <HAL_Delay>
			while(read_switch1()==0){
 800a840:	f7f9 f9ba 	bl	8003bb8 <read_switch1>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0ec      	beq.n	800a824 <mode_PLtest+0x70>
			}
		break;
 800a84a:	e0b5      	b.n	800a9b8 <mode_PLtest+0x204>
		case 1://SWITCH
			while(read_switch1()==0){
			if (read_switch2()==1 && Pin==0){
 800a84c:	f7f9 f9ca 	bl	8003be4 <read_switch2>
 800a850:	4603      	mov	r3, r0
 800a852:	2b01      	cmp	r3, #1
 800a854:	d10a      	bne.n	800a86c <mode_PLtest+0xb8>
 800a856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <mode_PLtest+0xb8>
				Pin=1;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800a864:	2064      	movs	r0, #100	; 0x64
 800a866:	f001 fe3f 	bl	800c4e8 <HAL_Delay>
 800a86a:	e00e      	b.n	800a88a <mode_PLtest+0xd6>
			}else if(read_switch2()==1 && Pin==1){
 800a86c:	f7f9 f9ba 	bl	8003be4 <read_switch2>
 800a870:	4603      	mov	r3, r0
 800a872:	2b01      	cmp	r3, #1
 800a874:	d109      	bne.n	800a88a <mode_PLtest+0xd6>
 800a876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d105      	bne.n	800a88a <mode_PLtest+0xd6>
				Pin=0;
 800a87e:	2300      	movs	r3, #0
 800a880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				HAL_Delay(100);
 800a884:	2064      	movs	r0, #100	; 0x64
 800a886:	f001 fe2f 	bl	800c4e8 <HAL_Delay>
			}
			write_LED(1);
 800a88a:	2001      	movs	r0, #1
 800a88c:	f7f7 ff1e 	bl	80026cc <write_LED>
			while(read_switch1()==0){
 800a890:	f7f9 f992 	bl	8003bb8 <read_switch1>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0d8      	beq.n	800a84c <mode_PLtest+0x98>
			}
		break;
 800a89a:	e08d      	b.n	800a9b8 <mode_PLtest+0x204>
		case 2://USART

			while(read_switch1()==0){
			// test USART2
			setbuf(stdout, NULL);
 800a89c:	4b49      	ldr	r3, [pc, #292]	; (800a9c4 <mode_PLtest+0x210>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f007 fe45 	bl	8012534 <setbuf>
			printf("hello=%s", hello);
 800a8aa:	f107 0320 	add.w	r3, r7, #32
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4845      	ldr	r0, [pc, #276]	; (800a9c8 <mode_PLtest+0x214>)
 800a8b2:	f007 fd9b 	bl	80123ec <iprintf>
			uint8_t hoge = 3;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			float PI=3.14;
 800a8bc:	4b43      	ldr	r3, [pc, #268]	; (800a9cc <mode_PLtest+0x218>)
 800a8be:	633b      	str	r3, [r7, #48]	; 0x30
			printf("hoge=%d\n", hoge);
 800a8c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4842      	ldr	r0, [pc, #264]	; (800a9d0 <mode_PLtest+0x21c>)
 800a8c8:	f007 fd90 	bl	80123ec <iprintf>
			printf("M_PI=%f\n", PI); // @suppress("Float formatting support")
 800a8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ce:	f7f5 fe3b 	bl	8000548 <__aeabi_f2d>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	483f      	ldr	r0, [pc, #252]	; (800a9d4 <mode_PLtest+0x220>)
 800a8d8:	f007 fd88 	bl	80123ec <iprintf>
			while(read_switch1()==0){
 800a8dc:	f7f9 f96c 	bl	8003bb8 <read_switch1>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0da      	beq.n	800a89c <mode_PLtest+0xe8>
			}
		break;
 800a8e6:	e067      	b.n	800a9b8 <mode_PLtest+0x204>
		case 3://timer
			while(read_switch1()==0){
				write_LED(1);
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f7f7 feef 	bl	80026cc <write_LED>
				wait_ms(500);
 800a8ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8f2:	f7f9 f9a5 	bl	8003c40 <wait_ms>
				write_LED(0);
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	f7f7 fee8 	bl	80026cc <write_LED>
				wait_ms(500);
 800a8fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a900:	f7f9 f99e 	bl	8003c40 <wait_ms>
			while(read_switch1()==0){
 800a904:	f7f9 f958 	bl	8003bb8 <read_switch1>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ec      	beq.n	800a8e8 <mode_PLtest+0x134>
				}
		break;
 800a90e:	e053      	b.n	800a9b8 <mode_PLtest+0x204>
		case 4://sensor
			// sensor test
			while(read_switch1()==0){
			//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer) / sizeof(uint16_t));
			//printf("BATT=%f\n",g_V_batt);
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d\n", g_sensor[0][0],g_sensor[1][0],g_sensor[2][0],g_sensor[3][0]);
 800a910:	4b31      	ldr	r3, [pc, #196]	; (800a9d8 <mode_PLtest+0x224>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	4b30      	ldr	r3, [pc, #192]	; (800a9d8 <mode_PLtest+0x224>)
 800a916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a918:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <mode_PLtest+0x224>)
 800a91a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800a91e:	4b2e      	ldr	r3, [pc, #184]	; (800a9d8 <mode_PLtest+0x224>)
 800a920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4603      	mov	r3, r0
 800a928:	482c      	ldr	r0, [pc, #176]	; (800a9dc <mode_PLtest+0x228>)
 800a92a:	f007 fd5f 	bl	80123ec <iprintf>
			wait_ms(500);
 800a92e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a932:	f7f9 f985 	bl	8003c40 <wait_ms>
			while(read_switch1()==0){
 800a936:	f7f9 f93f 	bl	8003bb8 <read_switch1>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0e7      	beq.n	800a910 <mode_PLtest+0x15c>
			}
		break;
 800a940:	e03a      	b.n	800a9b8 <mode_PLtest+0x204>
		case 5://speaker
			pl_test_speaker();
 800a942:	f7f8 f995 	bl	8002c70 <pl_test_speaker>
		break;
 800a946:	e037      	b.n	800a9b8 <mode_PLtest+0x204>
		case 6://LCD
			while(read_switch1()==0){
			sprintf(strBuffer, "CNT=%04d", Pin);
 800a948:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	4923      	ldr	r1, [pc, #140]	; (800a9e0 <mode_PLtest+0x22c>)
 800a952:	4618      	mov	r0, r3
 800a954:	f007 febc 	bl	80126d0 <siprintf>
			Pin++;
 800a958:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a95c:	3301      	adds	r3, #1
 800a95e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_lcd_pos(1, 0);
 800a962:	2100      	movs	r1, #0
 800a964:	2001      	movs	r0, #1
 800a966:	f7f7 fe8e 	bl	8002686 <pl_lcd_pos>
			pl_lcd_puts(strBuffer);
 800a96a:	f107 030c 	add.w	r3, r7, #12
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f7 fe4e 	bl	8002610 <pl_lcd_puts>
			while(read_switch1()==0){
 800a974:	f7f9 f920 	bl	8003bb8 <read_switch1>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0e4      	beq.n	800a948 <mode_PLtest+0x194>
			}
		break;
 800a97e:	e01b      	b.n	800a9b8 <mode_PLtest+0x204>
		case 7://motor
		    control_test_motor(0);
 800a980:	2000      	movs	r0, #0
 800a982:	f7f6 fb03 	bl	8000f8c <control_test_motor>
		break;
 800a986:	e017      	b.n	800a9b8 <mode_PLtest+0x204>
		case 8://motor+sensor
			control_test_motor(1);
 800a988:	2001      	movs	r0, #1
 800a98a:	f7f6 faff 	bl	8000f8c <control_test_motor>
		break;
 800a98e:	e013      	b.n	800a9b8 <mode_PLtest+0x204>
		case 9://record
			record_mode=1;
 800a990:	4b14      	ldr	r3, [pc, #80]	; (800a9e4 <mode_PLtest+0x230>)
 800a992:	2201      	movs	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
			wait_ms(1000);
 800a996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a99a:	f7f9 f951 	bl	8003c40 <wait_ms>
			while(read_switch1()==0){
 800a99e:	e002      	b.n	800a9a6 <mode_PLtest+0x1f2>
			record_mode=0;
 800a9a0:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <mode_PLtest+0x230>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	701a      	strb	r2, [r3, #0]
			while(read_switch1()==0){
 800a9a6:	f7f9 f907 	bl	8003bb8 <read_switch1>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0f7      	beq.n	800a9a0 <mode_PLtest+0x1ec>
			}
			record_print();
 800a9b0:	f000 fa28 	bl	800ae04 <record_print>
		break;
 800a9b4:	e000      	b.n	800a9b8 <mode_PLtest+0x204>
		case 10://flash
		break;
 800a9b6:	bf00      	nop
		break;
		case 12://PLname
		break;
	}

}
 800a9b8:	bf00      	nop
 800a9ba:	373c      	adds	r7, #60	; 0x3c
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd90      	pop	{r4, r7, pc}
 800a9c0:	08014e00 	.word	0x08014e00
 800a9c4:	2000000c 	.word	0x2000000c
 800a9c8:	08014db8 	.word	0x08014db8
 800a9cc:	4048f5c3 	.word	0x4048f5c3
 800a9d0:	08014dc4 	.word	0x08014dc4
 800a9d4:	08014dd0 	.word	0x08014dd0
 800a9d8:	2000023c 	.word	0x2000023c
 800a9dc:	08014ddc 	.word	0x08014ddc
 800a9e0:	08014da4 	.word	0x08014da4
 800a9e4:	2000cdf0 	.word	0x2000cdf0

0800a9e8 <mode_Running>:

void mode_Running(unsigned char now_mode2){
 800a9e8:	b590      	push	{r4, r7, lr}
 800a9ea:	b0d3      	sub	sp, #332	; 0x14c
 800a9ec:	af50      	add	r7, sp, #320	; 0x140
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	71fb      	strb	r3, [r7, #7]

	switch (now_mode2) {
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	2b07      	cmp	r3, #7
 800a9f6:	d836      	bhi.n	800aa66 <mode_Running+0x7e>
 800a9f8:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <mode_Running+0x18>)
 800a9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fe:	bf00      	nop
 800aa00:	0800aa21 	.word	0x0800aa21
 800aa04:	0800aa27 	.word	0x0800aa27
 800aa08:	0800aa65 	.word	0x0800aa65
 800aa0c:	0800aa3d 	.word	0x0800aa3d
 800aa10:	0800aa65 	.word	0x0800aa65
 800aa14:	0800aa65 	.word	0x0800aa65
 800aa18:	0800aa65 	.word	0x0800aa65
 800aa1c:	0800aa65 	.word	0x0800aa65
		case 0://迷路情報の可視化
			maze_display();
 800aa20:	f7ff fbc8 	bl	800a1b4 <maze_display>
		break;
 800aa24:	e01f      	b.n	800aa66 <mode_Running+0x7e>
		case 1://足立法
			AdatiWayReturn(500, 500, 7000,7000);
 800aa26:	eddf 1a12 	vldr	s3, [pc, #72]	; 800aa70 <mode_Running+0x88>
 800aa2a:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800aa70 <mode_Running+0x88>
 800aa2e:	eddf 0a11 	vldr	s1, [pc, #68]	; 800aa74 <mode_Running+0x8c>
 800aa32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800aa74 <mode_Running+0x8c>
 800aa36:	f7fc f979 	bl	8006d2c <AdatiWayReturn>
		break;
 800aa3a:	e014      	b.n	800aa66 <mode_Running+0x7e>
		case 2://足立法(帰りあり)
		break;
		case 3://最短走行(パス圧縮なし)
			ShortestWay(1000,10000,speed600_shortest,0);
 800aa3c:	4c0e      	ldr	r4, [pc, #56]	; (800aa78 <mode_Running+0x90>)
 800aa3e:	2300      	movs	r3, #0
 800aa40:	934e      	str	r3, [sp, #312]	; 0x138
 800aa42:	4668      	mov	r0, sp
 800aa44:	f104 0310 	add.w	r3, r4, #16
 800aa48:	f44f 729c 	mov.w	r2, #312	; 0x138
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f007 f84d 	bl	8011aec <memcpy>
 800aa52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aa56:	eddf 0a09 	vldr	s1, [pc, #36]	; 800aa7c <mode_Running+0x94>
 800aa5a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800aa80 <mode_Running+0x98>
 800aa5e:	f7fc ff9b 	bl	8007998 <ShortestWay>
		break;
 800aa62:	e000      	b.n	800aa66 <mode_Running+0x7e>
		break;
 800aa64:	bf00      	nop
		break;
		case 7://Runname
		break;
	}

}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd90      	pop	{r4, r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	45dac000 	.word	0x45dac000
 800aa74:	43fa0000 	.word	0x43fa0000
 800aa78:	20000b98 	.word	0x20000b98
 800aa7c:	461c4000 	.word	0x461c4000
 800aa80:	447a0000 	.word	0x447a0000

0800aa84 <mode_Tuning>:


void mode_Tuning(unsigned char now_mode2){
 800aa84:	b590      	push	{r4, r7, lr}
 800aa86:	b0d3      	sub	sp, #332	; 0x14c
 800aa88:	af50      	add	r7, sp, #320	; 0x140
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]

	pl_motor_standby(1);
 800aa8e:	2001      	movs	r0, #1
 800aa90:	f7f7 fe4a 	bl	8002728 <pl_motor_standby>
	while(read_switch1()==0 || read_switch2()==0){
 800aa94:	e002      	b.n	800aa9c <mode_Tuning+0x18>
		wait_ms(1);
 800aa96:	2001      	movs	r0, #1
 800aa98:	f7f9 f8d2 	bl	8003c40 <wait_ms>
	while(read_switch1()==0 || read_switch2()==0){
 800aa9c:	f7f9 f88c 	bl	8003bb8 <read_switch1>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0f7      	beq.n	800aa96 <mode_Tuning+0x12>
 800aaa6:	f7f9 f89d 	bl	8003be4 <read_switch2>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f2      	beq.n	800aa96 <mode_Tuning+0x12>
		}
	wait_ms(2000);
 800aab0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aab4:	f7f9 f8c4 	bl	8003c40 <wait_ms>
	switch (now_mode2) {
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b10      	cmp	r3, #16
 800aabc:	f200 80c9 	bhi.w	800ac52 <mode_Tuning+0x1ce>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <mode_Tuning+0x44>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800ab0d 	.word	0x0800ab0d
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab25 	.word	0x0800ab25
 800aad4:	0800ab31 	.word	0x0800ab31
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab79 	.word	0x0800ab79
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800abc1 	.word	0x0800abc1
 800aae8:	0800abe5 	.word	0x0800abe5
 800aaec:	0800ac09 	.word	0x0800ac09
 800aaf0:	0800ac2d 	.word	0x0800ac2d
 800aaf4:	0800ac51 	.word	0x0800ac51
 800aaf8:	0800ac51 	.word	0x0800ac51
 800aafc:	0800ac51 	.word	0x0800ac51
 800ab00:	0800ac51 	.word	0x0800ac51
 800ab04:	0800ac51 	.word	0x0800ac51
 800ab08:	0800ac51 	.word	0x0800ac51
		case 0://タイヤ径
			control_test_motor2(0,0,10);
 800ab0c:	220a      	movs	r2, #10
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2000      	movs	r0, #0
 800ab12:	f7f6 fa8b 	bl	800102c <control_test_motor2>
		break;
 800ab16:	e09c      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 1://トレッド幅
			control_test_motor2(1,0,5);
 800ab18:	2205      	movs	r2, #5
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	f7f6 fa85 	bl	800102c <control_test_motor2>
		break;
 800ab22:	e096      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 2://壁制御
			control_test_motor2(0,1,6);
 800ab24:	2206      	movs	r2, #6
 800ab26:	2101      	movs	r1, #1
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f7f6 fa7f 	bl	800102c <control_test_motor2>
		break;
 800ab2e:	e090      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 3://右スラローム(探索)
			testturning(speed500_exploration,0,0);
 800ab30:	4c4a      	ldr	r4, [pc, #296]	; (800ac5c <mode_Tuning+0x1d8>)
 800ab32:	2300      	movs	r3, #0
 800ab34:	934f      	str	r3, [sp, #316]	; 0x13c
 800ab36:	2300      	movs	r3, #0
 800ab38:	934e      	str	r3, [sp, #312]	; 0x138
 800ab3a:	4668      	mov	r0, sp
 800ab3c:	f104 0310 	add.w	r3, r4, #16
 800ab40:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ab44:	4619      	mov	r1, r3
 800ab46:	f006 ffd1 	bl	8011aec <memcpy>
 800ab4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab4e:	f7fc f885 	bl	8006c5c <testturning>
		break;
 800ab52:	e07e      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 4://左スラローム(探索)
			testturning(speed500_exploration,1,0);
 800ab54:	4c41      	ldr	r4, [pc, #260]	; (800ac5c <mode_Tuning+0x1d8>)
 800ab56:	2300      	movs	r3, #0
 800ab58:	934f      	str	r3, [sp, #316]	; 0x13c
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	934e      	str	r3, [sp, #312]	; 0x138
 800ab5e:	4668      	mov	r0, sp
 800ab60:	f104 0310 	add.w	r3, r4, #16
 800ab64:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f006 ffbf 	bl	8011aec <memcpy>
 800ab6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab72:	f7fc f873 	bl	8006c5c <testturning>
		break;
 800ab76:	e06c      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 5://右スラローム
			testturning(speed900_shortest,0,1);
 800ab78:	4c39      	ldr	r4, [pc, #228]	; (800ac60 <mode_Tuning+0x1dc>)
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	934f      	str	r3, [sp, #316]	; 0x13c
 800ab7e:	2300      	movs	r3, #0
 800ab80:	934e      	str	r3, [sp, #312]	; 0x138
 800ab82:	4668      	mov	r0, sp
 800ab84:	f104 0310 	add.w	r3, r4, #16
 800ab88:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f006 ffad 	bl	8011aec <memcpy>
 800ab92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab96:	f7fc f861 	bl	8006c5c <testturning>
		break;
 800ab9a:	e05a      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 6://左スラローム
			testturning(speed900_shortest,1,1);
 800ab9c:	4c30      	ldr	r4, [pc, #192]	; (800ac60 <mode_Tuning+0x1dc>)
 800ab9e:	2301      	movs	r3, #1
 800aba0:	934f      	str	r3, [sp, #316]	; 0x13c
 800aba2:	2301      	movs	r3, #1
 800aba4:	934e      	str	r3, [sp, #312]	; 0x138
 800aba6:	4668      	mov	r0, sp
 800aba8:	f104 0310 	add.w	r3, r4, #16
 800abac:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abb0:	4619      	mov	r1, r3
 800abb2:	f006 ff9b 	bl	8011aec <memcpy>
 800abb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800abba:	f7fc f84f 	bl	8006c5c <testturning>
		break;
 800abbe:	e048      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 7://右壁切れ
			testturning(speed900_shortest,2,1);
 800abc0:	4c27      	ldr	r4, [pc, #156]	; (800ac60 <mode_Tuning+0x1dc>)
 800abc2:	2301      	movs	r3, #1
 800abc4:	934f      	str	r3, [sp, #316]	; 0x13c
 800abc6:	2302      	movs	r3, #2
 800abc8:	934e      	str	r3, [sp, #312]	; 0x138
 800abca:	4668      	mov	r0, sp
 800abcc:	f104 0310 	add.w	r3, r4, #16
 800abd0:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abd4:	4619      	mov	r1, r3
 800abd6:	f006 ff89 	bl	8011aec <memcpy>
 800abda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800abde:	f7fc f83d 	bl	8006c5c <testturning>
		break;
 800abe2:	e036      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 8://左壁切れ
			testturning(speed900_shortest,3,1);
 800abe4:	4c1e      	ldr	r4, [pc, #120]	; (800ac60 <mode_Tuning+0x1dc>)
 800abe6:	2301      	movs	r3, #1
 800abe8:	934f      	str	r3, [sp, #316]	; 0x13c
 800abea:	2303      	movs	r3, #3
 800abec:	934e      	str	r3, [sp, #312]	; 0x138
 800abee:	4668      	mov	r0, sp
 800abf0:	f104 0310 	add.w	r3, r4, #16
 800abf4:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abf8:	4619      	mov	r1, r3
 800abfa:	f006 ff77 	bl	8011aec <memcpy>
 800abfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac02:	f7fc f82b 	bl	8006c5c <testturning>
		break;
 800ac06:	e024      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 9://右大回り90
			testturning(speed900_shortest,4,1);
 800ac08:	4c15      	ldr	r4, [pc, #84]	; (800ac60 <mode_Tuning+0x1dc>)
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac0e:	2304      	movs	r3, #4
 800ac10:	934e      	str	r3, [sp, #312]	; 0x138
 800ac12:	4668      	mov	r0, sp
 800ac14:	f104 0310 	add.w	r3, r4, #16
 800ac18:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	f006 ff65 	bl	8011aec <memcpy>
 800ac22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac26:	f7fc f819 	bl	8006c5c <testturning>
		break;
 800ac2a:	e012      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 10://左大回り90
			testturning(speed900_shortest,5,1);
 800ac2c:	4c0c      	ldr	r4, [pc, #48]	; (800ac60 <mode_Tuning+0x1dc>)
 800ac2e:	2301      	movs	r3, #1
 800ac30:	934f      	str	r3, [sp, #316]	; 0x13c
 800ac32:	2305      	movs	r3, #5
 800ac34:	934e      	str	r3, [sp, #312]	; 0x138
 800ac36:	4668      	mov	r0, sp
 800ac38:	f104 0310 	add.w	r3, r4, #16
 800ac3c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac40:	4619      	mov	r1, r3
 800ac42:	f006 ff53 	bl	8011aec <memcpy>
 800ac46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ac4a:	f7fc f807 	bl	8006c5c <testturning>
		break;
 800ac4e:	e000      	b.n	800ac52 <mode_Tuning+0x1ce>
		case 11://右大回り180
		break;
 800ac50:	bf00      	nop
		break;
		case 16://左斜め135
		break;
	}

}
 800ac52:	bf00      	nop
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd90      	pop	{r4, r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000a50 	.word	0x20000a50
 800ac60:	20000ce0 	.word	0x20000ce0

0800ac64 <mode_Log>:

void mode_Log(unsigned char now_mode2){
 800ac64:	b590      	push	{r4, r7, lr}
 800ac66:	b0d3      	sub	sp, #332	; 0x14c
 800ac68:	af50      	add	r7, sp, #320	; 0x140
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	71fb      	strb	r3, [r7, #7]

	pl_motor_standby(1);
 800ac6e:	2001      	movs	r0, #1
 800ac70:	f7f7 fd5a 	bl	8002728 <pl_motor_standby>

	switch (now_mode2) {
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d86b      	bhi.n	800ad52 <mode_Log+0xee>
 800ac7a:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <mode_Log+0x1c>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800acc5 	.word	0x0800acc5
 800ac84:	0800ad51 	.word	0x0800ad51
 800ac88:	0800ad51 	.word	0x0800ad51
 800ac8c:	0800acfd 	.word	0x0800acfd
 800ac90:	0800ad21 	.word	0x0800ad21
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800ad51 	.word	0x0800ad51
 800ac9c:	0800ad51 	.word	0x0800ad51
 800aca0:	0800ad51 	.word	0x0800ad51
 800aca4:	0800ad51 	.word	0x0800ad51
 800aca8:	0800ad51 	.word	0x0800ad51
 800acac:	0800ad51 	.word	0x0800ad51
 800acb0:	0800ad51 	.word	0x0800ad51
 800acb4:	0800ad51 	.word	0x0800ad51
 800acb8:	0800ad51 	.word	0x0800ad51
 800acbc:	0800ad51 	.word	0x0800ad51
 800acc0:	0800ad51 	.word	0x0800ad51
		case 0://タイヤ径
			record_mode=1;
 800acc4:	4b25      	ldr	r3, [pc, #148]	; (800ad5c <mode_Log+0xf8>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	701a      	strb	r2, [r3, #0]
			control_test_motor2(0,1,5);
 800acca:	2205      	movs	r2, #5
 800accc:	2101      	movs	r1, #1
 800acce:	2000      	movs	r0, #0
 800acd0:	f7f6 f9ac 	bl	800102c <control_test_motor2>
			record_mode=0;
 800acd4:	4b21      	ldr	r3, [pc, #132]	; (800ad5c <mode_Log+0xf8>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
			while(read_switch1()==0 || read_switch2()==0){
 800acda:	e002      	b.n	800ace2 <mode_Log+0x7e>
				wait_ms(1);
 800acdc:	2001      	movs	r0, #1
 800acde:	f7f8 ffaf 	bl	8003c40 <wait_ms>
			while(read_switch1()==0 || read_switch2()==0){
 800ace2:	f7f8 ff69 	bl	8003bb8 <read_switch1>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0f7      	beq.n	800acdc <mode_Log+0x78>
 800acec:	f7f8 ff7a 	bl	8003be4 <read_switch2>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f2      	beq.n	800acdc <mode_Log+0x78>
				}
			record_print();
 800acf6:	f000 f885 	bl	800ae04 <record_print>
		break;
 800acfa:	e02a      	b.n	800ad52 <mode_Log+0xee>
		case 1://トレッド幅
		break;
		case 2://壁制御
		break;
		case 3://右スラローム(探索)
			testturning(speed500_exploration,0,0);
 800acfc:	4c18      	ldr	r4, [pc, #96]	; (800ad60 <mode_Log+0xfc>)
 800acfe:	2300      	movs	r3, #0
 800ad00:	934f      	str	r3, [sp, #316]	; 0x13c
 800ad02:	2300      	movs	r3, #0
 800ad04:	934e      	str	r3, [sp, #312]	; 0x138
 800ad06:	4668      	mov	r0, sp
 800ad08:	f104 0310 	add.w	r3, r4, #16
 800ad0c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ad10:	4619      	mov	r1, r3
 800ad12:	f006 feeb 	bl	8011aec <memcpy>
 800ad16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad1a:	f7fb ff9f 	bl	8006c5c <testturning>
		break;
 800ad1e:	e018      	b.n	800ad52 <mode_Log+0xee>
		case 4://左スラローム(探索)
			testturning(speed500_exploration,1,0);
 800ad20:	4c0f      	ldr	r4, [pc, #60]	; (800ad60 <mode_Log+0xfc>)
 800ad22:	2300      	movs	r3, #0
 800ad24:	934f      	str	r3, [sp, #316]	; 0x13c
 800ad26:	2301      	movs	r3, #1
 800ad28:	934e      	str	r3, [sp, #312]	; 0x138
 800ad2a:	4668      	mov	r0, sp
 800ad2c:	f104 0310 	add.w	r3, r4, #16
 800ad30:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ad34:	4619      	mov	r1, r3
 800ad36:	f006 fed9 	bl	8011aec <memcpy>
 800ad3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ad3e:	f7fb ff8d 	bl	8006c5c <testturning>
		break;
 800ad42:	e006      	b.n	800ad52 <mode_Log+0xee>
		case 5://右スラローム
			control_test_motor2(2,1,0);
 800ad44:	2200      	movs	r2, #0
 800ad46:	2101      	movs	r1, #1
 800ad48:	2002      	movs	r0, #2
 800ad4a:	f7f6 f96f 	bl	800102c <control_test_motor2>
		break;
 800ad4e:	e000      	b.n	800ad52 <mode_Log+0xee>
		break;
 800ad50:	bf00      	nop
		break;
		case 16://左斜め135
		break;
	}

}
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd90      	pop	{r4, r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	2000cdf0 	.word	0x2000cdf0
 800ad60:	20000a50 	.word	0x20000a50

0800ad64 <record_reset>:
//int SEN_record[5][15];
//int SEN_recordD[5][15];



void record_reset(void) {
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
	record_mode=0;
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <record_reset+0x1c>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 800ad6e:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <record_reset+0x20>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]
}
 800ad74:	bf00      	nop
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	2000cdf0 	.word	0x2000cdf0
 800ad84:	2000cdf4 	.word	0x2000cdf4

0800ad88 <record_data>:



void record_data(float *input_record_data, int numlen) {
 800ad88:	b490      	push	{r4, r7}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	if (record_mode == 1) {
 800ad92:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <record_data+0x70>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d128      	bne.n	800adec <record_data+0x64>
		for (int record_count = 0; record_count < numlen; record_count++) {
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	e013      	b.n	800adc8 <record_data+0x40>
		record_value[record_count][record_time] = input_record_data[record_count];
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	441a      	add	r2, r3
 800ada8:	4b14      	ldr	r3, [pc, #80]	; (800adfc <record_data+0x74>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6812      	ldr	r2, [r2, #0]
 800adae:	4814      	ldr	r0, [pc, #80]	; (800ae00 <record_data+0x78>)
 800adb0:	68f9      	ldr	r1, [r7, #12]
 800adb2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800adb6:	fb04 f101 	mul.w	r1, r4, r1
 800adba:	440b      	add	r3, r1
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4403      	add	r3, r0
 800adc0:	601a      	str	r2, [r3, #0]
		for (int record_count = 0; record_count < numlen; record_count++) {
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	dbe7      	blt.n	800ada0 <record_data+0x18>
		}


		record_time++;
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <record_data+0x74>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	4a09      	ldr	r2, [pc, #36]	; (800adfc <record_data+0x74>)
 800add8:	6013      	str	r3, [r2, #0]
		if (record_time >= max_record_time) {
 800adda:	4b08      	ldr	r3, [pc, #32]	; (800adfc <record_data+0x74>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ade2:	4293      	cmp	r3, r2
 800ade4:	dd02      	ble.n	800adec <record_data+0x64>
					record_mode = 0;
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <record_data+0x70>)
 800ade8:	2200      	movs	r2, #0
 800adea:	701a      	strb	r2, [r3, #0]
				}
	}
}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bc90      	pop	{r4, r7}
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	2000cdf0 	.word	0x2000cdf0
 800adfc:	2000cdf4 	.word	0x2000cdf4
 800ae00:	20001270 	.word	0x20001270

0800ae04 <record_print>:

void record_print(void) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
	int a;
	for (a = 0; a <= record_time; a++) {
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	607b      	str	r3, [r7, #4]
 800ae0e:	e025      	b.n	800ae5c <record_print+0x58>
		printf("%d", a);
 800ae10:	6879      	ldr	r1, [r7, #4]
 800ae12:	4817      	ldr	r0, [pc, #92]	; (800ae70 <record_print+0x6c>)
 800ae14:	f007 faea 	bl	80123ec <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 800ae18:	2300      	movs	r3, #0
 800ae1a:	603b      	str	r3, [r7, #0]
 800ae1c:	e015      	b.n	800ae4a <record_print+0x46>
		printf(",%f", record_value[record_count][a]);
 800ae1e:	4915      	ldr	r1, [pc, #84]	; (800ae74 <record_print+0x70>)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ae26:	fb03 f202 	mul.w	r2, r3, r2
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f5 fb87 	bl	8000548 <__aeabi_f2d>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	480e      	ldr	r0, [pc, #56]	; (800ae78 <record_print+0x74>)
 800ae40:	f007 fad4 	bl	80123ec <iprintf>
		for (int record_count = 0; record_count < max_record_num; record_count++) {
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	3301      	adds	r3, #1
 800ae48:	603b      	str	r3, [r7, #0]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	dde6      	ble.n	800ae1e <record_print+0x1a>
		}
		printf("\n");
 800ae50:	200a      	movs	r0, #10
 800ae52:	f007 fae3 	bl	801241c <putchar>
	for (a = 0; a <= record_time; a++) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	607b      	str	r3, [r7, #4]
 800ae5c:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <record_print+0x78>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	ddd4      	ble.n	800ae10 <record_print+0xc>
	}
}
 800ae66:	bf00      	nop
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	08014e10 	.word	0x08014e10
 800ae74:	20001270 	.word	0x20001270
 800ae78:	08014e14 	.word	0x08014e14
 800ae7c:	2000cdf4 	.word	0x2000cdf4

0800ae80 <interrupt_record>:

void interrupt_record(void){
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0

	float r_data[max_record_num]={(float)(g_sensor[0][0]),(float)(g_sensor[1][0]),(float)(g_sensor[2][0]),(float)(g_sensor[3][0])};
 800ae86:	4b15      	ldr	r3, [pc, #84]	; (800aedc <interrupt_record+0x5c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae92:	edc7 7a00 	vstr	s15, [r7]
 800ae96:	4b11      	ldr	r3, [pc, #68]	; (800aedc <interrupt_record+0x5c>)
 800ae98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea2:	edc7 7a01 	vstr	s15, [r7, #4]
 800aea6:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <interrupt_record+0x5c>)
 800aea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb4:	edc7 7a02 	vstr	s15, [r7, #8]
 800aeb8:	4b08      	ldr	r3, [pc, #32]	; (800aedc <interrupt_record+0x5c>)
 800aeba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec6:	edc7 7a03 	vstr	s15, [r7, #12]
	//	float r_data[max_record_num]={g_TargetStraight.velocity};
	record_data(r_data, max_record_num);
 800aeca:	463b      	mov	r3, r7
 800aecc:	2104      	movs	r1, #4
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff ff5a 	bl	800ad88 <record_data>



}
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	2000023c 	.word	0x2000023c

0800aee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <HAL_MspInit+0x44>)
 800aee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeea:	4a0e      	ldr	r2, [pc, #56]	; (800af24 <HAL_MspInit+0x44>)
 800aeec:	f043 0301 	orr.w	r3, r3, #1
 800aef0:	6613      	str	r3, [r2, #96]	; 0x60
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <HAL_MspInit+0x44>)
 800aef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	607b      	str	r3, [r7, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aefe:	4b09      	ldr	r3, [pc, #36]	; (800af24 <HAL_MspInit+0x44>)
 800af00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af02:	4a08      	ldr	r2, [pc, #32]	; (800af24 <HAL_MspInit+0x44>)
 800af04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af08:	6593      	str	r3, [r2, #88]	; 0x58
 800af0a:	4b06      	ldr	r3, [pc, #24]	; (800af24 <HAL_MspInit+0x44>)
 800af0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40021000 	.word	0x40021000

0800af28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800af2c:	e7fe      	b.n	800af2c <NMI_Handler+0x4>

0800af2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af2e:	b480      	push	{r7}
 800af30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af32:	e7fe      	b.n	800af32 <HardFault_Handler+0x4>

0800af34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af34:	b480      	push	{r7}
 800af36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af38:	e7fe      	b.n	800af38 <MemManage_Handler+0x4>

0800af3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af3a:	b480      	push	{r7}
 800af3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af3e:	e7fe      	b.n	800af3e <BusFault_Handler+0x4>

0800af40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af44:	e7fe      	b.n	800af44 <UsageFault_Handler+0x4>

0800af46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af46:	b480      	push	{r7}
 800af48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af4a:	bf00      	nop
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af58:	bf00      	nop
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af62:	b480      	push	{r7}
 800af64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af66:	bf00      	nop
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af74:	f001 fa98 	bl	800c4a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af78:	bf00      	nop
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800af80:	4802      	ldr	r0, [pc, #8]	; (800af8c <DMA1_Channel1_IRQHandler+0x10>)
 800af82:	f003 f8b9 	bl	800e0f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800af86:	bf00      	nop
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200009bc 	.word	0x200009bc

0800af90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	  pl_interrupt_motor_count_L();
 800af94:	f7f7 fc7e 	bl	8002894 <pl_interrupt_motor_count_L>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800af98:	4802      	ldr	r0, [pc, #8]	; (800afa4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800af9a:	f005 fa9f 	bl	80104dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800af9e:	bf00      	nop
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	2000cdfc 	.word	0x2000cdfc

0800afa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  pl_interrupt_motor_count_R();
 800afac:	f7f7 fc9e 	bl	80028ec <pl_interrupt_motor_count_R>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800afb0:	4802      	ldr	r0, [pc, #8]	; (800afbc <TIM2_IRQHandler+0x14>)
 800afb2:	f005 fa93 	bl	80104dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	2000ce48 	.word	0x2000ce48

0800afc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800afc4:	4807      	ldr	r0, [pc, #28]	; (800afe4 <TIM6_DAC_IRQHandler+0x24>)
 800afc6:	f005 fa89 	bl	80104dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  pl_timer_count();
 800afca:	f7f8 fe2b 	bl	8003c24 <pl_timer_count>
  pl_interupt_getSensor();
 800afce:	f7f7 fe41 	bl	8002c54 <pl_interupt_getSensor>
  interrupt_calSensor();
 800afd2:	f7f7 f8b1 	bl	8002138 <interrupt_calSensor>
  interrupt_Motor();
 800afd6:	f7f6 f89f 	bl	8001118 <interrupt_Motor>
  interrupt_record();
 800afda:	f7ff ff51 	bl	800ae80 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2000ce94 	.word	0x2000ce94

0800afe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
	return 1;
 800afec:	2301      	movs	r3, #1
}
 800afee:	4618      	mov	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <_kill>:

int _kill(int pid, int sig)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b002:	f006 fd49 	bl	8011a98 <__errno>
 800b006:	4603      	mov	r3, r0
 800b008:	2216      	movs	r2, #22
 800b00a:	601a      	str	r2, [r3, #0]
	return -1;
 800b00c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <_exit>:

void _exit (int status)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b020:	f04f 31ff 	mov.w	r1, #4294967295
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ffe7 	bl	800aff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b02a:	e7fe      	b.n	800b02a <_exit+0x12>

0800b02c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e00a      	b.n	800b054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b03e:	f3af 8000 	nop.w
 800b042:	4601      	mov	r1, r0
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	60ba      	str	r2, [r7, #8]
 800b04a:	b2ca      	uxtb	r2, r1
 800b04c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	3301      	adds	r3, #1
 800b052:	617b      	str	r3, [r7, #20]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	dbf0      	blt.n	800b03e <_read+0x12>
	}

return len;
 800b05c:	687b      	ldr	r3, [r7, #4]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b074:	2300      	movs	r3, #0
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	e00a      	b.n	800b090 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, ptr++, 1, 1);
 800b07a:	68b9      	ldr	r1, [r7, #8]
 800b07c:	1c4b      	adds	r3, r1, #1
 800b07e:	60bb      	str	r3, [r7, #8]
 800b080:	2301      	movs	r3, #1
 800b082:	2201      	movs	r2, #1
 800b084:	4807      	ldr	r0, [pc, #28]	; (800b0a4 <_write+0x3c>)
 800b086:	f006 f8dd 	bl	8011244 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	3301      	adds	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	429a      	cmp	r2, r3
 800b096:	dbf0      	blt.n	800b07a <_write+0x12>
	}
	return len;
 800b098:	687b      	ldr	r3, [r7, #4]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	2000cf2c 	.word	0x2000cf2c

0800b0a8 <_close>:

int _close(int file)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	return -1;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b0d0:	605a      	str	r2, [r3, #4]
	return 0;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <_isatty>:

int _isatty(int file)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
	return 1;
 800b0e8:	2301      	movs	r3, #1
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
	return 0;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b118:	4a14      	ldr	r2, [pc, #80]	; (800b16c <_sbrk+0x5c>)
 800b11a:	4b15      	ldr	r3, [pc, #84]	; (800b170 <_sbrk+0x60>)
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b124:	4b13      	ldr	r3, [pc, #76]	; (800b174 <_sbrk+0x64>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b12c:	4b11      	ldr	r3, [pc, #68]	; (800b174 <_sbrk+0x64>)
 800b12e:	4a12      	ldr	r2, [pc, #72]	; (800b178 <_sbrk+0x68>)
 800b130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b132:	4b10      	ldr	r3, [pc, #64]	; (800b174 <_sbrk+0x64>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4413      	add	r3, r2
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d207      	bcs.n	800b150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b140:	f006 fcaa 	bl	8011a98 <__errno>
 800b144:	4603      	mov	r3, r0
 800b146:	220c      	movs	r2, #12
 800b148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	e009      	b.n	800b164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b150:	4b08      	ldr	r3, [pc, #32]	; (800b174 <_sbrk+0x64>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b156:	4b07      	ldr	r3, [pc, #28]	; (800b174 <_sbrk+0x64>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	4a05      	ldr	r2, [pc, #20]	; (800b174 <_sbrk+0x64>)
 800b160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b162:	68fb      	ldr	r3, [r7, #12]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20010000 	.word	0x20010000
 800b170:	00000400 	.word	0x00000400
 800b174:	2000cdf8 	.word	0x2000cdf8
 800b178:	2000cfc8 	.word	0x2000cfc8

0800b17c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b17c:	b480      	push	{r7}
 800b17e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b180:	4b06      	ldr	r3, [pc, #24]	; (800b19c <SystemInit+0x20>)
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <SystemInit+0x20>)
 800b188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b18c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b190:	bf00      	nop
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	e000ed00 	.word	0xe000ed00

0800b1a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b096      	sub	sp, #88	; 0x58
 800b1a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	605a      	str	r2, [r3, #4]
 800b1b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b1b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	605a      	str	r2, [r3, #4]
 800b1bc:	609a      	str	r2, [r3, #8]
 800b1be:	60da      	str	r2, [r3, #12]
 800b1c0:	611a      	str	r2, [r3, #16]
 800b1c2:	615a      	str	r2, [r3, #20]
 800b1c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b1c6:	1d3b      	adds	r3, r7, #4
 800b1c8:	222c      	movs	r2, #44	; 0x2c
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f006 fc9b 	bl	8011b08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b1d2:	4b39      	ldr	r3, [pc, #228]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1d4:	4a39      	ldr	r2, [pc, #228]	; (800b2bc <MX_TIM1_Init+0x11c>)
 800b1d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800b1d8:	4b37      	ldr	r3, [pc, #220]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1da:	2207      	movs	r2, #7
 800b1dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1de:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800b1e4:	4b34      	ldr	r3, [pc, #208]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1e6:	f242 720f 	movw	r2, #9999	; 0x270f
 800b1ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1ec:	4b32      	ldr	r3, [pc, #200]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b1f2:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1f8:	4b2f      	ldr	r3, [pc, #188]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b1fe:	482e      	ldr	r0, [pc, #184]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b200:	f004 ffae 	bl	8010160 <HAL_TIM_PWM_Init>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800b20a:	f7f9 f8a0 	bl	800434e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b20e:	2300      	movs	r3, #0
 800b210:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b212:	2300      	movs	r3, #0
 800b214:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b216:	2300      	movs	r3, #0
 800b218:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b21a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b21e:	4619      	mov	r1, r3
 800b220:	4825      	ldr	r0, [pc, #148]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b222:	f005 fec5 	bl	8010fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800b22c:	f7f9 f88f 	bl	800434e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b230:	2360      	movs	r3, #96	; 0x60
 800b232:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 800b234:	f241 3387 	movw	r3, #4999	; 0x1387
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b23a:	2300      	movs	r3, #0
 800b23c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b23e:	2300      	movs	r3, #0
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b242:	2300      	movs	r3, #0
 800b244:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b246:	2300      	movs	r3, #0
 800b248:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b24a:	2300      	movs	r3, #0
 800b24c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b24e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b252:	2200      	movs	r2, #0
 800b254:	4619      	mov	r1, r3
 800b256:	4818      	ldr	r0, [pc, #96]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b258:	f005 fa60 	bl	801071c <HAL_TIM_PWM_ConfigChannel>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800b262:	f7f9 f874 	bl	800434e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b276:	2300      	movs	r3, #0
 800b278:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b27a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b27e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b284:	2300      	movs	r3, #0
 800b286:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b292:	2300      	movs	r3, #0
 800b294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b296:	1d3b      	adds	r3, r7, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4807      	ldr	r0, [pc, #28]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b29c:	f005 feee 	bl	801107c <HAL_TIMEx_ConfigBreakDeadTime>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800b2a6:	f7f9 f852 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800b2aa:	4803      	ldr	r0, [pc, #12]	; (800b2b8 <MX_TIM1_Init+0x118>)
 800b2ac:	f000 f998 	bl	800b5e0 <HAL_TIM_MspPostInit>

}
 800b2b0:	bf00      	nop
 800b2b2:	3758      	adds	r7, #88	; 0x58
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	2000cdfc 	.word	0x2000cdfc
 800b2bc:	40012c00 	.word	0x40012c00

0800b2c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	; 0x28
 800b2c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2c6:	f107 031c 	add.w	r3, r7, #28
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	605a      	str	r2, [r3, #4]
 800b2d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	611a      	str	r2, [r3, #16]
 800b2e0:	615a      	str	r2, [r3, #20]
 800b2e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b2e4:	4b22      	ldr	r3, [pc, #136]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b2e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800b2ec:	4b20      	ldr	r3, [pc, #128]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b2ee:	2207      	movs	r2, #7
 800b2f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2f2:	4b1f      	ldr	r3, [pc, #124]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800b2f8:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b2fa:	f242 720f 	movw	r2, #9999	; 0x270f
 800b2fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b300:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b302:	2200      	movs	r2, #0
 800b304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b306:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b308:	2200      	movs	r2, #0
 800b30a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b30c:	4818      	ldr	r0, [pc, #96]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b30e:	f004 ff27 	bl	8010160 <HAL_TIM_PWM_Init>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800b318:	f7f9 f819 	bl	800434e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b320:	2300      	movs	r3, #0
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b324:	f107 031c 	add.w	r3, r7, #28
 800b328:	4619      	mov	r1, r3
 800b32a:	4811      	ldr	r0, [pc, #68]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b32c:	f005 fe40 	bl	8010fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800b336:	f7f9 f80a 	bl	800434e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b33a:	2360      	movs	r3, #96	; 0x60
 800b33c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 800b33e:	f241 3387 	movw	r3, #4999	; 0x1387
 800b342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b344:	2300      	movs	r3, #0
 800b346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b348:	2300      	movs	r3, #0
 800b34a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b34c:	463b      	mov	r3, r7
 800b34e:	2204      	movs	r2, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4807      	ldr	r0, [pc, #28]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b354:	f005 f9e2 	bl	801071c <HAL_TIM_PWM_ConfigChannel>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800b35e:	f7f8 fff6 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b362:	4803      	ldr	r0, [pc, #12]	; (800b370 <MX_TIM2_Init+0xb0>)
 800b364:	f000 f93c 	bl	800b5e0 <HAL_TIM_MspPostInit>

}
 800b368:	bf00      	nop
 800b36a:	3728      	adds	r7, #40	; 0x28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	2000ce48 	.word	0x2000ce48

0800b374 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b37a:	1d3b      	adds	r3, r7, #4
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	605a      	str	r2, [r3, #4]
 800b382:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b384:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b386:	4a15      	ldr	r2, [pc, #84]	; (800b3dc <MX_TIM6_Init+0x68>)
 800b388:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b38c:	224f      	movs	r2, #79	; 0x4f
 800b38e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b390:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b392:	2200      	movs	r2, #0
 800b394:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b39c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b39e:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b3a0:	2280      	movs	r2, #128	; 0x80
 800b3a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b3a4:	480c      	ldr	r0, [pc, #48]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b3a6:	f004 fe2f 	bl	8010008 <HAL_TIM_Base_Init>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800b3b0:	f7f8 ffcd 	bl	800434e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b3bc:	1d3b      	adds	r3, r7, #4
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4805      	ldr	r0, [pc, #20]	; (800b3d8 <MX_TIM6_Init+0x64>)
 800b3c2:	f005 fdf5 	bl	8010fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800b3cc:	f7f8 ffbf 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b3d0:	bf00      	nop
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2000ce94 	.word	0x2000ce94
 800b3dc:	40001000 	.word	0x40001000

0800b3e0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b096      	sub	sp, #88	; 0x58
 800b3e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	605a      	str	r2, [r3, #4]
 800b3f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b3f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	605a      	str	r2, [r3, #4]
 800b3fc:	609a      	str	r2, [r3, #8]
 800b3fe:	60da      	str	r2, [r3, #12]
 800b400:	611a      	str	r2, [r3, #16]
 800b402:	615a      	str	r2, [r3, #20]
 800b404:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b406:	1d3b      	adds	r3, r7, #4
 800b408:	222c      	movs	r2, #44	; 0x2c
 800b40a:	2100      	movs	r1, #0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f006 fb7b 	bl	8011b08 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800b412:	4b34      	ldr	r3, [pc, #208]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b414:	4a34      	ldr	r2, [pc, #208]	; (800b4e8 <MX_TIM15_Init+0x108>)
 800b416:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 800b418:	4b32      	ldr	r3, [pc, #200]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b41a:	224f      	movs	r2, #79	; 0x4f
 800b41c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b420:	2200      	movs	r2, #0
 800b422:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000-1;
 800b424:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b426:	f241 3287 	movw	r2, #4999	; 0x1387
 800b42a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b42c:	4b2d      	ldr	r3, [pc, #180]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b42e:	2200      	movs	r2, #0
 800b430:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800b432:	4b2c      	ldr	r3, [pc, #176]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b434:	2200      	movs	r2, #0
 800b436:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b438:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800b43e:	4829      	ldr	r0, [pc, #164]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b440:	f004 fe8e 	bl	8010160 <HAL_TIM_PWM_Init>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800b44a:	f7f8 ff80 	bl	800434e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b44e:	2300      	movs	r3, #0
 800b450:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b452:	2300      	movs	r3, #0
 800b454:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800b456:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b45a:	4619      	mov	r1, r3
 800b45c:	4821      	ldr	r0, [pc, #132]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b45e:	f005 fda7 	bl	8010fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800b468:	f7f8 ff71 	bl	800434e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b46c:	2360      	movs	r3, #96	; 0x60
 800b46e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2500-1;
 800b470:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800b474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b476:	2300      	movs	r3, #0
 800b478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b47a:	2300      	movs	r3, #0
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b47e:	2300      	movs	r3, #0
 800b480:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b482:	2300      	movs	r3, #0
 800b484:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b486:	2300      	movs	r3, #0
 800b488:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b48a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b48e:	2204      	movs	r2, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4814      	ldr	r0, [pc, #80]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b494:	f005 f942 	bl	801071c <HAL_TIM_PWM_ConfigChannel>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800b49e:	f7f8 ff56 	bl	800434e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b4b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800b4c0:	1d3b      	adds	r3, r7, #4
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4807      	ldr	r0, [pc, #28]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b4c6:	f005 fdd9 	bl	801107c <HAL_TIMEx_ConfigBreakDeadTime>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 800b4d0:	f7f8 ff3d 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800b4d4:	4803      	ldr	r0, [pc, #12]	; (800b4e4 <MX_TIM15_Init+0x104>)
 800b4d6:	f000 f883 	bl	800b5e0 <HAL_TIM_MspPostInit>

}
 800b4da:	bf00      	nop
 800b4dc:	3758      	adds	r7, #88	; 0x58
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	2000cee0 	.word	0x2000cee0
 800b4e8:	40014000 	.word	0x40014000

0800b4ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a23      	ldr	r2, [pc, #140]	; (800b588 <HAL_TIM_PWM_MspInit+0x9c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d114      	bne.n	800b528 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b4fe:	4b23      	ldr	r3, [pc, #140]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b502:	4a22      	ldr	r2, [pc, #136]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b504:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b508:	6613      	str	r3, [r2, #96]	; 0x60
 800b50a:	4b20      	ldr	r3, [pc, #128]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b50c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b50e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	2019      	movs	r0, #25
 800b51c:	f002 fc5f 	bl	800ddde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b520:	2019      	movs	r0, #25
 800b522:	f002 fc78 	bl	800de16 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800b526:	e02a      	b.n	800b57e <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM2)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b530:	d114      	bne.n	800b55c <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b532:	4b16      	ldr	r3, [pc, #88]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b536:	4a15      	ldr	r2, [pc, #84]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b538:	f043 0301 	orr.w	r3, r3, #1
 800b53c:	6593      	str	r3, [r2, #88]	; 0x58
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	613b      	str	r3, [r7, #16]
 800b548:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b54a:	2200      	movs	r2, #0
 800b54c:	2100      	movs	r1, #0
 800b54e:	201c      	movs	r0, #28
 800b550:	f002 fc45 	bl	800ddde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b554:	201c      	movs	r0, #28
 800b556:	f002 fc5e 	bl	800de16 <HAL_NVIC_EnableIRQ>
}
 800b55a:	e010      	b.n	800b57e <HAL_TIM_PWM_MspInit+0x92>
  else if(tim_pwmHandle->Instance==TIM15)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0b      	ldr	r2, [pc, #44]	; (800b590 <HAL_TIM_PWM_MspInit+0xa4>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d10b      	bne.n	800b57e <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b56a:	4a08      	ldr	r2, [pc, #32]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b56c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b570:	6613      	str	r3, [r2, #96]	; 0x60
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <HAL_TIM_PWM_MspInit+0xa0>)
 800b574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	bf00      	nop
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	40012c00 	.word	0x40012c00
 800b58c:	40021000 	.word	0x40021000
 800b590:	40014000 	.word	0x40014000

0800b594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0d      	ldr	r2, [pc, #52]	; (800b5d8 <HAL_TIM_Base_MspInit+0x44>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d113      	bne.n	800b5ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <HAL_TIM_Base_MspInit+0x48>)
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5aa:	4a0c      	ldr	r2, [pc, #48]	; (800b5dc <HAL_TIM_Base_MspInit+0x48>)
 800b5ac:	f043 0310 	orr.w	r3, r3, #16
 800b5b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <HAL_TIM_Base_MspInit+0x48>)
 800b5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2104      	movs	r1, #4
 800b5c2:	2036      	movs	r0, #54	; 0x36
 800b5c4:	f002 fc0b 	bl	800ddde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b5c8:	2036      	movs	r0, #54	; 0x36
 800b5ca:	f002 fc24 	bl	800de16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b5ce:	bf00      	nop
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	40001000 	.word	0x40001000
 800b5dc:	40021000 	.word	0x40021000

0800b5e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	; 0x28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5e8:	f107 0314 	add.w	r3, r7, #20
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
 800b5f4:	60da      	str	r2, [r3, #12]
 800b5f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a35      	ldr	r2, [pc, #212]	; (800b6d4 <HAL_TIM_MspPostInit+0xf4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d11e      	bne.n	800b640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b602:	4b35      	ldr	r3, [pc, #212]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b606:	4a34      	ldr	r2, [pc, #208]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b608:	f043 0301 	orr.w	r3, r3, #1
 800b60c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b60e:	4b32      	ldr	r3, [pc, #200]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_CLOCK_L_Pin;
 800b61a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b620:	2302      	movs	r3, #2
 800b622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b628:	2300      	movs	r3, #0
 800b62a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b62c:	2301      	movs	r3, #1
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 800b630:	f107 0314 	add.w	r3, r7, #20
 800b634:	4619      	mov	r1, r3
 800b636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b63a:	f002 fe3d 	bl	800e2b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800b63e:	e044      	b.n	800b6ca <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM2)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b648:	d11d      	bne.n	800b686 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b64a:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64e:	4a22      	ldr	r2, [pc, #136]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b650:	f043 0301 	orr.w	r3, r3, #1
 800b654:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b656:	4b20      	ldr	r3, [pc, #128]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_CLOCK_R_Pin;
 800b662:	2302      	movs	r3, #2
 800b664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b666:	2302      	movs	r3, #2
 800b668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b66e:	2300      	movs	r3, #0
 800b670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b672:	2301      	movs	r3, #1
 800b674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	4619      	mov	r1, r3
 800b67c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b680:	f002 fe1a 	bl	800e2b8 <HAL_GPIO_Init>
}
 800b684:	e021      	b.n	800b6ca <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a14      	ldr	r2, [pc, #80]	; (800b6dc <HAL_TIM_MspPostInit+0xfc>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d11c      	bne.n	800b6ca <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b690:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b694:	4a10      	ldr	r2, [pc, #64]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b69c:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <HAL_TIM_MspPostInit+0xf8>)
 800b69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	60bb      	str	r3, [r7, #8]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPEAKER_Pin;
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800b6b8:	230e      	movs	r3, #14
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 800b6bc:	f107 0314 	add.w	r3, r7, #20
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b6c6:	f002 fdf7 	bl	800e2b8 <HAL_GPIO_Init>
}
 800b6ca:	bf00      	nop
 800b6cc:	3728      	adds	r7, #40	; 0x28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	40012c00 	.word	0x40012c00
 800b6d8:	40021000 	.word	0x40021000
 800b6dc:	40014000 	.word	0x40014000

0800b6e0 <input_parameter>:

#include "turning_parameter.h"
#include "maze_Turning.h"


void input_parameter(void){
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0

speed500_exploration.SlalomCentervelocity=500;
 800b6e4:	4b97      	ldr	r3, [pc, #604]	; (800b944 <input_parameter+0x264>)
 800b6e6:	4a98      	ldr	r2, [pc, #608]	; (800b948 <input_parameter+0x268>)
 800b6e8:	601a      	str	r2, [r3, #0]
speed500_exploration.TurnCentervelocity=500;
 800b6ea:	4b96      	ldr	r3, [pc, #600]	; (800b944 <input_parameter+0x264>)
 800b6ec:	4a96      	ldr	r2, [pc, #600]	; (800b948 <input_parameter+0x268>)
 800b6ee:	605a      	str	r2, [r3, #4]

speed500_exploration.slalom_R.g_speed=speed500_exploration.SlalomCentervelocity;
 800b6f0:	4b94      	ldr	r3, [pc, #592]	; (800b944 <input_parameter+0x264>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a93      	ldr	r2, [pc, #588]	; (800b944 <input_parameter+0x264>)
 800b6f6:	6093      	str	r3, [r2, #8]
speed500_exploration.slalom_R.t_speed=550;
 800b6f8:	4b92      	ldr	r3, [pc, #584]	; (800b944 <input_parameter+0x264>)
 800b6fa:	4a94      	ldr	r2, [pc, #592]	; (800b94c <input_parameter+0x26c>)
 800b6fc:	615a      	str	r2, [r3, #20]
speed500_exploration.slalom_R.t_acc=10000;
 800b6fe:	4b91      	ldr	r3, [pc, #580]	; (800b944 <input_parameter+0x264>)
 800b700:	4a93      	ldr	r2, [pc, #588]	; (800b950 <input_parameter+0x270>)
 800b702:	619a      	str	r2, [r3, #24]
speed500_exploration.slalom_R.f_ofset=4;//55;
 800b704:	4b8f      	ldr	r3, [pc, #572]	; (800b944 <input_parameter+0x264>)
 800b706:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b70a:	60da      	str	r2, [r3, #12]
speed500_exploration.slalom_R.e_ofset=25;
 800b70c:	4b8d      	ldr	r3, [pc, #564]	; (800b944 <input_parameter+0x264>)
 800b70e:	4a91      	ldr	r2, [pc, #580]	; (800b954 <input_parameter+0x274>)
 800b710:	611a      	str	r2, [r3, #16]

speed500_exploration.slalom_L.g_speed=speed500_exploration.SlalomCentervelocity;
 800b712:	4b8c      	ldr	r3, [pc, #560]	; (800b944 <input_parameter+0x264>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a8b      	ldr	r2, [pc, #556]	; (800b944 <input_parameter+0x264>)
 800b718:	61d3      	str	r3, [r2, #28]
speed500_exploration.slalom_L.t_speed=550;
 800b71a:	4b8a      	ldr	r3, [pc, #552]	; (800b944 <input_parameter+0x264>)
 800b71c:	4a8b      	ldr	r2, [pc, #556]	; (800b94c <input_parameter+0x26c>)
 800b71e:	629a      	str	r2, [r3, #40]	; 0x28
speed500_exploration.slalom_L.t_acc=10000;
 800b720:	4b88      	ldr	r3, [pc, #544]	; (800b944 <input_parameter+0x264>)
 800b722:	4a8b      	ldr	r2, [pc, #556]	; (800b950 <input_parameter+0x270>)
 800b724:	62da      	str	r2, [r3, #44]	; 0x2c
speed500_exploration.slalom_L.f_ofset=1;//50;
 800b726:	4b87      	ldr	r3, [pc, #540]	; (800b944 <input_parameter+0x264>)
 800b728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b72c:	621a      	str	r2, [r3, #32]
speed500_exploration.slalom_L.e_ofset=19;
 800b72e:	4b85      	ldr	r3, [pc, #532]	; (800b944 <input_parameter+0x264>)
 800b730:	4a89      	ldr	r2, [pc, #548]	; (800b958 <input_parameter+0x278>)
 800b732:	625a      	str	r2, [r3, #36]	; 0x24


speed500_exploration.turn90_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b734:	4b83      	ldr	r3, [pc, #524]	; (800b944 <input_parameter+0x264>)
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4a82      	ldr	r2, [pc, #520]	; (800b944 <input_parameter+0x264>)
 800b73a:	6313      	str	r3, [r2, #48]	; 0x30
speed500_exploration.turn90_R.t_speed=650;
 800b73c:	4b81      	ldr	r3, [pc, #516]	; (800b944 <input_parameter+0x264>)
 800b73e:	4a87      	ldr	r2, [pc, #540]	; (800b95c <input_parameter+0x27c>)
 800b740:	63da      	str	r2, [r3, #60]	; 0x3c
speed500_exploration.turn90_R.t_acc=10000;
 800b742:	4b80      	ldr	r3, [pc, #512]	; (800b944 <input_parameter+0x264>)
 800b744:	4a82      	ldr	r2, [pc, #520]	; (800b950 <input_parameter+0x270>)
 800b746:	641a      	str	r2, [r3, #64]	; 0x40
speed500_exploration.turn90_R.f_ofset=45;
 800b748:	4b7e      	ldr	r3, [pc, #504]	; (800b944 <input_parameter+0x264>)
 800b74a:	4a85      	ldr	r2, [pc, #532]	; (800b960 <input_parameter+0x280>)
 800b74c:	635a      	str	r2, [r3, #52]	; 0x34
speed500_exploration.turn90_R.e_ofset=46;
 800b74e:	4b7d      	ldr	r3, [pc, #500]	; (800b944 <input_parameter+0x264>)
 800b750:	4a84      	ldr	r2, [pc, #528]	; (800b964 <input_parameter+0x284>)
 800b752:	639a      	str	r2, [r3, #56]	; 0x38

speed500_exploration.turn90_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b754:	4b7b      	ldr	r3, [pc, #492]	; (800b944 <input_parameter+0x264>)
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	4a7a      	ldr	r2, [pc, #488]	; (800b944 <input_parameter+0x264>)
 800b75a:	6453      	str	r3, [r2, #68]	; 0x44
speed500_exploration.turn90_L.t_speed=650;
 800b75c:	4b79      	ldr	r3, [pc, #484]	; (800b944 <input_parameter+0x264>)
 800b75e:	4a7f      	ldr	r2, [pc, #508]	; (800b95c <input_parameter+0x27c>)
 800b760:	651a      	str	r2, [r3, #80]	; 0x50
speed500_exploration.turn90_L.t_acc=10000;
 800b762:	4b78      	ldr	r3, [pc, #480]	; (800b944 <input_parameter+0x264>)
 800b764:	4a7a      	ldr	r2, [pc, #488]	; (800b950 <input_parameter+0x270>)
 800b766:	655a      	str	r2, [r3, #84]	; 0x54
speed500_exploration.turn90_L.f_ofset=50;
 800b768:	4b76      	ldr	r3, [pc, #472]	; (800b944 <input_parameter+0x264>)
 800b76a:	4a7f      	ldr	r2, [pc, #508]	; (800b968 <input_parameter+0x288>)
 800b76c:	649a      	str	r2, [r3, #72]	; 0x48
speed500_exploration.turn90_L.e_ofset=47;
 800b76e:	4b75      	ldr	r3, [pc, #468]	; (800b944 <input_parameter+0x264>)
 800b770:	4a7e      	ldr	r2, [pc, #504]	; (800b96c <input_parameter+0x28c>)
 800b772:	64da      	str	r2, [r3, #76]	; 0x4c

speed500_exploration.turn180_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b774:	4b73      	ldr	r3, [pc, #460]	; (800b944 <input_parameter+0x264>)
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	4a72      	ldr	r2, [pc, #456]	; (800b944 <input_parameter+0x264>)
 800b77a:	6593      	str	r3, [r2, #88]	; 0x58
speed500_exploration.turn180_R.t_speed=800;
 800b77c:	4b71      	ldr	r3, [pc, #452]	; (800b944 <input_parameter+0x264>)
 800b77e:	4a7c      	ldr	r2, [pc, #496]	; (800b970 <input_parameter+0x290>)
 800b780:	665a      	str	r2, [r3, #100]	; 0x64
speed500_exploration.turn180_R.t_acc=8000;
 800b782:	4b70      	ldr	r3, [pc, #448]	; (800b944 <input_parameter+0x264>)
 800b784:	4a7b      	ldr	r2, [pc, #492]	; (800b974 <input_parameter+0x294>)
 800b786:	669a      	str	r2, [r3, #104]	; 0x68
speed500_exploration.turn180_R.f_ofset=20;
 800b788:	4b6e      	ldr	r3, [pc, #440]	; (800b944 <input_parameter+0x264>)
 800b78a:	4a7b      	ldr	r2, [pc, #492]	; (800b978 <input_parameter+0x298>)
 800b78c:	65da      	str	r2, [r3, #92]	; 0x5c
speed500_exploration.turn180_R.e_ofset=30;
 800b78e:	4b6d      	ldr	r3, [pc, #436]	; (800b944 <input_parameter+0x264>)
 800b790:	4a7a      	ldr	r2, [pc, #488]	; (800b97c <input_parameter+0x29c>)
 800b792:	661a      	str	r2, [r3, #96]	; 0x60

speed500_exploration.turn180_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b794:	4b6b      	ldr	r3, [pc, #428]	; (800b944 <input_parameter+0x264>)
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	4a6a      	ldr	r2, [pc, #424]	; (800b944 <input_parameter+0x264>)
 800b79a:	66d3      	str	r3, [r2, #108]	; 0x6c
speed500_exploration.turn180_L.t_speed=780;
 800b79c:	4b69      	ldr	r3, [pc, #420]	; (800b944 <input_parameter+0x264>)
 800b79e:	4a78      	ldr	r2, [pc, #480]	; (800b980 <input_parameter+0x2a0>)
 800b7a0:	679a      	str	r2, [r3, #120]	; 0x78
speed500_exploration.turn180_L.t_acc=8000;
 800b7a2:	4b68      	ldr	r3, [pc, #416]	; (800b944 <input_parameter+0x264>)
 800b7a4:	4a73      	ldr	r2, [pc, #460]	; (800b974 <input_parameter+0x294>)
 800b7a6:	67da      	str	r2, [r3, #124]	; 0x7c
speed500_exploration.turn180_L.f_ofset=20;
 800b7a8:	4b66      	ldr	r3, [pc, #408]	; (800b944 <input_parameter+0x264>)
 800b7aa:	4a73      	ldr	r2, [pc, #460]	; (800b978 <input_parameter+0x298>)
 800b7ac:	671a      	str	r2, [r3, #112]	; 0x70
speed500_exploration.turn180_L.e_ofset=40;
 800b7ae:	4b65      	ldr	r3, [pc, #404]	; (800b944 <input_parameter+0x264>)
 800b7b0:	4a74      	ldr	r2, [pc, #464]	; (800b984 <input_parameter+0x2a4>)
 800b7b2:	675a      	str	r2, [r3, #116]	; 0x74

speed500_exploration.turn45in_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b7b4:	4b63      	ldr	r3, [pc, #396]	; (800b944 <input_parameter+0x264>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4a62      	ldr	r2, [pc, #392]	; (800b944 <input_parameter+0x264>)
 800b7ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed500_exploration.turn45in_R.t_speed=900;
 800b7be:	4b61      	ldr	r3, [pc, #388]	; (800b944 <input_parameter+0x264>)
 800b7c0:	4a71      	ldr	r2, [pc, #452]	; (800b988 <input_parameter+0x2a8>)
 800b7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed500_exploration.turn45in_R.t_acc=13000;
 800b7c6:	4b5f      	ldr	r3, [pc, #380]	; (800b944 <input_parameter+0x264>)
 800b7c8:	4a70      	ldr	r2, [pc, #448]	; (800b98c <input_parameter+0x2ac>)
 800b7ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed500_exploration.turn45in_R.f_ofset=25;
 800b7ce:	4b5d      	ldr	r3, [pc, #372]	; (800b944 <input_parameter+0x264>)
 800b7d0:	4a60      	ldr	r2, [pc, #384]	; (800b954 <input_parameter+0x274>)
 800b7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed500_exploration.turn45in_R.e_ofset=60;
 800b7d6:	4b5b      	ldr	r3, [pc, #364]	; (800b944 <input_parameter+0x264>)
 800b7d8:	4a6d      	ldr	r2, [pc, #436]	; (800b990 <input_parameter+0x2b0>)
 800b7da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed500_exploration.turn45in_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b7de:	4b59      	ldr	r3, [pc, #356]	; (800b944 <input_parameter+0x264>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	4a58      	ldr	r2, [pc, #352]	; (800b944 <input_parameter+0x264>)
 800b7e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed500_exploration.turn45in_L.t_speed=900;
 800b7e8:	4b56      	ldr	r3, [pc, #344]	; (800b944 <input_parameter+0x264>)
 800b7ea:	4a67      	ldr	r2, [pc, #412]	; (800b988 <input_parameter+0x2a8>)
 800b7ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed500_exploration.turn45in_L.t_acc=13000;
 800b7f0:	4b54      	ldr	r3, [pc, #336]	; (800b944 <input_parameter+0x264>)
 800b7f2:	4a66      	ldr	r2, [pc, #408]	; (800b98c <input_parameter+0x2ac>)
 800b7f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed500_exploration.turn45in_L.f_ofset=32;
 800b7f8:	4b52      	ldr	r3, [pc, #328]	; (800b944 <input_parameter+0x264>)
 800b7fa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800b7fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed500_exploration.turn45in_L.e_ofset=60;
 800b802:	4b50      	ldr	r3, [pc, #320]	; (800b944 <input_parameter+0x264>)
 800b804:	4a62      	ldr	r2, [pc, #392]	; (800b990 <input_parameter+0x2b0>)
 800b806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed500_exploration.turn135in_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b80a:	4b4e      	ldr	r3, [pc, #312]	; (800b944 <input_parameter+0x264>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4a4d      	ldr	r2, [pc, #308]	; (800b944 <input_parameter+0x264>)
 800b810:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed500_exploration.turn135in_R.t_speed=900;
 800b814:	4b4b      	ldr	r3, [pc, #300]	; (800b944 <input_parameter+0x264>)
 800b816:	4a5c      	ldr	r2, [pc, #368]	; (800b988 <input_parameter+0x2a8>)
 800b818:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed500_exploration.turn135in_R.t_acc=12000;
 800b81c:	4b49      	ldr	r3, [pc, #292]	; (800b944 <input_parameter+0x264>)
 800b81e:	4a5d      	ldr	r2, [pc, #372]	; (800b994 <input_parameter+0x2b4>)
 800b820:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed500_exploration.turn135in_R.f_ofset=53;
 800b824:	4b47      	ldr	r3, [pc, #284]	; (800b944 <input_parameter+0x264>)
 800b826:	4a5c      	ldr	r2, [pc, #368]	; (800b998 <input_parameter+0x2b8>)
 800b828:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed500_exploration.turn135in_R.e_ofset=47;
 800b82c:	4b45      	ldr	r3, [pc, #276]	; (800b944 <input_parameter+0x264>)
 800b82e:	4a4f      	ldr	r2, [pc, #316]	; (800b96c <input_parameter+0x28c>)
 800b830:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed500_exploration.turn135in_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b834:	4b43      	ldr	r3, [pc, #268]	; (800b944 <input_parameter+0x264>)
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	4a42      	ldr	r2, [pc, #264]	; (800b944 <input_parameter+0x264>)
 800b83a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed500_exploration.turn135in_L.t_speed=900;
 800b83e:	4b41      	ldr	r3, [pc, #260]	; (800b944 <input_parameter+0x264>)
 800b840:	4a51      	ldr	r2, [pc, #324]	; (800b988 <input_parameter+0x2a8>)
 800b842:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed500_exploration.turn135in_L.t_acc=12000;
 800b846:	4b3f      	ldr	r3, [pc, #252]	; (800b944 <input_parameter+0x264>)
 800b848:	4a52      	ldr	r2, [pc, #328]	; (800b994 <input_parameter+0x2b4>)
 800b84a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed500_exploration.turn135in_L.f_ofset=40;
 800b84e:	4b3d      	ldr	r3, [pc, #244]	; (800b944 <input_parameter+0x264>)
 800b850:	4a4c      	ldr	r2, [pc, #304]	; (800b984 <input_parameter+0x2a4>)
 800b852:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed500_exploration.turn135in_L.e_ofset=55;
 800b856:	4b3b      	ldr	r3, [pc, #236]	; (800b944 <input_parameter+0x264>)
 800b858:	4a50      	ldr	r2, [pc, #320]	; (800b99c <input_parameter+0x2bc>)
 800b85a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed500_exploration.turn45out_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b85e:	4b39      	ldr	r3, [pc, #228]	; (800b944 <input_parameter+0x264>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	4a38      	ldr	r2, [pc, #224]	; (800b944 <input_parameter+0x264>)
 800b864:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed500_exploration.turn45out_R.t_speed=900;
 800b868:	4b36      	ldr	r3, [pc, #216]	; (800b944 <input_parameter+0x264>)
 800b86a:	4a47      	ldr	r2, [pc, #284]	; (800b988 <input_parameter+0x2a8>)
 800b86c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed500_exploration.turn45out_R.t_acc=10000;
 800b870:	4b34      	ldr	r3, [pc, #208]	; (800b944 <input_parameter+0x264>)
 800b872:	4a37      	ldr	r2, [pc, #220]	; (800b950 <input_parameter+0x270>)
 800b874:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed500_exploration.turn45out_R.f_ofset=45;
 800b878:	4b32      	ldr	r3, [pc, #200]	; (800b944 <input_parameter+0x264>)
 800b87a:	4a39      	ldr	r2, [pc, #228]	; (800b960 <input_parameter+0x280>)
 800b87c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed500_exploration.turn45out_R.e_ofset=10;
 800b880:	4b30      	ldr	r3, [pc, #192]	; (800b944 <input_parameter+0x264>)
 800b882:	4a47      	ldr	r2, [pc, #284]	; (800b9a0 <input_parameter+0x2c0>)
 800b884:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed500_exploration.turn45out_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b888:	4b2e      	ldr	r3, [pc, #184]	; (800b944 <input_parameter+0x264>)
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	4a2d      	ldr	r2, [pc, #180]	; (800b944 <input_parameter+0x264>)
 800b88e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed500_exploration.turn45out_L.t_speed=900;
 800b892:	4b2c      	ldr	r3, [pc, #176]	; (800b944 <input_parameter+0x264>)
 800b894:	4a3c      	ldr	r2, [pc, #240]	; (800b988 <input_parameter+0x2a8>)
 800b896:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed500_exploration.turn45out_L.t_acc=10000;
 800b89a:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <input_parameter+0x264>)
 800b89c:	4a2c      	ldr	r2, [pc, #176]	; (800b950 <input_parameter+0x270>)
 800b89e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed500_exploration.turn45out_L.f_ofset=40;
 800b8a2:	4b28      	ldr	r3, [pc, #160]	; (800b944 <input_parameter+0x264>)
 800b8a4:	4a37      	ldr	r2, [pc, #220]	; (800b984 <input_parameter+0x2a4>)
 800b8a6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed500_exploration.turn45out_L.e_ofset=10;
 800b8aa:	4b26      	ldr	r3, [pc, #152]	; (800b944 <input_parameter+0x264>)
 800b8ac:	4a3c      	ldr	r2, [pc, #240]	; (800b9a0 <input_parameter+0x2c0>)
 800b8ae:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed500_exploration.turn135out_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b8b2:	4b24      	ldr	r3, [pc, #144]	; (800b944 <input_parameter+0x264>)
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	4a23      	ldr	r2, [pc, #140]	; (800b944 <input_parameter+0x264>)
 800b8b8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed500_exploration.turn135out_R.t_speed=1000;
 800b8bc:	4b21      	ldr	r3, [pc, #132]	; (800b944 <input_parameter+0x264>)
 800b8be:	4a39      	ldr	r2, [pc, #228]	; (800b9a4 <input_parameter+0x2c4>)
 800b8c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed500_exploration.turn135out_R.t_acc=12000;
 800b8c4:	4b1f      	ldr	r3, [pc, #124]	; (800b944 <input_parameter+0x264>)
 800b8c6:	4a33      	ldr	r2, [pc, #204]	; (800b994 <input_parameter+0x2b4>)
 800b8c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed500_exploration.turn135out_R.f_ofset=25;
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	; (800b944 <input_parameter+0x264>)
 800b8ce:	4a21      	ldr	r2, [pc, #132]	; (800b954 <input_parameter+0x274>)
 800b8d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed500_exploration.turn135out_R.e_ofset=90;
 800b8d4:	4b1b      	ldr	r3, [pc, #108]	; (800b944 <input_parameter+0x264>)
 800b8d6:	4a34      	ldr	r2, [pc, #208]	; (800b9a8 <input_parameter+0x2c8>)
 800b8d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed500_exploration.turn135out_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b8dc:	4b19      	ldr	r3, [pc, #100]	; (800b944 <input_parameter+0x264>)
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a18      	ldr	r2, [pc, #96]	; (800b944 <input_parameter+0x264>)
 800b8e2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed500_exploration.turn135out_L.t_speed=1000;
 800b8e6:	4b17      	ldr	r3, [pc, #92]	; (800b944 <input_parameter+0x264>)
 800b8e8:	4a2e      	ldr	r2, [pc, #184]	; (800b9a4 <input_parameter+0x2c4>)
 800b8ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed500_exploration.turn135out_L.t_acc=12000;
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <input_parameter+0x264>)
 800b8f0:	4a28      	ldr	r2, [pc, #160]	; (800b994 <input_parameter+0x2b4>)
 800b8f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed500_exploration.turn135out_L.f_ofset=40;
 800b8f6:	4b13      	ldr	r3, [pc, #76]	; (800b944 <input_parameter+0x264>)
 800b8f8:	4a22      	ldr	r2, [pc, #136]	; (800b984 <input_parameter+0x2a4>)
 800b8fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed500_exploration.turn135out_L.e_ofset=95;
 800b8fe:	4b11      	ldr	r3, [pc, #68]	; (800b944 <input_parameter+0x264>)
 800b900:	4a2a      	ldr	r2, [pc, #168]	; (800b9ac <input_parameter+0x2cc>)
 800b902:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed500_exploration.V90_R.g_speed=speed500_exploration.TurnCentervelocity;
 800b906:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <input_parameter+0x264>)
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	4a0e      	ldr	r2, [pc, #56]	; (800b944 <input_parameter+0x264>)
 800b90c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed500_exploration.V90_R.t_speed=1650;
 800b910:	4b0c      	ldr	r3, [pc, #48]	; (800b944 <input_parameter+0x264>)
 800b912:	4a27      	ldr	r2, [pc, #156]	; (800b9b0 <input_parameter+0x2d0>)
 800b914:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed500_exploration.V90_R.t_acc=24500;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <input_parameter+0x264>)
 800b91a:	4a26      	ldr	r2, [pc, #152]	; (800b9b4 <input_parameter+0x2d4>)
 800b91c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed500_exploration.V90_R.f_ofset=50;
 800b920:	4b08      	ldr	r3, [pc, #32]	; (800b944 <input_parameter+0x264>)
 800b922:	4a11      	ldr	r2, [pc, #68]	; (800b968 <input_parameter+0x288>)
 800b924:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed500_exploration.V90_R.e_ofset=65;
 800b928:	4b06      	ldr	r3, [pc, #24]	; (800b944 <input_parameter+0x264>)
 800b92a:	4a23      	ldr	r2, [pc, #140]	; (800b9b8 <input_parameter+0x2d8>)
 800b92c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed500_exploration.V90_L.g_speed=speed500_exploration.TurnCentervelocity;
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <input_parameter+0x264>)
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	4a03      	ldr	r2, [pc, #12]	; (800b944 <input_parameter+0x264>)
 800b936:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed500_exploration.V90_L.t_speed=1550;
 800b93a:	4b02      	ldr	r3, [pc, #8]	; (800b944 <input_parameter+0x264>)
 800b93c:	4a1f      	ldr	r2, [pc, #124]	; (800b9bc <input_parameter+0x2dc>)
 800b93e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800b942:	e03d      	b.n	800b9c0 <input_parameter+0x2e0>
 800b944:	20000a50 	.word	0x20000a50
 800b948:	43fa0000 	.word	0x43fa0000
 800b94c:	44098000 	.word	0x44098000
 800b950:	461c4000 	.word	0x461c4000
 800b954:	41c80000 	.word	0x41c80000
 800b958:	41980000 	.word	0x41980000
 800b95c:	44228000 	.word	0x44228000
 800b960:	42340000 	.word	0x42340000
 800b964:	42380000 	.word	0x42380000
 800b968:	42480000 	.word	0x42480000
 800b96c:	423c0000 	.word	0x423c0000
 800b970:	44480000 	.word	0x44480000
 800b974:	45fa0000 	.word	0x45fa0000
 800b978:	41a00000 	.word	0x41a00000
 800b97c:	41f00000 	.word	0x41f00000
 800b980:	44430000 	.word	0x44430000
 800b984:	42200000 	.word	0x42200000
 800b988:	44610000 	.word	0x44610000
 800b98c:	464b2000 	.word	0x464b2000
 800b990:	42700000 	.word	0x42700000
 800b994:	463b8000 	.word	0x463b8000
 800b998:	42540000 	.word	0x42540000
 800b99c:	425c0000 	.word	0x425c0000
 800b9a0:	41200000 	.word	0x41200000
 800b9a4:	447a0000 	.word	0x447a0000
 800b9a8:	42b40000 	.word	0x42b40000
 800b9ac:	42be0000 	.word	0x42be0000
 800b9b0:	44ce4000 	.word	0x44ce4000
 800b9b4:	46bf6800 	.word	0x46bf6800
 800b9b8:	42820000 	.word	0x42820000
 800b9bc:	44c1c000 	.word	0x44c1c000
speed500_exploration.V90_L.t_acc=22000;
 800b9c0:	4b96      	ldr	r3, [pc, #600]	; (800bc1c <input_parameter+0x53c>)
 800b9c2:	4a97      	ldr	r2, [pc, #604]	; (800bc20 <input_parameter+0x540>)
 800b9c4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed500_exploration.V90_L.f_ofset=28;
 800b9c8:	4b94      	ldr	r3, [pc, #592]	; (800bc1c <input_parameter+0x53c>)
 800b9ca:	4a96      	ldr	r2, [pc, #600]	; (800bc24 <input_parameter+0x544>)
 800b9cc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed500_exploration.V90_L.e_ofset=55;
 800b9d0:	4b92      	ldr	r3, [pc, #584]	; (800bc1c <input_parameter+0x53c>)
 800b9d2:	4a95      	ldr	r2, [pc, #596]	; (800bc28 <input_parameter+0x548>)
 800b9d4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//*********************************600********************************************

speed600_shortest.SlalomCentervelocity=600;
 800b9d8:	4b94      	ldr	r3, [pc, #592]	; (800bc2c <input_parameter+0x54c>)
 800b9da:	4a95      	ldr	r2, [pc, #596]	; (800bc30 <input_parameter+0x550>)
 800b9dc:	601a      	str	r2, [r3, #0]
speed600_shortest.TurnCentervelocity=900;
 800b9de:	4b93      	ldr	r3, [pc, #588]	; (800bc2c <input_parameter+0x54c>)
 800b9e0:	4a94      	ldr	r2, [pc, #592]	; (800bc34 <input_parameter+0x554>)
 800b9e2:	605a      	str	r2, [r3, #4]


speed600_shortest.slalom_R.g_speed=speed600_shortest.SlalomCentervelocity;
 800b9e4:	4b91      	ldr	r3, [pc, #580]	; (800bc2c <input_parameter+0x54c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a90      	ldr	r2, [pc, #576]	; (800bc2c <input_parameter+0x54c>)
 800b9ea:	6093      	str	r3, [r2, #8]
speed600_shortest.slalom_R.t_speed=650;
 800b9ec:	4b8f      	ldr	r3, [pc, #572]	; (800bc2c <input_parameter+0x54c>)
 800b9ee:	4a92      	ldr	r2, [pc, #584]	; (800bc38 <input_parameter+0x558>)
 800b9f0:	615a      	str	r2, [r3, #20]
speed600_shortest.slalom_R.t_acc=15000;
 800b9f2:	4b8e      	ldr	r3, [pc, #568]	; (800bc2c <input_parameter+0x54c>)
 800b9f4:	4a91      	ldr	r2, [pc, #580]	; (800bc3c <input_parameter+0x55c>)
 800b9f6:	619a      	str	r2, [r3, #24]
speed600_shortest.slalom_R.f_ofset=47;
 800b9f8:	4b8c      	ldr	r3, [pc, #560]	; (800bc2c <input_parameter+0x54c>)
 800b9fa:	4a91      	ldr	r2, [pc, #580]	; (800bc40 <input_parameter+0x560>)
 800b9fc:	60da      	str	r2, [r3, #12]
speed600_shortest.slalom_R.e_ofset=40;
 800b9fe:	4b8b      	ldr	r3, [pc, #556]	; (800bc2c <input_parameter+0x54c>)
 800ba00:	4a90      	ldr	r2, [pc, #576]	; (800bc44 <input_parameter+0x564>)
 800ba02:	611a      	str	r2, [r3, #16]

speed600_shortest.slalom_L.g_speed=speed600_shortest.SlalomCentervelocity;
 800ba04:	4b89      	ldr	r3, [pc, #548]	; (800bc2c <input_parameter+0x54c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a88      	ldr	r2, [pc, #544]	; (800bc2c <input_parameter+0x54c>)
 800ba0a:	61d3      	str	r3, [r2, #28]
speed600_shortest.slalom_L.t_speed=650;
 800ba0c:	4b87      	ldr	r3, [pc, #540]	; (800bc2c <input_parameter+0x54c>)
 800ba0e:	4a8a      	ldr	r2, [pc, #552]	; (800bc38 <input_parameter+0x558>)
 800ba10:	629a      	str	r2, [r3, #40]	; 0x28
speed600_shortest.slalom_L.t_acc=15000;
 800ba12:	4b86      	ldr	r3, [pc, #536]	; (800bc2c <input_parameter+0x54c>)
 800ba14:	4a89      	ldr	r2, [pc, #548]	; (800bc3c <input_parameter+0x55c>)
 800ba16:	62da      	str	r2, [r3, #44]	; 0x2c
speed600_shortest.slalom_L.f_ofset=53;
 800ba18:	4b84      	ldr	r3, [pc, #528]	; (800bc2c <input_parameter+0x54c>)
 800ba1a:	4a8b      	ldr	r2, [pc, #556]	; (800bc48 <input_parameter+0x568>)
 800ba1c:	621a      	str	r2, [r3, #32]
speed600_shortest.slalom_L.e_ofset=44;
 800ba1e:	4b83      	ldr	r3, [pc, #524]	; (800bc2c <input_parameter+0x54c>)
 800ba20:	4a8a      	ldr	r2, [pc, #552]	; (800bc4c <input_parameter+0x56c>)
 800ba22:	625a      	str	r2, [r3, #36]	; 0x24

speed600_shortest.turn90_R.g_speed=speed600_shortest.TurnCentervelocity;
 800ba24:	4b81      	ldr	r3, [pc, #516]	; (800bc2c <input_parameter+0x54c>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a80      	ldr	r2, [pc, #512]	; (800bc2c <input_parameter+0x54c>)
 800ba2a:	6313      	str	r3, [r2, #48]	; 0x30
speed600_shortest.turn90_R.t_speed=650;
 800ba2c:	4b7f      	ldr	r3, [pc, #508]	; (800bc2c <input_parameter+0x54c>)
 800ba2e:	4a82      	ldr	r2, [pc, #520]	; (800bc38 <input_parameter+0x558>)
 800ba30:	63da      	str	r2, [r3, #60]	; 0x3c
speed600_shortest.turn90_R.t_acc=10000;
 800ba32:	4b7e      	ldr	r3, [pc, #504]	; (800bc2c <input_parameter+0x54c>)
 800ba34:	4a86      	ldr	r2, [pc, #536]	; (800bc50 <input_parameter+0x570>)
 800ba36:	641a      	str	r2, [r3, #64]	; 0x40
speed600_shortest.turn90_R.f_ofset=45;
 800ba38:	4b7c      	ldr	r3, [pc, #496]	; (800bc2c <input_parameter+0x54c>)
 800ba3a:	4a86      	ldr	r2, [pc, #536]	; (800bc54 <input_parameter+0x574>)
 800ba3c:	635a      	str	r2, [r3, #52]	; 0x34
speed600_shortest.turn90_R.e_ofset=46;
 800ba3e:	4b7b      	ldr	r3, [pc, #492]	; (800bc2c <input_parameter+0x54c>)
 800ba40:	4a85      	ldr	r2, [pc, #532]	; (800bc58 <input_parameter+0x578>)
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38

speed600_shortest.turn90_L.g_speed=speed600_shortest.TurnCentervelocity;
 800ba44:	4b79      	ldr	r3, [pc, #484]	; (800bc2c <input_parameter+0x54c>)
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	4a78      	ldr	r2, [pc, #480]	; (800bc2c <input_parameter+0x54c>)
 800ba4a:	6453      	str	r3, [r2, #68]	; 0x44
speed600_shortest.turn90_L.t_speed=650;
 800ba4c:	4b77      	ldr	r3, [pc, #476]	; (800bc2c <input_parameter+0x54c>)
 800ba4e:	4a7a      	ldr	r2, [pc, #488]	; (800bc38 <input_parameter+0x558>)
 800ba50:	651a      	str	r2, [r3, #80]	; 0x50
speed600_shortest.turn90_L.t_acc=10000;
 800ba52:	4b76      	ldr	r3, [pc, #472]	; (800bc2c <input_parameter+0x54c>)
 800ba54:	4a7e      	ldr	r2, [pc, #504]	; (800bc50 <input_parameter+0x570>)
 800ba56:	655a      	str	r2, [r3, #84]	; 0x54
speed600_shortest.turn90_L.f_ofset=50;
 800ba58:	4b74      	ldr	r3, [pc, #464]	; (800bc2c <input_parameter+0x54c>)
 800ba5a:	4a80      	ldr	r2, [pc, #512]	; (800bc5c <input_parameter+0x57c>)
 800ba5c:	649a      	str	r2, [r3, #72]	; 0x48
speed600_shortest.turn90_L.e_ofset=47;
 800ba5e:	4b73      	ldr	r3, [pc, #460]	; (800bc2c <input_parameter+0x54c>)
 800ba60:	4a77      	ldr	r2, [pc, #476]	; (800bc40 <input_parameter+0x560>)
 800ba62:	64da      	str	r2, [r3, #76]	; 0x4c

speed600_shortest.turn180_R.g_speed=speed600_shortest.TurnCentervelocity;
 800ba64:	4b71      	ldr	r3, [pc, #452]	; (800bc2c <input_parameter+0x54c>)
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a70      	ldr	r2, [pc, #448]	; (800bc2c <input_parameter+0x54c>)
 800ba6a:	6593      	str	r3, [r2, #88]	; 0x58
speed600_shortest.turn180_R.t_speed=800;
 800ba6c:	4b6f      	ldr	r3, [pc, #444]	; (800bc2c <input_parameter+0x54c>)
 800ba6e:	4a7c      	ldr	r2, [pc, #496]	; (800bc60 <input_parameter+0x580>)
 800ba70:	665a      	str	r2, [r3, #100]	; 0x64
speed600_shortest.turn180_R.t_acc=8000;
 800ba72:	4b6e      	ldr	r3, [pc, #440]	; (800bc2c <input_parameter+0x54c>)
 800ba74:	4a7b      	ldr	r2, [pc, #492]	; (800bc64 <input_parameter+0x584>)
 800ba76:	669a      	str	r2, [r3, #104]	; 0x68
speed600_shortest.turn180_R.f_ofset=20;
 800ba78:	4b6c      	ldr	r3, [pc, #432]	; (800bc2c <input_parameter+0x54c>)
 800ba7a:	4a7b      	ldr	r2, [pc, #492]	; (800bc68 <input_parameter+0x588>)
 800ba7c:	65da      	str	r2, [r3, #92]	; 0x5c
speed600_shortest.turn180_R.e_ofset=30;
 800ba7e:	4b6b      	ldr	r3, [pc, #428]	; (800bc2c <input_parameter+0x54c>)
 800ba80:	4a7a      	ldr	r2, [pc, #488]	; (800bc6c <input_parameter+0x58c>)
 800ba82:	661a      	str	r2, [r3, #96]	; 0x60

speed600_shortest.turn180_L.g_speed=speed600_shortest.TurnCentervelocity;
 800ba84:	4b69      	ldr	r3, [pc, #420]	; (800bc2c <input_parameter+0x54c>)
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4a68      	ldr	r2, [pc, #416]	; (800bc2c <input_parameter+0x54c>)
 800ba8a:	66d3      	str	r3, [r2, #108]	; 0x6c
speed600_shortest.turn180_L.t_speed=780;
 800ba8c:	4b67      	ldr	r3, [pc, #412]	; (800bc2c <input_parameter+0x54c>)
 800ba8e:	4a78      	ldr	r2, [pc, #480]	; (800bc70 <input_parameter+0x590>)
 800ba90:	679a      	str	r2, [r3, #120]	; 0x78
speed600_shortest.turn180_L.t_acc=8000;
 800ba92:	4b66      	ldr	r3, [pc, #408]	; (800bc2c <input_parameter+0x54c>)
 800ba94:	4a73      	ldr	r2, [pc, #460]	; (800bc64 <input_parameter+0x584>)
 800ba96:	67da      	str	r2, [r3, #124]	; 0x7c
speed600_shortest.turn180_L.f_ofset=20;
 800ba98:	4b64      	ldr	r3, [pc, #400]	; (800bc2c <input_parameter+0x54c>)
 800ba9a:	4a73      	ldr	r2, [pc, #460]	; (800bc68 <input_parameter+0x588>)
 800ba9c:	671a      	str	r2, [r3, #112]	; 0x70
speed600_shortest.turn180_L.e_ofset=40;
 800ba9e:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <input_parameter+0x54c>)
 800baa0:	4a68      	ldr	r2, [pc, #416]	; (800bc44 <input_parameter+0x564>)
 800baa2:	675a      	str	r2, [r3, #116]	; 0x74

speed600_shortest.turn45in_R.g_speed=speed600_shortest.TurnCentervelocity;
 800baa4:	4b61      	ldr	r3, [pc, #388]	; (800bc2c <input_parameter+0x54c>)
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	4a60      	ldr	r2, [pc, #384]	; (800bc2c <input_parameter+0x54c>)
 800baaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed600_shortest.turn45in_R.t_speed=900;
 800baae:	4b5f      	ldr	r3, [pc, #380]	; (800bc2c <input_parameter+0x54c>)
 800bab0:	4a60      	ldr	r2, [pc, #384]	; (800bc34 <input_parameter+0x554>)
 800bab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed600_shortest.turn45in_R.t_acc=13000;
 800bab6:	4b5d      	ldr	r3, [pc, #372]	; (800bc2c <input_parameter+0x54c>)
 800bab8:	4a6e      	ldr	r2, [pc, #440]	; (800bc74 <input_parameter+0x594>)
 800baba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed600_shortest.turn45in_R.f_ofset=25;
 800babe:	4b5b      	ldr	r3, [pc, #364]	; (800bc2c <input_parameter+0x54c>)
 800bac0:	4a6d      	ldr	r2, [pc, #436]	; (800bc78 <input_parameter+0x598>)
 800bac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed600_shortest.turn45in_R.e_ofset=60;
 800bac6:	4b59      	ldr	r3, [pc, #356]	; (800bc2c <input_parameter+0x54c>)
 800bac8:	4a6c      	ldr	r2, [pc, #432]	; (800bc7c <input_parameter+0x59c>)
 800baca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed600_shortest.turn45in_L.g_speed=speed600_shortest.TurnCentervelocity;
 800bace:	4b57      	ldr	r3, [pc, #348]	; (800bc2c <input_parameter+0x54c>)
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	4a56      	ldr	r2, [pc, #344]	; (800bc2c <input_parameter+0x54c>)
 800bad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed600_shortest.turn45in_L.t_speed=900;
 800bad8:	4b54      	ldr	r3, [pc, #336]	; (800bc2c <input_parameter+0x54c>)
 800bada:	4a56      	ldr	r2, [pc, #344]	; (800bc34 <input_parameter+0x554>)
 800badc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed600_shortest.turn45in_L.t_acc=13000;
 800bae0:	4b52      	ldr	r3, [pc, #328]	; (800bc2c <input_parameter+0x54c>)
 800bae2:	4a64      	ldr	r2, [pc, #400]	; (800bc74 <input_parameter+0x594>)
 800bae4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed600_shortest.turn45in_L.f_ofset=32;
 800bae8:	4b50      	ldr	r3, [pc, #320]	; (800bc2c <input_parameter+0x54c>)
 800baea:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800baee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed600_shortest.turn45in_L.e_ofset=60;
 800baf2:	4b4e      	ldr	r3, [pc, #312]	; (800bc2c <input_parameter+0x54c>)
 800baf4:	4a61      	ldr	r2, [pc, #388]	; (800bc7c <input_parameter+0x59c>)
 800baf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed600_shortest.turn135in_R.g_speed=speed600_shortest.TurnCentervelocity;
 800bafa:	4b4c      	ldr	r3, [pc, #304]	; (800bc2c <input_parameter+0x54c>)
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4a4b      	ldr	r2, [pc, #300]	; (800bc2c <input_parameter+0x54c>)
 800bb00:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed600_shortest.turn135in_R.t_speed=900;
 800bb04:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <input_parameter+0x54c>)
 800bb06:	4a4b      	ldr	r2, [pc, #300]	; (800bc34 <input_parameter+0x554>)
 800bb08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed600_shortest.turn135in_R.t_acc=12000;
 800bb0c:	4b47      	ldr	r3, [pc, #284]	; (800bc2c <input_parameter+0x54c>)
 800bb0e:	4a5c      	ldr	r2, [pc, #368]	; (800bc80 <input_parameter+0x5a0>)
 800bb10:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed600_shortest.turn135in_R.f_ofset=53;
 800bb14:	4b45      	ldr	r3, [pc, #276]	; (800bc2c <input_parameter+0x54c>)
 800bb16:	4a4c      	ldr	r2, [pc, #304]	; (800bc48 <input_parameter+0x568>)
 800bb18:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed600_shortest.turn135in_R.e_ofset=47;
 800bb1c:	4b43      	ldr	r3, [pc, #268]	; (800bc2c <input_parameter+0x54c>)
 800bb1e:	4a48      	ldr	r2, [pc, #288]	; (800bc40 <input_parameter+0x560>)
 800bb20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed600_shortest.turn135in_L.g_speed=speed600_shortest.TurnCentervelocity;
 800bb24:	4b41      	ldr	r3, [pc, #260]	; (800bc2c <input_parameter+0x54c>)
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4a40      	ldr	r2, [pc, #256]	; (800bc2c <input_parameter+0x54c>)
 800bb2a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed600_shortest.turn135in_L.t_speed=900;
 800bb2e:	4b3f      	ldr	r3, [pc, #252]	; (800bc2c <input_parameter+0x54c>)
 800bb30:	4a40      	ldr	r2, [pc, #256]	; (800bc34 <input_parameter+0x554>)
 800bb32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed600_shortest.turn135in_L.t_acc=12000;
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <input_parameter+0x54c>)
 800bb38:	4a51      	ldr	r2, [pc, #324]	; (800bc80 <input_parameter+0x5a0>)
 800bb3a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed600_shortest.turn135in_L.f_ofset=40;
 800bb3e:	4b3b      	ldr	r3, [pc, #236]	; (800bc2c <input_parameter+0x54c>)
 800bb40:	4a40      	ldr	r2, [pc, #256]	; (800bc44 <input_parameter+0x564>)
 800bb42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed600_shortest.turn135in_L.e_ofset=55;
 800bb46:	4b39      	ldr	r3, [pc, #228]	; (800bc2c <input_parameter+0x54c>)
 800bb48:	4a37      	ldr	r2, [pc, #220]	; (800bc28 <input_parameter+0x548>)
 800bb4a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed600_shortest.turn45out_R.g_speed=speed600_shortest.TurnCentervelocity;
 800bb4e:	4b37      	ldr	r3, [pc, #220]	; (800bc2c <input_parameter+0x54c>)
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4a36      	ldr	r2, [pc, #216]	; (800bc2c <input_parameter+0x54c>)
 800bb54:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed600_shortest.turn45out_R.t_speed=900;
 800bb58:	4b34      	ldr	r3, [pc, #208]	; (800bc2c <input_parameter+0x54c>)
 800bb5a:	4a36      	ldr	r2, [pc, #216]	; (800bc34 <input_parameter+0x554>)
 800bb5c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed600_shortest.turn45out_R.t_acc=10000;
 800bb60:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <input_parameter+0x54c>)
 800bb62:	4a3b      	ldr	r2, [pc, #236]	; (800bc50 <input_parameter+0x570>)
 800bb64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed600_shortest.turn45out_R.f_ofset=45;
 800bb68:	4b30      	ldr	r3, [pc, #192]	; (800bc2c <input_parameter+0x54c>)
 800bb6a:	4a3a      	ldr	r2, [pc, #232]	; (800bc54 <input_parameter+0x574>)
 800bb6c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed600_shortest.turn45out_R.e_ofset=10;
 800bb70:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <input_parameter+0x54c>)
 800bb72:	4a44      	ldr	r2, [pc, #272]	; (800bc84 <input_parameter+0x5a4>)
 800bb74:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed600_shortest.turn45out_L.g_speed=speed600_shortest.TurnCentervelocity;
 800bb78:	4b2c      	ldr	r3, [pc, #176]	; (800bc2c <input_parameter+0x54c>)
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	4a2b      	ldr	r2, [pc, #172]	; (800bc2c <input_parameter+0x54c>)
 800bb7e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed600_shortest.turn45out_L.t_speed=900;
 800bb82:	4b2a      	ldr	r3, [pc, #168]	; (800bc2c <input_parameter+0x54c>)
 800bb84:	4a2b      	ldr	r2, [pc, #172]	; (800bc34 <input_parameter+0x554>)
 800bb86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed600_shortest.turn45out_L.t_acc=10000;
 800bb8a:	4b28      	ldr	r3, [pc, #160]	; (800bc2c <input_parameter+0x54c>)
 800bb8c:	4a30      	ldr	r2, [pc, #192]	; (800bc50 <input_parameter+0x570>)
 800bb8e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed600_shortest.turn45out_L.f_ofset=40;
 800bb92:	4b26      	ldr	r3, [pc, #152]	; (800bc2c <input_parameter+0x54c>)
 800bb94:	4a2b      	ldr	r2, [pc, #172]	; (800bc44 <input_parameter+0x564>)
 800bb96:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed600_shortest.turn45out_L.e_ofset=10;
 800bb9a:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <input_parameter+0x54c>)
 800bb9c:	4a39      	ldr	r2, [pc, #228]	; (800bc84 <input_parameter+0x5a4>)
 800bb9e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed600_shortest.turn135out_R.g_speed=speed600_shortest.TurnCentervelocity;
 800bba2:	4b22      	ldr	r3, [pc, #136]	; (800bc2c <input_parameter+0x54c>)
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	4a21      	ldr	r2, [pc, #132]	; (800bc2c <input_parameter+0x54c>)
 800bba8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed600_shortest.turn135out_R.t_speed=1000;
 800bbac:	4b1f      	ldr	r3, [pc, #124]	; (800bc2c <input_parameter+0x54c>)
 800bbae:	4a36      	ldr	r2, [pc, #216]	; (800bc88 <input_parameter+0x5a8>)
 800bbb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed600_shortest.turn135out_R.t_acc=12000;
 800bbb4:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <input_parameter+0x54c>)
 800bbb6:	4a32      	ldr	r2, [pc, #200]	; (800bc80 <input_parameter+0x5a0>)
 800bbb8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed600_shortest.turn135out_R.f_ofset=25;
 800bbbc:	4b1b      	ldr	r3, [pc, #108]	; (800bc2c <input_parameter+0x54c>)
 800bbbe:	4a2e      	ldr	r2, [pc, #184]	; (800bc78 <input_parameter+0x598>)
 800bbc0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed600_shortest.turn135out_R.e_ofset=90;
 800bbc4:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <input_parameter+0x54c>)
 800bbc6:	4a31      	ldr	r2, [pc, #196]	; (800bc8c <input_parameter+0x5ac>)
 800bbc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed600_shortest.turn135out_L.g_speed=speed600_shortest.TurnCentervelocity;
 800bbcc:	4b17      	ldr	r3, [pc, #92]	; (800bc2c <input_parameter+0x54c>)
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	4a16      	ldr	r2, [pc, #88]	; (800bc2c <input_parameter+0x54c>)
 800bbd2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed600_shortest.turn135out_L.t_speed=1000;
 800bbd6:	4b15      	ldr	r3, [pc, #84]	; (800bc2c <input_parameter+0x54c>)
 800bbd8:	4a2b      	ldr	r2, [pc, #172]	; (800bc88 <input_parameter+0x5a8>)
 800bbda:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed600_shortest.turn135out_L.t_acc=12000;
 800bbde:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <input_parameter+0x54c>)
 800bbe0:	4a27      	ldr	r2, [pc, #156]	; (800bc80 <input_parameter+0x5a0>)
 800bbe2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed600_shortest.turn135out_L.f_ofset=40;
 800bbe6:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <input_parameter+0x54c>)
 800bbe8:	4a16      	ldr	r2, [pc, #88]	; (800bc44 <input_parameter+0x564>)
 800bbea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed600_shortest.turn135out_L.e_ofset=95;
 800bbee:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <input_parameter+0x54c>)
 800bbf0:	4a27      	ldr	r2, [pc, #156]	; (800bc90 <input_parameter+0x5b0>)
 800bbf2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed600_shortest.V90_R.g_speed=speed600_shortest.TurnCentervelocity;
 800bbf6:	4b0d      	ldr	r3, [pc, #52]	; (800bc2c <input_parameter+0x54c>)
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4a0c      	ldr	r2, [pc, #48]	; (800bc2c <input_parameter+0x54c>)
 800bbfc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed600_shortest.V90_R.t_speed=1650;
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <input_parameter+0x54c>)
 800bc02:	4a24      	ldr	r2, [pc, #144]	; (800bc94 <input_parameter+0x5b4>)
 800bc04:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed600_shortest.V90_R.t_acc=24500;
 800bc08:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <input_parameter+0x54c>)
 800bc0a:	4a23      	ldr	r2, [pc, #140]	; (800bc98 <input_parameter+0x5b8>)
 800bc0c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed600_shortest.V90_R.f_ofset=50;
 800bc10:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <input_parameter+0x54c>)
 800bc12:	4a12      	ldr	r2, [pc, #72]	; (800bc5c <input_parameter+0x57c>)
 800bc14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed600_shortest.V90_R.e_ofset=65;
 800bc18:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <input_parameter+0x54c>)
 800bc1a:	e03f      	b.n	800bc9c <input_parameter+0x5bc>
 800bc1c:	20000a50 	.word	0x20000a50
 800bc20:	46abe000 	.word	0x46abe000
 800bc24:	41e00000 	.word	0x41e00000
 800bc28:	425c0000 	.word	0x425c0000
 800bc2c:	20000b98 	.word	0x20000b98
 800bc30:	44160000 	.word	0x44160000
 800bc34:	44610000 	.word	0x44610000
 800bc38:	44228000 	.word	0x44228000
 800bc3c:	466a6000 	.word	0x466a6000
 800bc40:	423c0000 	.word	0x423c0000
 800bc44:	42200000 	.word	0x42200000
 800bc48:	42540000 	.word	0x42540000
 800bc4c:	42300000 	.word	0x42300000
 800bc50:	461c4000 	.word	0x461c4000
 800bc54:	42340000 	.word	0x42340000
 800bc58:	42380000 	.word	0x42380000
 800bc5c:	42480000 	.word	0x42480000
 800bc60:	44480000 	.word	0x44480000
 800bc64:	45fa0000 	.word	0x45fa0000
 800bc68:	41a00000 	.word	0x41a00000
 800bc6c:	41f00000 	.word	0x41f00000
 800bc70:	44430000 	.word	0x44430000
 800bc74:	464b2000 	.word	0x464b2000
 800bc78:	41c80000 	.word	0x41c80000
 800bc7c:	42700000 	.word	0x42700000
 800bc80:	463b8000 	.word	0x463b8000
 800bc84:	41200000 	.word	0x41200000
 800bc88:	447a0000 	.word	0x447a0000
 800bc8c:	42b40000 	.word	0x42b40000
 800bc90:	42be0000 	.word	0x42be0000
 800bc94:	44ce4000 	.word	0x44ce4000
 800bc98:	46bf6800 	.word	0x46bf6800
 800bc9c:	4a96      	ldr	r2, [pc, #600]	; (800bef8 <input_parameter+0x818>)
 800bc9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed600_shortest.V90_L.g_speed=speed600_shortest.TurnCentervelocity;
 800bca2:	4b96      	ldr	r3, [pc, #600]	; (800befc <input_parameter+0x81c>)
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	4a95      	ldr	r2, [pc, #596]	; (800befc <input_parameter+0x81c>)
 800bca8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed600_shortest.V90_L.t_speed=1550;
 800bcac:	4b93      	ldr	r3, [pc, #588]	; (800befc <input_parameter+0x81c>)
 800bcae:	4a94      	ldr	r2, [pc, #592]	; (800bf00 <input_parameter+0x820>)
 800bcb0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed600_shortest.V90_L.t_acc=22000;
 800bcb4:	4b91      	ldr	r3, [pc, #580]	; (800befc <input_parameter+0x81c>)
 800bcb6:	4a93      	ldr	r2, [pc, #588]	; (800bf04 <input_parameter+0x824>)
 800bcb8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed600_shortest.V90_L.f_ofset=28;
 800bcbc:	4b8f      	ldr	r3, [pc, #572]	; (800befc <input_parameter+0x81c>)
 800bcbe:	4a92      	ldr	r2, [pc, #584]	; (800bf08 <input_parameter+0x828>)
 800bcc0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed600_shortest.V90_L.e_ofset=55;
 800bcc4:	4b8d      	ldr	r3, [pc, #564]	; (800befc <input_parameter+0x81c>)
 800bcc6:	4a91      	ldr	r2, [pc, #580]	; (800bf0c <input_parameter+0x82c>)
 800bcc8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


//*********************************900********************************************

speed900_shortest.SlalomCentervelocity=700;
 800bccc:	4b90      	ldr	r3, [pc, #576]	; (800bf10 <input_parameter+0x830>)
 800bcce:	4a91      	ldr	r2, [pc, #580]	; (800bf14 <input_parameter+0x834>)
 800bcd0:	601a      	str	r2, [r3, #0]
speed900_shortest.TurnCentervelocity=900;
 800bcd2:	4b8f      	ldr	r3, [pc, #572]	; (800bf10 <input_parameter+0x830>)
 800bcd4:	4a90      	ldr	r2, [pc, #576]	; (800bf18 <input_parameter+0x838>)
 800bcd6:	605a      	str	r2, [r3, #4]


speed900_shortest.slalom_R.g_speed=speed900_shortest.SlalomCentervelocity;
 800bcd8:	4b8d      	ldr	r3, [pc, #564]	; (800bf10 <input_parameter+0x830>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a8c      	ldr	r2, [pc, #560]	; (800bf10 <input_parameter+0x830>)
 800bcde:	6093      	str	r3, [r2, #8]
speed900_shortest.slalom_R.t_speed=900;
 800bce0:	4b8b      	ldr	r3, [pc, #556]	; (800bf10 <input_parameter+0x830>)
 800bce2:	4a8d      	ldr	r2, [pc, #564]	; (800bf18 <input_parameter+0x838>)
 800bce4:	615a      	str	r2, [r3, #20]
speed900_shortest.slalom_R.t_acc=15000;
 800bce6:	4b8a      	ldr	r3, [pc, #552]	; (800bf10 <input_parameter+0x830>)
 800bce8:	4a8c      	ldr	r2, [pc, #560]	; (800bf1c <input_parameter+0x83c>)
 800bcea:	619a      	str	r2, [r3, #24]
speed900_shortest.slalom_R.f_ofset=20;
 800bcec:	4b88      	ldr	r3, [pc, #544]	; (800bf10 <input_parameter+0x830>)
 800bcee:	4a8c      	ldr	r2, [pc, #560]	; (800bf20 <input_parameter+0x840>)
 800bcf0:	60da      	str	r2, [r3, #12]
speed900_shortest.slalom_R.e_ofset=20;
 800bcf2:	4b87      	ldr	r3, [pc, #540]	; (800bf10 <input_parameter+0x830>)
 800bcf4:	4a8a      	ldr	r2, [pc, #552]	; (800bf20 <input_parameter+0x840>)
 800bcf6:	611a      	str	r2, [r3, #16]

speed900_shortest.slalom_L.g_speed=speed900_shortest.SlalomCentervelocity;
 800bcf8:	4b85      	ldr	r3, [pc, #532]	; (800bf10 <input_parameter+0x830>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a84      	ldr	r2, [pc, #528]	; (800bf10 <input_parameter+0x830>)
 800bcfe:	61d3      	str	r3, [r2, #28]
speed900_shortest.slalom_L.t_speed=900;
 800bd00:	4b83      	ldr	r3, [pc, #524]	; (800bf10 <input_parameter+0x830>)
 800bd02:	4a85      	ldr	r2, [pc, #532]	; (800bf18 <input_parameter+0x838>)
 800bd04:	629a      	str	r2, [r3, #40]	; 0x28
speed900_shortest.slalom_L.t_acc=15000;
 800bd06:	4b82      	ldr	r3, [pc, #520]	; (800bf10 <input_parameter+0x830>)
 800bd08:	4a84      	ldr	r2, [pc, #528]	; (800bf1c <input_parameter+0x83c>)
 800bd0a:	62da      	str	r2, [r3, #44]	; 0x2c
speed900_shortest.slalom_L.f_ofset=20;
 800bd0c:	4b80      	ldr	r3, [pc, #512]	; (800bf10 <input_parameter+0x830>)
 800bd0e:	4a84      	ldr	r2, [pc, #528]	; (800bf20 <input_parameter+0x840>)
 800bd10:	621a      	str	r2, [r3, #32]
speed900_shortest.slalom_L.e_ofset=20;
 800bd12:	4b7f      	ldr	r3, [pc, #508]	; (800bf10 <input_parameter+0x830>)
 800bd14:	4a82      	ldr	r2, [pc, #520]	; (800bf20 <input_parameter+0x840>)
 800bd16:	625a      	str	r2, [r3, #36]	; 0x24

speed900_shortest.turn90_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bd18:	4b7d      	ldr	r3, [pc, #500]	; (800bf10 <input_parameter+0x830>)
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4a7c      	ldr	r2, [pc, #496]	; (800bf10 <input_parameter+0x830>)
 800bd1e:	6313      	str	r3, [r2, #48]	; 0x30
speed900_shortest.turn90_R.t_speed=500;
 800bd20:	4b7b      	ldr	r3, [pc, #492]	; (800bf10 <input_parameter+0x830>)
 800bd22:	4a80      	ldr	r2, [pc, #512]	; (800bf24 <input_parameter+0x844>)
 800bd24:	63da      	str	r2, [r3, #60]	; 0x3c
speed900_shortest.turn90_R.t_acc=10000;
 800bd26:	4b7a      	ldr	r3, [pc, #488]	; (800bf10 <input_parameter+0x830>)
 800bd28:	4a7f      	ldr	r2, [pc, #508]	; (800bf28 <input_parameter+0x848>)
 800bd2a:	641a      	str	r2, [r3, #64]	; 0x40
speed900_shortest.turn90_R.f_ofset=40;
 800bd2c:	4b78      	ldr	r3, [pc, #480]	; (800bf10 <input_parameter+0x830>)
 800bd2e:	4a7f      	ldr	r2, [pc, #508]	; (800bf2c <input_parameter+0x84c>)
 800bd30:	635a      	str	r2, [r3, #52]	; 0x34
speed900_shortest.turn90_R.e_ofset=40;
 800bd32:	4b77      	ldr	r3, [pc, #476]	; (800bf10 <input_parameter+0x830>)
 800bd34:	4a7d      	ldr	r2, [pc, #500]	; (800bf2c <input_parameter+0x84c>)
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38

speed900_shortest.turn90_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bd38:	4b75      	ldr	r3, [pc, #468]	; (800bf10 <input_parameter+0x830>)
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	4a74      	ldr	r2, [pc, #464]	; (800bf10 <input_parameter+0x830>)
 800bd3e:	6453      	str	r3, [r2, #68]	; 0x44
speed900_shortest.turn90_L.t_speed=500;
 800bd40:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <input_parameter+0x830>)
 800bd42:	4a78      	ldr	r2, [pc, #480]	; (800bf24 <input_parameter+0x844>)
 800bd44:	651a      	str	r2, [r3, #80]	; 0x50
speed900_shortest.turn90_L.t_acc=10000;
 800bd46:	4b72      	ldr	r3, [pc, #456]	; (800bf10 <input_parameter+0x830>)
 800bd48:	4a77      	ldr	r2, [pc, #476]	; (800bf28 <input_parameter+0x848>)
 800bd4a:	655a      	str	r2, [r3, #84]	; 0x54
speed900_shortest.turn90_L.f_ofset=40;
 800bd4c:	4b70      	ldr	r3, [pc, #448]	; (800bf10 <input_parameter+0x830>)
 800bd4e:	4a77      	ldr	r2, [pc, #476]	; (800bf2c <input_parameter+0x84c>)
 800bd50:	649a      	str	r2, [r3, #72]	; 0x48
speed900_shortest.turn90_L.e_ofset=40;
 800bd52:	4b6f      	ldr	r3, [pc, #444]	; (800bf10 <input_parameter+0x830>)
 800bd54:	4a75      	ldr	r2, [pc, #468]	; (800bf2c <input_parameter+0x84c>)
 800bd56:	64da      	str	r2, [r3, #76]	; 0x4c

speed900_shortest.turn180_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bd58:	4b6d      	ldr	r3, [pc, #436]	; (800bf10 <input_parameter+0x830>)
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	4a6c      	ldr	r2, [pc, #432]	; (800bf10 <input_parameter+0x830>)
 800bd5e:	6593      	str	r3, [r2, #88]	; 0x58
speed900_shortest.turn180_R.t_speed=500;
 800bd60:	4b6b      	ldr	r3, [pc, #428]	; (800bf10 <input_parameter+0x830>)
 800bd62:	4a70      	ldr	r2, [pc, #448]	; (800bf24 <input_parameter+0x844>)
 800bd64:	665a      	str	r2, [r3, #100]	; 0x64
speed900_shortest.turn180_R.t_acc=10000;
 800bd66:	4b6a      	ldr	r3, [pc, #424]	; (800bf10 <input_parameter+0x830>)
 800bd68:	4a6f      	ldr	r2, [pc, #444]	; (800bf28 <input_parameter+0x848>)
 800bd6a:	669a      	str	r2, [r3, #104]	; 0x68
speed900_shortest.turn180_R.f_ofset=40;
 800bd6c:	4b68      	ldr	r3, [pc, #416]	; (800bf10 <input_parameter+0x830>)
 800bd6e:	4a6f      	ldr	r2, [pc, #444]	; (800bf2c <input_parameter+0x84c>)
 800bd70:	65da      	str	r2, [r3, #92]	; 0x5c
speed900_shortest.turn180_R.e_ofset=40;
 800bd72:	4b67      	ldr	r3, [pc, #412]	; (800bf10 <input_parameter+0x830>)
 800bd74:	4a6d      	ldr	r2, [pc, #436]	; (800bf2c <input_parameter+0x84c>)
 800bd76:	661a      	str	r2, [r3, #96]	; 0x60

speed900_shortest.turn180_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bd78:	4b65      	ldr	r3, [pc, #404]	; (800bf10 <input_parameter+0x830>)
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4a64      	ldr	r2, [pc, #400]	; (800bf10 <input_parameter+0x830>)
 800bd7e:	66d3      	str	r3, [r2, #108]	; 0x6c
speed900_shortest.turn180_L.t_speed=500;
 800bd80:	4b63      	ldr	r3, [pc, #396]	; (800bf10 <input_parameter+0x830>)
 800bd82:	4a68      	ldr	r2, [pc, #416]	; (800bf24 <input_parameter+0x844>)
 800bd84:	679a      	str	r2, [r3, #120]	; 0x78
speed900_shortest.turn180_L.t_acc=10000;
 800bd86:	4b62      	ldr	r3, [pc, #392]	; (800bf10 <input_parameter+0x830>)
 800bd88:	4a67      	ldr	r2, [pc, #412]	; (800bf28 <input_parameter+0x848>)
 800bd8a:	67da      	str	r2, [r3, #124]	; 0x7c
speed900_shortest.turn180_L.f_ofset=40;
 800bd8c:	4b60      	ldr	r3, [pc, #384]	; (800bf10 <input_parameter+0x830>)
 800bd8e:	4a67      	ldr	r2, [pc, #412]	; (800bf2c <input_parameter+0x84c>)
 800bd90:	671a      	str	r2, [r3, #112]	; 0x70
speed900_shortest.turn180_L.e_ofset=40;
 800bd92:	4b5f      	ldr	r3, [pc, #380]	; (800bf10 <input_parameter+0x830>)
 800bd94:	4a65      	ldr	r2, [pc, #404]	; (800bf2c <input_parameter+0x84c>)
 800bd96:	675a      	str	r2, [r3, #116]	; 0x74

speed900_shortest.turn45in_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bd98:	4b5d      	ldr	r3, [pc, #372]	; (800bf10 <input_parameter+0x830>)
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	4a5c      	ldr	r2, [pc, #368]	; (800bf10 <input_parameter+0x830>)
 800bd9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
speed900_shortest.turn45in_R.t_speed=900;
 800bda2:	4b5b      	ldr	r3, [pc, #364]	; (800bf10 <input_parameter+0x830>)
 800bda4:	4a5c      	ldr	r2, [pc, #368]	; (800bf18 <input_parameter+0x838>)
 800bda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed900_shortest.turn45in_R.t_acc=13000;
 800bdaa:	4b59      	ldr	r3, [pc, #356]	; (800bf10 <input_parameter+0x830>)
 800bdac:	4a60      	ldr	r2, [pc, #384]	; (800bf30 <input_parameter+0x850>)
 800bdae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed900_shortest.turn45in_R.f_ofset=25;
 800bdb2:	4b57      	ldr	r3, [pc, #348]	; (800bf10 <input_parameter+0x830>)
 800bdb4:	4a5f      	ldr	r2, [pc, #380]	; (800bf34 <input_parameter+0x854>)
 800bdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed900_shortest.turn45in_R.e_ofset=60;
 800bdba:	4b55      	ldr	r3, [pc, #340]	; (800bf10 <input_parameter+0x830>)
 800bdbc:	4a5e      	ldr	r2, [pc, #376]	; (800bf38 <input_parameter+0x858>)
 800bdbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed900_shortest.turn45in_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bdc2:	4b53      	ldr	r3, [pc, #332]	; (800bf10 <input_parameter+0x830>)
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	4a52      	ldr	r2, [pc, #328]	; (800bf10 <input_parameter+0x830>)
 800bdc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
speed900_shortest.turn45in_L.t_speed=900;
 800bdcc:	4b50      	ldr	r3, [pc, #320]	; (800bf10 <input_parameter+0x830>)
 800bdce:	4a52      	ldr	r2, [pc, #328]	; (800bf18 <input_parameter+0x838>)
 800bdd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed900_shortest.turn45in_L.t_acc=13000;
 800bdd4:	4b4e      	ldr	r3, [pc, #312]	; (800bf10 <input_parameter+0x830>)
 800bdd6:	4a56      	ldr	r2, [pc, #344]	; (800bf30 <input_parameter+0x850>)
 800bdd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed900_shortest.turn45in_L.f_ofset=32;
 800bddc:	4b4c      	ldr	r3, [pc, #304]	; (800bf10 <input_parameter+0x830>)
 800bdde:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800bde2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed900_shortest.turn45in_L.e_ofset=60;
 800bde6:	4b4a      	ldr	r3, [pc, #296]	; (800bf10 <input_parameter+0x830>)
 800bde8:	4a53      	ldr	r2, [pc, #332]	; (800bf38 <input_parameter+0x858>)
 800bdea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed900_shortest.turn135in_R.g_speed=speed900_shortest.TurnCentervelocity;
 800bdee:	4b48      	ldr	r3, [pc, #288]	; (800bf10 <input_parameter+0x830>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	4a47      	ldr	r2, [pc, #284]	; (800bf10 <input_parameter+0x830>)
 800bdf4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
speed900_shortest.turn135in_R.t_speed=900;
 800bdf8:	4b45      	ldr	r3, [pc, #276]	; (800bf10 <input_parameter+0x830>)
 800bdfa:	4a47      	ldr	r2, [pc, #284]	; (800bf18 <input_parameter+0x838>)
 800bdfc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed900_shortest.turn135in_R.t_acc=12000;
 800be00:	4b43      	ldr	r3, [pc, #268]	; (800bf10 <input_parameter+0x830>)
 800be02:	4a4e      	ldr	r2, [pc, #312]	; (800bf3c <input_parameter+0x85c>)
 800be04:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed900_shortest.turn135in_R.f_ofset=53;
 800be08:	4b41      	ldr	r3, [pc, #260]	; (800bf10 <input_parameter+0x830>)
 800be0a:	4a4d      	ldr	r2, [pc, #308]	; (800bf40 <input_parameter+0x860>)
 800be0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed900_shortest.turn135in_R.e_ofset=47;
 800be10:	4b3f      	ldr	r3, [pc, #252]	; (800bf10 <input_parameter+0x830>)
 800be12:	4a4c      	ldr	r2, [pc, #304]	; (800bf44 <input_parameter+0x864>)
 800be14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed900_shortest.turn135in_L.g_speed=speed900_shortest.TurnCentervelocity;
 800be18:	4b3d      	ldr	r3, [pc, #244]	; (800bf10 <input_parameter+0x830>)
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4a3c      	ldr	r2, [pc, #240]	; (800bf10 <input_parameter+0x830>)
 800be1e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
speed900_shortest.turn135in_L.t_speed=900;
 800be22:	4b3b      	ldr	r3, [pc, #236]	; (800bf10 <input_parameter+0x830>)
 800be24:	4a3c      	ldr	r2, [pc, #240]	; (800bf18 <input_parameter+0x838>)
 800be26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed900_shortest.turn135in_L.t_acc=12000;
 800be2a:	4b39      	ldr	r3, [pc, #228]	; (800bf10 <input_parameter+0x830>)
 800be2c:	4a43      	ldr	r2, [pc, #268]	; (800bf3c <input_parameter+0x85c>)
 800be2e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed900_shortest.turn135in_L.f_ofset=40;
 800be32:	4b37      	ldr	r3, [pc, #220]	; (800bf10 <input_parameter+0x830>)
 800be34:	4a3d      	ldr	r2, [pc, #244]	; (800bf2c <input_parameter+0x84c>)
 800be36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed900_shortest.turn135in_L.e_ofset=55;
 800be3a:	4b35      	ldr	r3, [pc, #212]	; (800bf10 <input_parameter+0x830>)
 800be3c:	4a33      	ldr	r2, [pc, #204]	; (800bf0c <input_parameter+0x82c>)
 800be3e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed900_shortest.turn45out_R.g_speed=speed900_shortest.TurnCentervelocity;
 800be42:	4b33      	ldr	r3, [pc, #204]	; (800bf10 <input_parameter+0x830>)
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	4a32      	ldr	r2, [pc, #200]	; (800bf10 <input_parameter+0x830>)
 800be48:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
speed900_shortest.turn45out_R.t_speed=900;
 800be4c:	4b30      	ldr	r3, [pc, #192]	; (800bf10 <input_parameter+0x830>)
 800be4e:	4a32      	ldr	r2, [pc, #200]	; (800bf18 <input_parameter+0x838>)
 800be50:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed900_shortest.turn45out_R.t_acc=10000;
 800be54:	4b2e      	ldr	r3, [pc, #184]	; (800bf10 <input_parameter+0x830>)
 800be56:	4a34      	ldr	r2, [pc, #208]	; (800bf28 <input_parameter+0x848>)
 800be58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed900_shortest.turn45out_R.f_ofset=45;
 800be5c:	4b2c      	ldr	r3, [pc, #176]	; (800bf10 <input_parameter+0x830>)
 800be5e:	4a3a      	ldr	r2, [pc, #232]	; (800bf48 <input_parameter+0x868>)
 800be60:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed900_shortest.turn45out_R.e_ofset=10;
 800be64:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <input_parameter+0x830>)
 800be66:	4a39      	ldr	r2, [pc, #228]	; (800bf4c <input_parameter+0x86c>)
 800be68:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed900_shortest.turn45out_L.g_speed=speed900_shortest.TurnCentervelocity;
 800be6c:	4b28      	ldr	r3, [pc, #160]	; (800bf10 <input_parameter+0x830>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4a27      	ldr	r2, [pc, #156]	; (800bf10 <input_parameter+0x830>)
 800be72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
speed900_shortest.turn45out_L.t_speed=900;
 800be76:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <input_parameter+0x830>)
 800be78:	4a27      	ldr	r2, [pc, #156]	; (800bf18 <input_parameter+0x838>)
 800be7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed900_shortest.turn45out_L.t_acc=10000;
 800be7e:	4b24      	ldr	r3, [pc, #144]	; (800bf10 <input_parameter+0x830>)
 800be80:	4a29      	ldr	r2, [pc, #164]	; (800bf28 <input_parameter+0x848>)
 800be82:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed900_shortest.turn45out_L.f_ofset=40;
 800be86:	4b22      	ldr	r3, [pc, #136]	; (800bf10 <input_parameter+0x830>)
 800be88:	4a28      	ldr	r2, [pc, #160]	; (800bf2c <input_parameter+0x84c>)
 800be8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed900_shortest.turn45out_L.e_ofset=10;
 800be8e:	4b20      	ldr	r3, [pc, #128]	; (800bf10 <input_parameter+0x830>)
 800be90:	4a2e      	ldr	r2, [pc, #184]	; (800bf4c <input_parameter+0x86c>)
 800be92:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed900_shortest.turn135out_R.g_speed=speed900_shortest.TurnCentervelocity;
 800be96:	4b1e      	ldr	r3, [pc, #120]	; (800bf10 <input_parameter+0x830>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	4a1d      	ldr	r2, [pc, #116]	; (800bf10 <input_parameter+0x830>)
 800be9c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
speed900_shortest.turn135out_R.t_speed=1000;
 800bea0:	4b1b      	ldr	r3, [pc, #108]	; (800bf10 <input_parameter+0x830>)
 800bea2:	4a2b      	ldr	r2, [pc, #172]	; (800bf50 <input_parameter+0x870>)
 800bea4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed900_shortest.turn135out_R.t_acc=12000;
 800bea8:	4b19      	ldr	r3, [pc, #100]	; (800bf10 <input_parameter+0x830>)
 800beaa:	4a24      	ldr	r2, [pc, #144]	; (800bf3c <input_parameter+0x85c>)
 800beac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed900_shortest.turn135out_R.f_ofset=25;
 800beb0:	4b17      	ldr	r3, [pc, #92]	; (800bf10 <input_parameter+0x830>)
 800beb2:	4a20      	ldr	r2, [pc, #128]	; (800bf34 <input_parameter+0x854>)
 800beb4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed900_shortest.turn135out_R.e_ofset=90;
 800beb8:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <input_parameter+0x830>)
 800beba:	4a26      	ldr	r2, [pc, #152]	; (800bf54 <input_parameter+0x874>)
 800bebc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed900_shortest.turn135out_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bec0:	4b13      	ldr	r3, [pc, #76]	; (800bf10 <input_parameter+0x830>)
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	4a12      	ldr	r2, [pc, #72]	; (800bf10 <input_parameter+0x830>)
 800bec6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
speed900_shortest.turn135out_L.t_speed=1000;
 800beca:	4b11      	ldr	r3, [pc, #68]	; (800bf10 <input_parameter+0x830>)
 800becc:	4a20      	ldr	r2, [pc, #128]	; (800bf50 <input_parameter+0x870>)
 800bece:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed900_shortest.turn135out_L.t_acc=12000;
 800bed2:	4b0f      	ldr	r3, [pc, #60]	; (800bf10 <input_parameter+0x830>)
 800bed4:	4a19      	ldr	r2, [pc, #100]	; (800bf3c <input_parameter+0x85c>)
 800bed6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed900_shortest.turn135out_L.f_ofset=40;
 800beda:	4b0d      	ldr	r3, [pc, #52]	; (800bf10 <input_parameter+0x830>)
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <input_parameter+0x84c>)
 800bede:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed900_shortest.turn135out_L.e_ofset=95;
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <input_parameter+0x830>)
 800bee4:	4a1c      	ldr	r2, [pc, #112]	; (800bf58 <input_parameter+0x878>)
 800bee6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed900_shortest.V90_R.g_speed=speed900_shortest.TurnCentervelocity;
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <input_parameter+0x830>)
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	4a08      	ldr	r2, [pc, #32]	; (800bf10 <input_parameter+0x830>)
 800bef0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
speed900_shortest.V90_R.t_speed=1650;
 800bef4:	4b06      	ldr	r3, [pc, #24]	; (800bf10 <input_parameter+0x830>)
 800bef6:	e031      	b.n	800bf5c <input_parameter+0x87c>
 800bef8:	42820000 	.word	0x42820000
 800befc:	20000b98 	.word	0x20000b98
 800bf00:	44c1c000 	.word	0x44c1c000
 800bf04:	46abe000 	.word	0x46abe000
 800bf08:	41e00000 	.word	0x41e00000
 800bf0c:	425c0000 	.word	0x425c0000
 800bf10:	20000ce0 	.word	0x20000ce0
 800bf14:	442f0000 	.word	0x442f0000
 800bf18:	44610000 	.word	0x44610000
 800bf1c:	466a6000 	.word	0x466a6000
 800bf20:	41a00000 	.word	0x41a00000
 800bf24:	43fa0000 	.word	0x43fa0000
 800bf28:	461c4000 	.word	0x461c4000
 800bf2c:	42200000 	.word	0x42200000
 800bf30:	464b2000 	.word	0x464b2000
 800bf34:	41c80000 	.word	0x41c80000
 800bf38:	42700000 	.word	0x42700000
 800bf3c:	463b8000 	.word	0x463b8000
 800bf40:	42540000 	.word	0x42540000
 800bf44:	423c0000 	.word	0x423c0000
 800bf48:	42340000 	.word	0x42340000
 800bf4c:	41200000 	.word	0x41200000
 800bf50:	447a0000 	.word	0x447a0000
 800bf54:	42b40000 	.word	0x42b40000
 800bf58:	42be0000 	.word	0x42be0000
 800bf5c:	4a99      	ldr	r2, [pc, #612]	; (800c1c4 <input_parameter+0xae4>)
 800bf5e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed900_shortest.V90_R.t_acc=24500;
 800bf62:	4b99      	ldr	r3, [pc, #612]	; (800c1c8 <input_parameter+0xae8>)
 800bf64:	4a99      	ldr	r2, [pc, #612]	; (800c1cc <input_parameter+0xaec>)
 800bf66:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed900_shortest.V90_R.f_ofset=50;
 800bf6a:	4b97      	ldr	r3, [pc, #604]	; (800c1c8 <input_parameter+0xae8>)
 800bf6c:	4a98      	ldr	r2, [pc, #608]	; (800c1d0 <input_parameter+0xaf0>)
 800bf6e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed900_shortest.V90_R.e_ofset=65;
 800bf72:	4b95      	ldr	r3, [pc, #596]	; (800c1c8 <input_parameter+0xae8>)
 800bf74:	4a97      	ldr	r2, [pc, #604]	; (800c1d4 <input_parameter+0xaf4>)
 800bf76:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed900_shortest.V90_L.g_speed=speed900_shortest.TurnCentervelocity;
 800bf7a:	4b93      	ldr	r3, [pc, #588]	; (800c1c8 <input_parameter+0xae8>)
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	4a92      	ldr	r2, [pc, #584]	; (800c1c8 <input_parameter+0xae8>)
 800bf80:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
speed900_shortest.V90_L.t_speed=1550;
 800bf84:	4b90      	ldr	r3, [pc, #576]	; (800c1c8 <input_parameter+0xae8>)
 800bf86:	4a94      	ldr	r2, [pc, #592]	; (800c1d8 <input_parameter+0xaf8>)
 800bf88:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed900_shortest.V90_L.t_acc=22000;
 800bf8c:	4b8e      	ldr	r3, [pc, #568]	; (800c1c8 <input_parameter+0xae8>)
 800bf8e:	4a93      	ldr	r2, [pc, #588]	; (800c1dc <input_parameter+0xafc>)
 800bf90:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed900_shortest.V90_L.f_ofset=28;
 800bf94:	4b8c      	ldr	r3, [pc, #560]	; (800c1c8 <input_parameter+0xae8>)
 800bf96:	4a92      	ldr	r2, [pc, #584]	; (800c1e0 <input_parameter+0xb00>)
 800bf98:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed900_shortest.V90_L.e_ofset=55;
 800bf9c:	4b8a      	ldr	r3, [pc, #552]	; (800c1c8 <input_parameter+0xae8>)
 800bf9e:	4a91      	ldr	r2, [pc, #580]	; (800c1e4 <input_parameter+0xb04>)
 800bfa0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//*********************************1000********************************************

speed1000_shortest.slalom_R.g_speed=1000;
 800bfa4:	4b90      	ldr	r3, [pc, #576]	; (800c1e8 <input_parameter+0xb08>)
 800bfa6:	4a91      	ldr	r2, [pc, #580]	; (800c1ec <input_parameter+0xb0c>)
 800bfa8:	609a      	str	r2, [r3, #8]
speed1000_shortest.slalom_R.t_speed=550;
 800bfaa:	4b8f      	ldr	r3, [pc, #572]	; (800c1e8 <input_parameter+0xb08>)
 800bfac:	4a90      	ldr	r2, [pc, #576]	; (800c1f0 <input_parameter+0xb10>)
 800bfae:	615a      	str	r2, [r3, #20]
speed1000_shortest.slalom_R.t_acc=12000;
 800bfb0:	4b8d      	ldr	r3, [pc, #564]	; (800c1e8 <input_parameter+0xb08>)
 800bfb2:	4a90      	ldr	r2, [pc, #576]	; (800c1f4 <input_parameter+0xb14>)
 800bfb4:	619a      	str	r2, [r3, #24]
speed1000_shortest.slalom_R.f_ofset=30;
 800bfb6:	4b8c      	ldr	r3, [pc, #560]	; (800c1e8 <input_parameter+0xb08>)
 800bfb8:	4a8f      	ldr	r2, [pc, #572]	; (800c1f8 <input_parameter+0xb18>)
 800bfba:	60da      	str	r2, [r3, #12]
speed1000_shortest.slalom_R.e_ofset=60;
 800bfbc:	4b8a      	ldr	r3, [pc, #552]	; (800c1e8 <input_parameter+0xb08>)
 800bfbe:	4a8f      	ldr	r2, [pc, #572]	; (800c1fc <input_parameter+0xb1c>)
 800bfc0:	611a      	str	r2, [r3, #16]

speed1000_shortest.slalom_L.g_speed=1000;
 800bfc2:	4b89      	ldr	r3, [pc, #548]	; (800c1e8 <input_parameter+0xb08>)
 800bfc4:	4a89      	ldr	r2, [pc, #548]	; (800c1ec <input_parameter+0xb0c>)
 800bfc6:	61da      	str	r2, [r3, #28]
speed1000_shortest.slalom_L.t_speed=550;
 800bfc8:	4b87      	ldr	r3, [pc, #540]	; (800c1e8 <input_parameter+0xb08>)
 800bfca:	4a89      	ldr	r2, [pc, #548]	; (800c1f0 <input_parameter+0xb10>)
 800bfcc:	629a      	str	r2, [r3, #40]	; 0x28
speed1000_shortest.slalom_L.t_acc=12000;
 800bfce:	4b86      	ldr	r3, [pc, #536]	; (800c1e8 <input_parameter+0xb08>)
 800bfd0:	4a88      	ldr	r2, [pc, #544]	; (800c1f4 <input_parameter+0xb14>)
 800bfd2:	62da      	str	r2, [r3, #44]	; 0x2c
speed1000_shortest.slalom_L.f_ofset=30;
 800bfd4:	4b84      	ldr	r3, [pc, #528]	; (800c1e8 <input_parameter+0xb08>)
 800bfd6:	4a88      	ldr	r2, [pc, #544]	; (800c1f8 <input_parameter+0xb18>)
 800bfd8:	621a      	str	r2, [r3, #32]
speed1000_shortest.slalom_L.e_ofset=60;
 800bfda:	4b83      	ldr	r3, [pc, #524]	; (800c1e8 <input_parameter+0xb08>)
 800bfdc:	4a87      	ldr	r2, [pc, #540]	; (800c1fc <input_parameter+0xb1c>)
 800bfde:	625a      	str	r2, [r3, #36]	; 0x24

speed1000_shortest.turn90_R.g_speed=1000;
 800bfe0:	4b81      	ldr	r3, [pc, #516]	; (800c1e8 <input_parameter+0xb08>)
 800bfe2:	4a82      	ldr	r2, [pc, #520]	; (800c1ec <input_parameter+0xb0c>)
 800bfe4:	631a      	str	r2, [r3, #48]	; 0x30
speed1000_shortest.turn90_R.t_speed=400;
 800bfe6:	4b80      	ldr	r3, [pc, #512]	; (800c1e8 <input_parameter+0xb08>)
 800bfe8:	4a85      	ldr	r2, [pc, #532]	; (800c200 <input_parameter+0xb20>)
 800bfea:	63da      	str	r2, [r3, #60]	; 0x3c
speed1000_shortest.turn90_R.t_acc=12000;
 800bfec:	4b7e      	ldr	r3, [pc, #504]	; (800c1e8 <input_parameter+0xb08>)
 800bfee:	4a81      	ldr	r2, [pc, #516]	; (800c1f4 <input_parameter+0xb14>)
 800bff0:	641a      	str	r2, [r3, #64]	; 0x40
speed1000_shortest.turn90_R.f_ofset=30;
 800bff2:	4b7d      	ldr	r3, [pc, #500]	; (800c1e8 <input_parameter+0xb08>)
 800bff4:	4a80      	ldr	r2, [pc, #512]	; (800c1f8 <input_parameter+0xb18>)
 800bff6:	635a      	str	r2, [r3, #52]	; 0x34
speed1000_shortest.turn90_R.e_ofset=60;
 800bff8:	4b7b      	ldr	r3, [pc, #492]	; (800c1e8 <input_parameter+0xb08>)
 800bffa:	4a80      	ldr	r2, [pc, #512]	; (800c1fc <input_parameter+0xb1c>)
 800bffc:	639a      	str	r2, [r3, #56]	; 0x38

speed1000_shortest.turn90_L.g_speed=1000;
 800bffe:	4b7a      	ldr	r3, [pc, #488]	; (800c1e8 <input_parameter+0xb08>)
 800c000:	4a7a      	ldr	r2, [pc, #488]	; (800c1ec <input_parameter+0xb0c>)
 800c002:	645a      	str	r2, [r3, #68]	; 0x44
speed1000_shortest.turn90_L.t_speed=400;
 800c004:	4b78      	ldr	r3, [pc, #480]	; (800c1e8 <input_parameter+0xb08>)
 800c006:	4a7e      	ldr	r2, [pc, #504]	; (800c200 <input_parameter+0xb20>)
 800c008:	651a      	str	r2, [r3, #80]	; 0x50
speed1000_shortest.turn90_L.t_acc=12000;
 800c00a:	4b77      	ldr	r3, [pc, #476]	; (800c1e8 <input_parameter+0xb08>)
 800c00c:	4a79      	ldr	r2, [pc, #484]	; (800c1f4 <input_parameter+0xb14>)
 800c00e:	655a      	str	r2, [r3, #84]	; 0x54
speed1000_shortest.turn90_L.f_ofset=30;
 800c010:	4b75      	ldr	r3, [pc, #468]	; (800c1e8 <input_parameter+0xb08>)
 800c012:	4a79      	ldr	r2, [pc, #484]	; (800c1f8 <input_parameter+0xb18>)
 800c014:	649a      	str	r2, [r3, #72]	; 0x48
speed1000_shortest.turn90_L.e_ofset=60;
 800c016:	4b74      	ldr	r3, [pc, #464]	; (800c1e8 <input_parameter+0xb08>)
 800c018:	4a78      	ldr	r2, [pc, #480]	; (800c1fc <input_parameter+0xb1c>)
 800c01a:	64da      	str	r2, [r3, #76]	; 0x4c

speed1000_shortest.turn180_R.g_speed=1000;
 800c01c:	4b72      	ldr	r3, [pc, #456]	; (800c1e8 <input_parameter+0xb08>)
 800c01e:	4a73      	ldr	r2, [pc, #460]	; (800c1ec <input_parameter+0xb0c>)
 800c020:	659a      	str	r2, [r3, #88]	; 0x58
speed1000_shortest.turn180_R.t_speed=500;
 800c022:	4b71      	ldr	r3, [pc, #452]	; (800c1e8 <input_parameter+0xb08>)
 800c024:	4a77      	ldr	r2, [pc, #476]	; (800c204 <input_parameter+0xb24>)
 800c026:	665a      	str	r2, [r3, #100]	; 0x64
speed1000_shortest.turn180_R.t_acc=10000;
 800c028:	4b6f      	ldr	r3, [pc, #444]	; (800c1e8 <input_parameter+0xb08>)
 800c02a:	4a77      	ldr	r2, [pc, #476]	; (800c208 <input_parameter+0xb28>)
 800c02c:	669a      	str	r2, [r3, #104]	; 0x68
speed1000_shortest.turn180_R.f_ofset=30;
 800c02e:	4b6e      	ldr	r3, [pc, #440]	; (800c1e8 <input_parameter+0xb08>)
 800c030:	4a71      	ldr	r2, [pc, #452]	; (800c1f8 <input_parameter+0xb18>)
 800c032:	65da      	str	r2, [r3, #92]	; 0x5c
speed1000_shortest.turn180_R.e_ofset=70;
 800c034:	4b6c      	ldr	r3, [pc, #432]	; (800c1e8 <input_parameter+0xb08>)
 800c036:	4a75      	ldr	r2, [pc, #468]	; (800c20c <input_parameter+0xb2c>)
 800c038:	661a      	str	r2, [r3, #96]	; 0x60

speed1000_shortest.turn180_L.g_speed=1000;
 800c03a:	4b6b      	ldr	r3, [pc, #428]	; (800c1e8 <input_parameter+0xb08>)
 800c03c:	4a6b      	ldr	r2, [pc, #428]	; (800c1ec <input_parameter+0xb0c>)
 800c03e:	66da      	str	r2, [r3, #108]	; 0x6c
speed1000_shortest.turn180_L.t_speed=500;
 800c040:	4b69      	ldr	r3, [pc, #420]	; (800c1e8 <input_parameter+0xb08>)
 800c042:	4a70      	ldr	r2, [pc, #448]	; (800c204 <input_parameter+0xb24>)
 800c044:	679a      	str	r2, [r3, #120]	; 0x78
speed1000_shortest.turn180_L.t_acc=10000;
 800c046:	4b68      	ldr	r3, [pc, #416]	; (800c1e8 <input_parameter+0xb08>)
 800c048:	4a6f      	ldr	r2, [pc, #444]	; (800c208 <input_parameter+0xb28>)
 800c04a:	67da      	str	r2, [r3, #124]	; 0x7c
speed1000_shortest.turn180_L.f_ofset=30;
 800c04c:	4b66      	ldr	r3, [pc, #408]	; (800c1e8 <input_parameter+0xb08>)
 800c04e:	4a6a      	ldr	r2, [pc, #424]	; (800c1f8 <input_parameter+0xb18>)
 800c050:	671a      	str	r2, [r3, #112]	; 0x70
speed1000_shortest.turn180_L.e_ofset=70;
 800c052:	4b65      	ldr	r3, [pc, #404]	; (800c1e8 <input_parameter+0xb08>)
 800c054:	4a6d      	ldr	r2, [pc, #436]	; (800c20c <input_parameter+0xb2c>)
 800c056:	675a      	str	r2, [r3, #116]	; 0x74

speed1000_shortest.turn45in_R.g_speed=1000;
 800c058:	4b63      	ldr	r3, [pc, #396]	; (800c1e8 <input_parameter+0xb08>)
 800c05a:	4a64      	ldr	r2, [pc, #400]	; (800c1ec <input_parameter+0xb0c>)
 800c05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
speed1000_shortest.turn45in_R.t_speed=750;
 800c060:	4b61      	ldr	r3, [pc, #388]	; (800c1e8 <input_parameter+0xb08>)
 800c062:	4a6b      	ldr	r2, [pc, #428]	; (800c210 <input_parameter+0xb30>)
 800c064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
speed1000_shortest.turn45in_R.t_acc=12000;
 800c068:	4b5f      	ldr	r3, [pc, #380]	; (800c1e8 <input_parameter+0xb08>)
 800c06a:	4a62      	ldr	r2, [pc, #392]	; (800c1f4 <input_parameter+0xb14>)
 800c06c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
speed1000_shortest.turn45in_R.f_ofset=20;
 800c070:	4b5d      	ldr	r3, [pc, #372]	; (800c1e8 <input_parameter+0xb08>)
 800c072:	4a68      	ldr	r2, [pc, #416]	; (800c214 <input_parameter+0xb34>)
 800c074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
speed1000_shortest.turn45in_R.e_ofset=70;
 800c078:	4b5b      	ldr	r3, [pc, #364]	; (800c1e8 <input_parameter+0xb08>)
 800c07a:	4a64      	ldr	r2, [pc, #400]	; (800c20c <input_parameter+0xb2c>)
 800c07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

speed1000_shortest.turn45in_L.g_speed=1000;
 800c080:	4b59      	ldr	r3, [pc, #356]	; (800c1e8 <input_parameter+0xb08>)
 800c082:	4a5a      	ldr	r2, [pc, #360]	; (800c1ec <input_parameter+0xb0c>)
 800c084:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
speed1000_shortest.turn45in_L.t_speed=750;
 800c088:	4b57      	ldr	r3, [pc, #348]	; (800c1e8 <input_parameter+0xb08>)
 800c08a:	4a61      	ldr	r2, [pc, #388]	; (800c210 <input_parameter+0xb30>)
 800c08c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
speed1000_shortest.turn45in_L.t_acc=12000;
 800c090:	4b55      	ldr	r3, [pc, #340]	; (800c1e8 <input_parameter+0xb08>)
 800c092:	4a58      	ldr	r2, [pc, #352]	; (800c1f4 <input_parameter+0xb14>)
 800c094:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
speed1000_shortest.turn45in_L.f_ofset=20;
 800c098:	4b53      	ldr	r3, [pc, #332]	; (800c1e8 <input_parameter+0xb08>)
 800c09a:	4a5e      	ldr	r2, [pc, #376]	; (800c214 <input_parameter+0xb34>)
 800c09c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
speed1000_shortest.turn45in_L.e_ofset=70;
 800c0a0:	4b51      	ldr	r3, [pc, #324]	; (800c1e8 <input_parameter+0xb08>)
 800c0a2:	4a5a      	ldr	r2, [pc, #360]	; (800c20c <input_parameter+0xb2c>)
 800c0a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

speed1000_shortest.turn135in_R.g_speed=1000;
 800c0a8:	4b4f      	ldr	r3, [pc, #316]	; (800c1e8 <input_parameter+0xb08>)
 800c0aa:	4a50      	ldr	r2, [pc, #320]	; (800c1ec <input_parameter+0xb0c>)
 800c0ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
speed1000_shortest.turn135in_R.t_speed=680;
 800c0b0:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <input_parameter+0xb08>)
 800c0b2:	4a59      	ldr	r2, [pc, #356]	; (800c218 <input_parameter+0xb38>)
 800c0b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
speed1000_shortest.turn135in_R.t_acc=14000;
 800c0b8:	4b4b      	ldr	r3, [pc, #300]	; (800c1e8 <input_parameter+0xb08>)
 800c0ba:	4a58      	ldr	r2, [pc, #352]	; (800c21c <input_parameter+0xb3c>)
 800c0bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
speed1000_shortest.turn135in_R.f_ofset=20;
 800c0c0:	4b49      	ldr	r3, [pc, #292]	; (800c1e8 <input_parameter+0xb08>)
 800c0c2:	4a54      	ldr	r2, [pc, #336]	; (800c214 <input_parameter+0xb34>)
 800c0c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
speed1000_shortest.turn135in_R.e_ofset=50;
 800c0c8:	4b47      	ldr	r3, [pc, #284]	; (800c1e8 <input_parameter+0xb08>)
 800c0ca:	4a41      	ldr	r2, [pc, #260]	; (800c1d0 <input_parameter+0xaf0>)
 800c0cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

speed1000_shortest.turn135in_L.g_speed=1000;
 800c0d0:	4b45      	ldr	r3, [pc, #276]	; (800c1e8 <input_parameter+0xb08>)
 800c0d2:	4a46      	ldr	r2, [pc, #280]	; (800c1ec <input_parameter+0xb0c>)
 800c0d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
speed1000_shortest.turn135in_L.t_speed=680;
 800c0d8:	4b43      	ldr	r3, [pc, #268]	; (800c1e8 <input_parameter+0xb08>)
 800c0da:	4a4f      	ldr	r2, [pc, #316]	; (800c218 <input_parameter+0xb38>)
 800c0dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
speed1000_shortest.turn135in_L.t_acc=14000;
 800c0e0:	4b41      	ldr	r3, [pc, #260]	; (800c1e8 <input_parameter+0xb08>)
 800c0e2:	4a4e      	ldr	r2, [pc, #312]	; (800c21c <input_parameter+0xb3c>)
 800c0e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
speed1000_shortest.turn135in_L.f_ofset=20;
 800c0e8:	4b3f      	ldr	r3, [pc, #252]	; (800c1e8 <input_parameter+0xb08>)
 800c0ea:	4a4a      	ldr	r2, [pc, #296]	; (800c214 <input_parameter+0xb34>)
 800c0ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
speed1000_shortest.turn135in_L.e_ofset=50;
 800c0f0:	4b3d      	ldr	r3, [pc, #244]	; (800c1e8 <input_parameter+0xb08>)
 800c0f2:	4a37      	ldr	r2, [pc, #220]	; (800c1d0 <input_parameter+0xaf0>)
 800c0f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

speed1000_shortest.turn45out_R.g_speed=1000;
 800c0f8:	4b3b      	ldr	r3, [pc, #236]	; (800c1e8 <input_parameter+0xb08>)
 800c0fa:	4a3c      	ldr	r2, [pc, #240]	; (800c1ec <input_parameter+0xb0c>)
 800c0fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
speed1000_shortest.turn45out_R.t_speed=750;
 800c100:	4b39      	ldr	r3, [pc, #228]	; (800c1e8 <input_parameter+0xb08>)
 800c102:	4a43      	ldr	r2, [pc, #268]	; (800c210 <input_parameter+0xb30>)
 800c104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
speed1000_shortest.turn45out_R.t_acc=14000;
 800c108:	4b37      	ldr	r3, [pc, #220]	; (800c1e8 <input_parameter+0xb08>)
 800c10a:	4a44      	ldr	r2, [pc, #272]	; (800c21c <input_parameter+0xb3c>)
 800c10c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
speed1000_shortest.turn45out_R.f_ofset=50;
 800c110:	4b35      	ldr	r3, [pc, #212]	; (800c1e8 <input_parameter+0xb08>)
 800c112:	4a2f      	ldr	r2, [pc, #188]	; (800c1d0 <input_parameter+0xaf0>)
 800c114:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
speed1000_shortest.turn45out_R.e_ofset=50;
 800c118:	4b33      	ldr	r3, [pc, #204]	; (800c1e8 <input_parameter+0xb08>)
 800c11a:	4a2d      	ldr	r2, [pc, #180]	; (800c1d0 <input_parameter+0xaf0>)
 800c11c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

speed1000_shortest.turn45out_L.g_speed=1000;
 800c120:	4b31      	ldr	r3, [pc, #196]	; (800c1e8 <input_parameter+0xb08>)
 800c122:	4a32      	ldr	r2, [pc, #200]	; (800c1ec <input_parameter+0xb0c>)
 800c124:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
speed1000_shortest.turn45out_L.t_speed=750;
 800c128:	4b2f      	ldr	r3, [pc, #188]	; (800c1e8 <input_parameter+0xb08>)
 800c12a:	4a39      	ldr	r2, [pc, #228]	; (800c210 <input_parameter+0xb30>)
 800c12c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
speed1000_shortest.turn45out_L.t_acc=14000;
 800c130:	4b2d      	ldr	r3, [pc, #180]	; (800c1e8 <input_parameter+0xb08>)
 800c132:	4a3a      	ldr	r2, [pc, #232]	; (800c21c <input_parameter+0xb3c>)
 800c134:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
speed1000_shortest.turn45out_L.f_ofset=50;
 800c138:	4b2b      	ldr	r3, [pc, #172]	; (800c1e8 <input_parameter+0xb08>)
 800c13a:	4a25      	ldr	r2, [pc, #148]	; (800c1d0 <input_parameter+0xaf0>)
 800c13c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
speed1000_shortest.turn45out_L.e_ofset=50;
 800c140:	4b29      	ldr	r3, [pc, #164]	; (800c1e8 <input_parameter+0xb08>)
 800c142:	4a23      	ldr	r2, [pc, #140]	; (800c1d0 <input_parameter+0xaf0>)
 800c144:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

speed1000_shortest.turn135out_R.g_speed=1000;
 800c148:	4b27      	ldr	r3, [pc, #156]	; (800c1e8 <input_parameter+0xb08>)
 800c14a:	4a28      	ldr	r2, [pc, #160]	; (800c1ec <input_parameter+0xb0c>)
 800c14c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
speed1000_shortest.turn135out_R.t_speed=770;
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <input_parameter+0xb08>)
 800c152:	4a33      	ldr	r2, [pc, #204]	; (800c220 <input_parameter+0xb40>)
 800c154:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
speed1000_shortest.turn135out_R.t_acc=14000;
 800c158:	4b23      	ldr	r3, [pc, #140]	; (800c1e8 <input_parameter+0xb08>)
 800c15a:	4a30      	ldr	r2, [pc, #192]	; (800c21c <input_parameter+0xb3c>)
 800c15c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
speed1000_shortest.turn135out_R.f_ofset=30;
 800c160:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <input_parameter+0xb08>)
 800c162:	4a25      	ldr	r2, [pc, #148]	; (800c1f8 <input_parameter+0xb18>)
 800c164:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
speed1000_shortest.turn135out_R.e_ofset=90;
 800c168:	4b1f      	ldr	r3, [pc, #124]	; (800c1e8 <input_parameter+0xb08>)
 800c16a:	4a2e      	ldr	r2, [pc, #184]	; (800c224 <input_parameter+0xb44>)
 800c16c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

speed1000_shortest.turn135out_L.g_speed=1000;
 800c170:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <input_parameter+0xb08>)
 800c172:	4a1e      	ldr	r2, [pc, #120]	; (800c1ec <input_parameter+0xb0c>)
 800c174:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
speed1000_shortest.turn135out_L.t_speed=770;
 800c178:	4b1b      	ldr	r3, [pc, #108]	; (800c1e8 <input_parameter+0xb08>)
 800c17a:	4a29      	ldr	r2, [pc, #164]	; (800c220 <input_parameter+0xb40>)
 800c17c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
speed1000_shortest.turn135out_L.t_acc=14000;
 800c180:	4b19      	ldr	r3, [pc, #100]	; (800c1e8 <input_parameter+0xb08>)
 800c182:	4a26      	ldr	r2, [pc, #152]	; (800c21c <input_parameter+0xb3c>)
 800c184:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
speed1000_shortest.turn135out_L.f_ofset=30;
 800c188:	4b17      	ldr	r3, [pc, #92]	; (800c1e8 <input_parameter+0xb08>)
 800c18a:	4a1b      	ldr	r2, [pc, #108]	; (800c1f8 <input_parameter+0xb18>)
 800c18c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
speed1000_shortest.turn135out_L.e_ofset=90;
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <input_parameter+0xb08>)
 800c192:	4a24      	ldr	r2, [pc, #144]	; (800c224 <input_parameter+0xb44>)
 800c194:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

speed1000_shortest.V90_R.g_speed=1000;
 800c198:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <input_parameter+0xb08>)
 800c19a:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <input_parameter+0xb0c>)
 800c19c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
speed1000_shortest.V90_R.t_speed=950;
 800c1a0:	4b11      	ldr	r3, [pc, #68]	; (800c1e8 <input_parameter+0xb08>)
 800c1a2:	4a21      	ldr	r2, [pc, #132]	; (800c228 <input_parameter+0xb48>)
 800c1a4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
speed1000_shortest.V90_R.t_acc=18000;
 800c1a8:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <input_parameter+0xb08>)
 800c1aa:	4a20      	ldr	r2, [pc, #128]	; (800c22c <input_parameter+0xb4c>)
 800c1ac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
speed1000_shortest.V90_R.f_ofset=20;
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	; (800c1e8 <input_parameter+0xb08>)
 800c1b2:	4a18      	ldr	r2, [pc, #96]	; (800c214 <input_parameter+0xb34>)
 800c1b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
speed1000_shortest.V90_R.e_ofset=60;
 800c1b8:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <input_parameter+0xb08>)
 800c1ba:	4a10      	ldr	r2, [pc, #64]	; (800c1fc <input_parameter+0xb1c>)
 800c1bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

speed1000_shortest.V90_L.g_speed=1000;
 800c1c0:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <input_parameter+0xb08>)
 800c1c2:	e035      	b.n	800c230 <input_parameter+0xb50>
 800c1c4:	44ce4000 	.word	0x44ce4000
 800c1c8:	20000ce0 	.word	0x20000ce0
 800c1cc:	46bf6800 	.word	0x46bf6800
 800c1d0:	42480000 	.word	0x42480000
 800c1d4:	42820000 	.word	0x42820000
 800c1d8:	44c1c000 	.word	0x44c1c000
 800c1dc:	46abe000 	.word	0x46abe000
 800c1e0:	41e00000 	.word	0x41e00000
 800c1e4:	425c0000 	.word	0x425c0000
 800c1e8:	20000e28 	.word	0x20000e28
 800c1ec:	447a0000 	.word	0x447a0000
 800c1f0:	44098000 	.word	0x44098000
 800c1f4:	463b8000 	.word	0x463b8000
 800c1f8:	41f00000 	.word	0x41f00000
 800c1fc:	42700000 	.word	0x42700000
 800c200:	43c80000 	.word	0x43c80000
 800c204:	43fa0000 	.word	0x43fa0000
 800c208:	461c4000 	.word	0x461c4000
 800c20c:	428c0000 	.word	0x428c0000
 800c210:	443b8000 	.word	0x443b8000
 800c214:	41a00000 	.word	0x41a00000
 800c218:	442a0000 	.word	0x442a0000
 800c21c:	465ac000 	.word	0x465ac000
 800c220:	44408000 	.word	0x44408000
 800c224:	42b40000 	.word	0x42b40000
 800c228:	446d8000 	.word	0x446d8000
 800c22c:	468ca000 	.word	0x468ca000
 800c230:	4a0b      	ldr	r2, [pc, #44]	; (800c260 <input_parameter+0xb80>)
 800c232:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
speed1000_shortest.V90_L.t_speed=950;
 800c236:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <input_parameter+0xb84>)
 800c238:	4a0b      	ldr	r2, [pc, #44]	; (800c268 <input_parameter+0xb88>)
 800c23a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
speed1000_shortest.V90_L.t_acc=18000;
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <input_parameter+0xb84>)
 800c240:	4a0a      	ldr	r2, [pc, #40]	; (800c26c <input_parameter+0xb8c>)
 800c242:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
speed1000_shortest.V90_L.f_ofset=20;
 800c246:	4b07      	ldr	r3, [pc, #28]	; (800c264 <input_parameter+0xb84>)
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <input_parameter+0xb90>)
 800c24a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
speed1000_shortest.V90_L.e_ofset=60;
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <input_parameter+0xb84>)
 800c250:	4a08      	ldr	r2, [pc, #32]	; (800c274 <input_parameter+0xb94>)
 800c252:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




}
 800c256:	bf00      	nop
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	447a0000 	.word	0x447a0000
 800c264:	20000e28 	.word	0x20000e28
 800c268:	446d8000 	.word	0x446d8000
 800c26c:	468ca000 	.word	0x468ca000
 800c270:	41a00000 	.word	0x41a00000
 800c274:	42700000 	.word	0x42700000

0800c278 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c27c:	4b14      	ldr	r3, [pc, #80]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c27e:	4a15      	ldr	r2, [pc, #84]	; (800c2d4 <MX_USART2_UART_Init+0x5c>)
 800c280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c28a:	4b11      	ldr	r3, [pc, #68]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c28c:	2200      	movs	r2, #0
 800c28e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c290:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c292:	2200      	movs	r2, #0
 800c294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c296:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c298:	2200      	movs	r2, #0
 800c29a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c29c:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c29e:	220c      	movs	r2, #12
 800c2a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2a8:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c2ae:	4b08      	ldr	r3, [pc, #32]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2b4:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c2ba:	4805      	ldr	r0, [pc, #20]	; (800c2d0 <MX_USART2_UART_Init+0x58>)
 800c2bc:	f004 ff74 	bl	80111a8 <HAL_UART_Init>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c2c6:	f7f8 f842 	bl	800434e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c2ca:	bf00      	nop
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	2000cf2c 	.word	0x2000cf2c
 800c2d4:	40004400 	.word	0x40004400

0800c2d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b09e      	sub	sp, #120	; 0x78
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	605a      	str	r2, [r3, #4]
 800c2ea:	609a      	str	r2, [r3, #8]
 800c2ec:	60da      	str	r2, [r3, #12]
 800c2ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c2f0:	f107 0310 	add.w	r3, r7, #16
 800c2f4:	2254      	movs	r2, #84	; 0x54
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f005 fc05 	bl	8011b08 <memset>
  if(uartHandle->Instance==USART2)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a28      	ldr	r2, [pc, #160]	; (800c3a4 <HAL_UART_MspInit+0xcc>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d148      	bne.n	800c39a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c308:	2302      	movs	r3, #2
 800c30a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c30c:	2300      	movs	r3, #0
 800c30e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c310:	f107 0310 	add.w	r3, r7, #16
 800c314:	4618      	mov	r0, r3
 800c316:	f003 fb8f 	bl	800fa38 <HAL_RCCEx_PeriphCLKConfig>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800c320:	f7f8 f815 	bl	800434e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c324:	4b20      	ldr	r3, [pc, #128]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c328:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c32e:	6593      	str	r3, [r2, #88]	; 0x58
 800c330:	4b1d      	ldr	r3, [pc, #116]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c33c:	4b1a      	ldr	r3, [pc, #104]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c340:	4a19      	ldr	r2, [pc, #100]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c348:	4b17      	ldr	r3, [pc, #92]	; (800c3a8 <HAL_UART_MspInit+0xd0>)
 800c34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	60bb      	str	r3, [r7, #8]
 800c352:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800c354:	2304      	movs	r3, #4
 800c356:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c358:	2302      	movs	r3, #2
 800c35a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c35c:	2300      	movs	r3, #0
 800c35e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c360:	2303      	movs	r3, #3
 800c362:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c364:	2307      	movs	r3, #7
 800c366:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800c368:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c36c:	4619      	mov	r1, r3
 800c36e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c372:	f001 ffa1 	bl	800e2b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800c376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37c:	2302      	movs	r3, #2
 800c37e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c380:	2300      	movs	r3, #0
 800c382:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c384:	2303      	movs	r3, #3
 800c386:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800c388:	2303      	movs	r3, #3
 800c38a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800c38c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c390:	4619      	mov	r1, r3
 800c392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c396:	f001 ff8f 	bl	800e2b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c39a:	bf00      	nop
 800c39c:	3778      	adds	r7, #120	; 0x78
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	40004400 	.word	0x40004400
 800c3a8:	40021000 	.word	0x40021000

0800c3ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800c3ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c3e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c3b0:	f7fe fee4 	bl	800b17c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c3b4:	480c      	ldr	r0, [pc, #48]	; (800c3e8 <LoopForever+0x6>)
  ldr r1, =_edata
 800c3b6:	490d      	ldr	r1, [pc, #52]	; (800c3ec <LoopForever+0xa>)
  ldr r2, =_sidata
 800c3b8:	4a0d      	ldr	r2, [pc, #52]	; (800c3f0 <LoopForever+0xe>)
  movs r3, #0
 800c3ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c3bc:	e002      	b.n	800c3c4 <LoopCopyDataInit>

0800c3be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c3be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c3c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c3c2:	3304      	adds	r3, #4

0800c3c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c3c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c3c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c3c8:	d3f9      	bcc.n	800c3be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c3ca:	4a0a      	ldr	r2, [pc, #40]	; (800c3f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c3cc:	4c0a      	ldr	r4, [pc, #40]	; (800c3f8 <LoopForever+0x16>)
  movs r3, #0
 800c3ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c3d0:	e001      	b.n	800c3d6 <LoopFillZerobss>

0800c3d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c3d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c3d4:	3204      	adds	r2, #4

0800c3d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c3d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c3d8:	d3fb      	bcc.n	800c3d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c3da:	f005 fb63 	bl	8011aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c3de:	f7f7 fee3 	bl	80041a8 <main>

0800c3e2 <LoopForever>:

LoopForever:
    b LoopForever
 800c3e2:	e7fe      	b.n	800c3e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800c3e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800c3e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c3ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800c3f0:	0801524c 	.word	0x0801524c
  ldr r2, =_sbss
 800c3f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800c3f8:	2000cfc4 	.word	0x2000cfc4

0800c3fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c3fc:	e7fe      	b.n	800c3fc <ADC1_IRQHandler>

0800c3fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c408:	2003      	movs	r0, #3
 800c40a:	f001 fcdd 	bl	800ddc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c40e:	2000      	movs	r0, #0
 800c410:	f000 f80e 	bl	800c430 <HAL_InitTick>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d002      	beq.n	800c420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	71fb      	strb	r3, [r7, #7]
 800c41e:	e001      	b.n	800c424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c420:	f7fe fd5e 	bl	800aee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c424:	79fb      	ldrb	r3, [r7, #7]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800c43c:	4b17      	ldr	r3, [pc, #92]	; (800c49c <HAL_InitTick+0x6c>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d023      	beq.n	800c48c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800c444:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <HAL_InitTick+0x70>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	4b14      	ldr	r3, [pc, #80]	; (800c49c <HAL_InitTick+0x6c>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	4619      	mov	r1, r3
 800c44e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c452:	fbb3 f3f1 	udiv	r3, r3, r1
 800c456:	fbb2 f3f3 	udiv	r3, r2, r3
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fce9 	bl	800de32 <HAL_SYSTICK_Config>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10f      	bne.n	800c486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b0f      	cmp	r3, #15
 800c46a:	d809      	bhi.n	800c480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c46c:	2200      	movs	r2, #0
 800c46e:	6879      	ldr	r1, [r7, #4]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	f001 fcb3 	bl	800ddde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c478:	4a0a      	ldr	r2, [pc, #40]	; (800c4a4 <HAL_InitTick+0x74>)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6013      	str	r3, [r2, #0]
 800c47e:	e007      	b.n	800c490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	73fb      	strb	r3, [r7, #15]
 800c484:	e004      	b.n	800c490 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	73fb      	strb	r3, [r7, #15]
 800c48a:	e001      	b.n	800c490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20000008 	.word	0x20000008
 800c4a0:	20000000 	.word	0x20000000
 800c4a4:	20000004 	.word	0x20000004

0800c4a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c4ac:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <HAL_IncTick+0x20>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <HAL_IncTick+0x24>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	4a04      	ldr	r2, [pc, #16]	; (800c4cc <HAL_IncTick+0x24>)
 800c4ba:	6013      	str	r3, [r2, #0]
}
 800c4bc:	bf00      	nop
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	20000008 	.word	0x20000008
 800c4cc:	2000cfb0 	.word	0x2000cfb0

0800c4d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  return uwTick;
 800c4d4:	4b03      	ldr	r3, [pc, #12]	; (800c4e4 <HAL_GetTick+0x14>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	2000cfb0 	.word	0x2000cfb0

0800c4e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c4f0:	f7ff ffee 	bl	800c4d0 <HAL_GetTick>
 800c4f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d005      	beq.n	800c50e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c502:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <HAL_Delay+0x44>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c50e:	bf00      	nop
 800c510:	f7ff ffde 	bl	800c4d0 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d8f7      	bhi.n	800c510 <HAL_Delay+0x28>
  {
  }
}
 800c520:	bf00      	nop
 800c522:	bf00      	nop
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20000008 	.word	0x20000008

0800c530 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	431a      	orrs	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	609a      	str	r2, [r3, #8]
}
 800c54a:	bf00      	nop
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	431a      	orrs	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	609a      	str	r2, [r3, #8]
}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800c598:	b480      	push	{r7}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3360      	adds	r3, #96	; 0x60
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	4b08      	ldr	r3, [pc, #32]	; (800c5dc <LL_ADC_SetOffset+0x44>)
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	430a      	orrs	r2, r1
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800c5d0:	bf00      	nop
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	03fff000 	.word	0x03fff000

0800c5e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	3360      	adds	r3, #96	; 0x60
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b087      	sub	sp, #28
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3360      	adds	r3, #96	; 0x60
 800c61c:	461a      	mov	r2, r3
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	431a      	orrs	r2, r3
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800c636:	bf00      	nop
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3330      	adds	r3, #48	; 0x30
 800c678:	461a      	mov	r2, r3
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	0a1b      	lsrs	r3, r3, #8
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	f003 030c 	and.w	r3, r3, #12
 800c684:	4413      	add	r3, r2
 800c686:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	f003 031f 	and.w	r3, r3, #31
 800c692:	211f      	movs	r1, #31
 800c694:	fa01 f303 	lsl.w	r3, r1, r3
 800c698:	43db      	mvns	r3, r3
 800c69a:	401a      	ands	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	0e9b      	lsrs	r3, r3, #26
 800c6a0:	f003 011f 	and.w	r1, r3, #31
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	f003 031f 	and.w	r3, r3, #31
 800c6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ae:	431a      	orrs	r2, r3
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c6b4:	bf00      	nop
 800c6b6:	371c      	adds	r7, #28
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3314      	adds	r3, #20
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	0e5b      	lsrs	r3, r3, #25
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	f003 0304 	and.w	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	0d1b      	lsrs	r3, r3, #20
 800c6e8:	f003 031f 	and.w	r3, r3, #31
 800c6ec:	2107      	movs	r1, #7
 800c6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f2:	43db      	mvns	r3, r3
 800c6f4:	401a      	ands	r2, r3
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	0d1b      	lsrs	r3, r3, #20
 800c6fa:	f003 031f 	and.w	r3, r3, #31
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	fa01 f303 	lsl.w	r3, r1, r3
 800c704:	431a      	orrs	r2, r3
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c70a:	bf00      	nop
 800c70c:	371c      	adds	r7, #28
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
	...

0800c718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c730:	43db      	mvns	r3, r3
 800c732:	401a      	ands	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f003 0318 	and.w	r3, r3, #24
 800c73a:	4908      	ldr	r1, [pc, #32]	; (800c75c <LL_ADC_SetChannelSingleDiff+0x44>)
 800c73c:	40d9      	lsrs	r1, r3
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	400b      	ands	r3, r1
 800c742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c746:	431a      	orrs	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	0007ffff 	.word	0x0007ffff

0800c760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800c770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6093      	str	r3, [r2, #8]
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c798:	d101      	bne.n	800c79e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800c79a:	2301      	movs	r3, #1
 800c79c:	e000      	b.n	800c7a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c7bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c7c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7e8:	d101      	bne.n	800c7ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c80c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c810:	f043 0201 	orr.w	r2, r3, #1
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c838:	f043 0202 	orr.w	r2, r3, #2
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <LL_ADC_IsEnabled+0x18>
 800c860:	2301      	movs	r3, #1
 800c862:	e000      	b.n	800c866 <LL_ADC_IsEnabled+0x1a>
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr

0800c872 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f003 0302 	and.w	r3, r3, #2
 800c882:	2b02      	cmp	r3, #2
 800c884:	d101      	bne.n	800c88a <LL_ADC_IsDisableOngoing+0x18>
 800c886:	2301      	movs	r3, #1
 800c888:	e000      	b.n	800c88c <LL_ADC_IsDisableOngoing+0x1a>
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c8ac:	f043 0204 	orr.w	r2, r3, #4
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c8d4:	f043 0210 	orr.w	r2, r3, #16
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	d101      	bne.n	800c900 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e000      	b.n	800c902 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c91e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c922:	f043 0220 	orr.w	r2, r3, #32
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800c92a:	bf00      	nop
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c936:	b480      	push	{r7}
 800c938:	b083      	sub	sp, #12
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	f003 0308 	and.w	r3, r3, #8
 800c946:	2b08      	cmp	r3, #8
 800c948:	d101      	bne.n	800c94e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e000      	b.n	800c950 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800c968:	2300      	movs	r3, #0
 800c96a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d101      	bne.n	800c976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	e12c      	b.n	800cbd0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c980:	2b00      	cmp	r3, #0
 800c982:	d109      	bne.n	800c998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7f7 fa1d 	bl	8003dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fef1 	bl	800c784 <LL_ADC_IsDeepPowerDownEnabled>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d004      	beq.n	800c9b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff fed7 	bl	800c760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff ff0c 	bl	800c7d4 <LL_ADC_IsInternalRegulatorEnabled>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d115      	bne.n	800c9ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff fef0 	bl	800c7ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c9cc:	4b82      	ldr	r3, [pc, #520]	; (800cbd8 <HAL_ADC_Init+0x27c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	099b      	lsrs	r3, r3, #6
 800c9d2:	4a82      	ldr	r2, [pc, #520]	; (800cbdc <HAL_ADC_Init+0x280>)
 800c9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d8:	099b      	lsrs	r3, r3, #6
 800c9da:	3301      	adds	r3, #1
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c9e0:	e002      	b.n	800c9e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1f9      	bne.n	800c9e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff feee 	bl	800c7d4 <LL_ADC_IsInternalRegulatorEnabled>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10d      	bne.n	800ca1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca02:	f043 0210 	orr.w	r2, r3, #16
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca0e:	f043 0201 	orr.w	r2, r3, #1
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff ff62 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800ca24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2a:	f003 0310 	and.w	r3, r3, #16
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f040 80c5 	bne.w	800cbbe <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f040 80c1 	bne.w	800cbbe <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ca44:	f043 0202 	orr.w	r2, r3, #2
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7ff fefb 	bl	800c84c <LL_ADC_IsEnabled>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10b      	bne.n	800ca74 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ca5c:	4860      	ldr	r0, [pc, #384]	; (800cbe0 <HAL_ADC_Init+0x284>)
 800ca5e:	f7ff fef5 	bl	800c84c <LL_ADC_IsEnabled>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d105      	bne.n	800ca74 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	485d      	ldr	r0, [pc, #372]	; (800cbe4 <HAL_ADC_Init+0x288>)
 800ca70:	f7ff fd5e 	bl	800c530 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7e5b      	ldrb	r3, [r3, #25]
 800ca78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ca7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800ca84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800ca8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ca94:	4313      	orrs	r3, r2
 800ca96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d106      	bne.n	800cab0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	3b01      	subs	r3, #1
 800caa8:	045b      	lsls	r3, r3, #17
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	4313      	orrs	r3, r2
 800caae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d009      	beq.n	800cacc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	4313      	orrs	r3, r2
 800caca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68da      	ldr	r2, [r3, #12]
 800cad2:	4b45      	ldr	r3, [pc, #276]	; (800cbe8 <HAL_ADC_Init+0x28c>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6812      	ldr	r2, [r2, #0]
 800cada:	69b9      	ldr	r1, [r7, #24]
 800cadc:	430b      	orrs	r3, r1
 800cade:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff feff 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800caea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff ff20 	bl	800c936 <LL_ADC_INJ_IsConversionOngoing>
 800caf6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d13d      	bne.n	800cb7a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d13a      	bne.n	800cb7a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800cb08:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800cb12:	4313      	orrs	r3, r2
 800cb14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb20:	f023 0302 	bic.w	r3, r3, #2
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	69b9      	ldr	r1, [r7, #24]
 800cb2a:	430b      	orrs	r3, r1
 800cb2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d118      	bne.n	800cb6a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb42:	f023 0304 	bic.w	r3, r3, #4
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cb4e:	4311      	orrs	r1, r2
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cb54:	4311      	orrs	r1, r2
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	431a      	orrs	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f042 0201 	orr.w	r2, r2, #1
 800cb66:	611a      	str	r2, [r3, #16]
 800cb68:	e007      	b.n	800cb7a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	691a      	ldr	r2, [r3, #16]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f022 0201 	bic.w	r2, r2, #1
 800cb78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d10c      	bne.n	800cb9c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb88:	f023 010f 	bic.w	r1, r3, #15
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	1e5a      	subs	r2, r3, #1
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	430a      	orrs	r2, r1
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30
 800cb9a:	e007      	b.n	800cbac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 020f 	bic.w	r2, r2, #15
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	f043 0201 	orr.w	r2, r3, #1
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	655a      	str	r2, [r3, #84]	; 0x54
 800cbbc:	e007      	b.n	800cbce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc2:	f043 0210 	orr.w	r2, r3, #16
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800cbce:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20000000 	.word	0x20000000
 800cbdc:	053e2d63 	.word	0x053e2d63
 800cbe0:	50040000 	.word	0x50040000
 800cbe4:	50040300 	.word	0x50040300
 800cbe8:	fff0c007 	.word	0xfff0c007

0800cbec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff fe75 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d14f      	bne.n	800cca4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d101      	bne.n	800cc12 <HAL_ADC_Start+0x26>
 800cc0e:	2302      	movs	r3, #2
 800cc10:	e04b      	b.n	800ccaa <HAL_ADC_Start+0xbe>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 feae 	bl	800d97c <ADC_Enable>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d137      	bne.n	800cc9a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cc32:	f023 0301 	bic.w	r3, r3, #1
 800cc36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc4a:	d106      	bne.n	800cc5a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc50:	f023 0206 	bic.w	r2, r3, #6
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	659a      	str	r2, [r3, #88]	; 0x58
 800cc58:	e002      	b.n	800cc60 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	221c      	movs	r2, #28
 800cc66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cc86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff fe00 	bl	800c898 <LL_ADC_REG_StartConversion>
 800cc98:	e006      	b.n	800cca8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800cca2:	e001      	b.n	800cca8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800cca4:	2302      	movs	r3, #2
 800cca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d101      	bne.n	800ccc8 <HAL_ADC_Stop+0x16>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e023      	b.n	800cd10 <HAL_ADC_Stop+0x5e>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ccd0:	2103      	movs	r1, #3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fd96 	bl	800d804 <ADC_ConversionStop>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d111      	bne.n	800cd06 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 feac 	bl	800da40 <ADC_Disable>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d109      	bne.n	800cd06 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ccfa:	f023 0301 	bic.w	r3, r3, #1
 800ccfe:	f043 0201 	orr.w	r2, r3, #1
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	2b08      	cmp	r3, #8
 800cd28:	d102      	bne.n	800cd30 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800cd2a:	2308      	movs	r3, #8
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	e010      	b.n	800cd52 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d007      	beq.n	800cd4e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd42:	f043 0220 	orr.w	r2, r3, #32
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e06f      	b.n	800ce2e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800cd4e:	2304      	movs	r3, #4
 800cd50:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800cd52:	f7ff fbbd 	bl	800c4d0 <HAL_GetTick>
 800cd56:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800cd58:	e021      	b.n	800cd9e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d01d      	beq.n	800cd9e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800cd62:	f7ff fbb5 	bl	800c4d0 <HAL_GetTick>
 800cd66:	4602      	mov	r2, r0
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d302      	bcc.n	800cd78 <HAL_ADC_PollForConversion+0x60>
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d112      	bne.n	800cd9e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	4013      	ands	r3, r2
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10b      	bne.n	800cd9e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8a:	f043 0204 	orr.w	r2, r3, #4
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e047      	b.n	800ce2e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	4013      	ands	r3, r2
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0d6      	beq.n	800cd5a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7ff fc40 	bl	800c642 <LL_ADC_REG_IsTriggerSourceSWStart>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d01c      	beq.n	800ce02 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7e5b      	ldrb	r3, [r3, #25]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d118      	bne.n	800ce02 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 0308 	and.w	r3, r3, #8
 800cdda:	2b08      	cmp	r3, #8
 800cddc:	d111      	bne.n	800ce02 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d105      	bne.n	800ce02 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdfa:	f043 0201 	orr.w	r2, r3, #1
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b08      	cmp	r3, #8
 800ce0e:	d104      	bne.n	800ce1a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2208      	movs	r2, #8
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	e008      	b.n	800ce2c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d103      	bne.n	800ce2c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	220c      	movs	r2, #12
 800ce2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fd4d 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d167      	bne.n	800cf24 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d101      	bne.n	800ce62 <HAL_ADC_Start_DMA+0x2a>
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e063      	b.n	800cf2a <HAL_ADC_Start_DMA+0xf2>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 fd86 	bl	800d97c <ADC_Enable>
 800ce70:	4603      	mov	r3, r0
 800ce72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d14f      	bne.n	800cf1a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ce82:	f023 0301 	bic.w	r3, r3, #1
 800ce86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d006      	beq.n	800cea8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce9e:	f023 0206 	bic.w	r2, r3, #6
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	659a      	str	r2, [r3, #88]	; 0x58
 800cea6:	e002      	b.n	800ceae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb2:	4a20      	ldr	r2, [pc, #128]	; (800cf34 <HAL_ADC_Start_DMA+0xfc>)
 800ceb4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceba:	4a1f      	ldr	r2, [pc, #124]	; (800cf38 <HAL_ADC_Start_DMA+0x100>)
 800cebc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec2:	4a1e      	ldr	r2, [pc, #120]	; (800cf3c <HAL_ADC_Start_DMA+0x104>)
 800cec4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	221c      	movs	r2, #28
 800cecc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f042 0210 	orr.w	r2, r2, #16
 800cee4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f042 0201 	orr.w	r2, r2, #1
 800cef4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3340      	adds	r3, #64	; 0x40
 800cf00:	4619      	mov	r1, r3
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f001 f859 	bl	800dfbc <HAL_DMA_Start_IT>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fcc0 	bl	800c898 <LL_ADC_REG_StartConversion>
 800cf18:	e006      	b.n	800cf28 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800cf22:	e001      	b.n	800cf28 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800cf24:	2302      	movs	r3, #2
 800cf26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800cf28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	0800daff 	.word	0x0800daff
 800cf38:	0800dbd7 	.word	0x0800dbd7
 800cf3c:	0800dbf3 	.word	0x0800dbf3

0800cf40 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d101      	bne.n	800cf56 <HAL_ADC_Stop_DMA+0x16>
 800cf52:	2302      	movs	r3, #2
 800cf54:	e051      	b.n	800cffa <HAL_ADC_Stop_DMA+0xba>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800cf5e:	2103      	movs	r1, #3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fc4f 	bl	800d804 <ADC_ConversionStop>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d13f      	bne.n	800cff0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f022 0201 	bic.w	r2, r2, #1
 800cf7e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d10f      	bne.n	800cfae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f872 	bl	800e07c <HAL_DMA_Abort>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d005      	beq.n	800cfae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0210 	bic.w	r2, r2, #16
 800cfbc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d105      	bne.n	800cfd0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fd3b 	bl	800da40 <ADC_Disable>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]
 800cfce:	e002      	b.n	800cfd6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fd35 	bl	800da40 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d109      	bne.n	800cff0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cfe4:	f023 0301 	bic.w	r3, r3, #1
 800cfe8:	f043 0201 	orr.w	r2, r3, #1
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d002:	b480      	push	{r7}
 800d004:	b083      	sub	sp, #12
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b0b6      	sub	sp, #216	; 0xd8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d054:	2300      	movs	r3, #0
 800d056:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d101      	bne.n	800d066 <HAL_ADC_ConfigChannel+0x22>
 800d062:	2302      	movs	r3, #2
 800d064:	e3b9      	b.n	800d7da <HAL_ADC_ConfigChannel+0x796>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fc38 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f040 839e 	bne.w	800d7bc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	2b05      	cmp	r3, #5
 800d086:	d824      	bhi.n	800d0d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	3b02      	subs	r3, #2
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d81b      	bhi.n	800d0ca <HAL_ADC_ConfigChannel+0x86>
 800d092:	a201      	add	r2, pc, #4	; (adr r2, 800d098 <HAL_ADC_ConfigChannel+0x54>)
 800d094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d098:	0800d0a9 	.word	0x0800d0a9
 800d09c:	0800d0b1 	.word	0x0800d0b1
 800d0a0:	0800d0b9 	.word	0x0800d0b9
 800d0a4:	0800d0c1 	.word	0x0800d0c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	220c      	movs	r2, #12
 800d0ac:	605a      	str	r2, [r3, #4]
          break;
 800d0ae:	e011      	b.n	800d0d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2212      	movs	r2, #18
 800d0b4:	605a      	str	r2, [r3, #4]
          break;
 800d0b6:	e00d      	b.n	800d0d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2218      	movs	r2, #24
 800d0bc:	605a      	str	r2, [r3, #4]
          break;
 800d0be:	e009      	b.n	800d0d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0c6:	605a      	str	r2, [r3, #4]
          break;
 800d0c8:	e004      	b.n	800d0d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2206      	movs	r2, #6
 800d0ce:	605a      	str	r2, [r3, #4]
          break;
 800d0d0:	e000      	b.n	800d0d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800d0d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6818      	ldr	r0, [r3, #0]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	6859      	ldr	r1, [r3, #4]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	f7ff fac1 	bl	800c668 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff fbfc 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800d0f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff fc1c 	bl	800c936 <LL_ADC_INJ_IsConversionOngoing>
 800d0fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800d102:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d106:	2b00      	cmp	r3, #0
 800d108:	f040 81a6 	bne.w	800d458 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800d10c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d110:	2b00      	cmp	r3, #0
 800d112:	f040 81a1 	bne.w	800d458 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	6819      	ldr	r1, [r3, #0]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	461a      	mov	r2, r3
 800d124:	f7ff facc 	bl	800c6c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	695a      	ldr	r2, [r3, #20]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	08db      	lsrs	r3, r3, #3
 800d134:	f003 0303 	and.w	r3, r3, #3
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	fa02 f303 	lsl.w	r3, r2, r3
 800d13e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	2b04      	cmp	r3, #4
 800d148:	d00a      	beq.n	800d160 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6818      	ldr	r0, [r3, #0]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	6919      	ldr	r1, [r3, #16]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d15a:	f7ff fa1d 	bl	800c598 <LL_ADC_SetOffset>
 800d15e:	e17b      	b.n	800d458 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2100      	movs	r1, #0
 800d166:	4618      	mov	r0, r3
 800d168:	f7ff fa3a 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10a      	bne.n	800d18c <HAL_ADC_ConfigChannel+0x148>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2100      	movs	r1, #0
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fa2f 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d182:	4603      	mov	r3, r0
 800d184:	0e9b      	lsrs	r3, r3, #26
 800d186:	f003 021f 	and.w	r2, r3, #31
 800d18a:	e01e      	b.n	800d1ca <HAL_ADC_ConfigChannel+0x186>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fa24 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d198:	4603      	mov	r3, r0
 800d19a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d19e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d1a2:	fa93 f3a3 	rbit	r3, r3
 800d1a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d1aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d1b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800d1ba:	2320      	movs	r3, #32
 800d1bc:	e004      	b.n	800d1c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800d1be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d1c2:	fab3 f383 	clz	r3, r3
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d105      	bne.n	800d1e2 <HAL_ADC_ConfigChannel+0x19e>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	0e9b      	lsrs	r3, r3, #26
 800d1dc:	f003 031f 	and.w	r3, r3, #31
 800d1e0:	e018      	b.n	800d214 <HAL_ADC_ConfigChannel+0x1d0>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d1ee:	fa93 f3a3 	rbit	r3, r3
 800d1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800d1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800d1fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800d206:	2320      	movs	r3, #32
 800d208:	e004      	b.n	800d214 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800d20a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d20e:	fab3 f383 	clz	r3, r3
 800d212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800d214:	429a      	cmp	r2, r3
 800d216:	d106      	bne.n	800d226 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff f9f3 	bl	800c60c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2101      	movs	r1, #1
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff f9d7 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d232:	4603      	mov	r3, r0
 800d234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10a      	bne.n	800d252 <HAL_ADC_ConfigChannel+0x20e>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2101      	movs	r1, #1
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff f9cc 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d248:	4603      	mov	r3, r0
 800d24a:	0e9b      	lsrs	r3, r3, #26
 800d24c:	f003 021f 	and.w	r2, r3, #31
 800d250:	e01e      	b.n	800d290 <HAL_ADC_ConfigChannel+0x24c>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2101      	movs	r1, #1
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff f9c1 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d25e:	4603      	mov	r3, r0
 800d260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d268:	fa93 f3a3 	rbit	r3, r3
 800d26c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800d270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800d278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800d280:	2320      	movs	r3, #32
 800d282:	e004      	b.n	800d28e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800d284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d288:	fab3 f383 	clz	r3, r3
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d105      	bne.n	800d2a8 <HAL_ADC_ConfigChannel+0x264>
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	0e9b      	lsrs	r3, r3, #26
 800d2a2:	f003 031f 	and.w	r3, r3, #31
 800d2a6:	e018      	b.n	800d2da <HAL_ADC_ConfigChannel+0x296>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2b4:	fa93 f3a3 	rbit	r3, r3
 800d2b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800d2bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800d2c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800d2cc:	2320      	movs	r3, #32
 800d2ce:	e004      	b.n	800d2da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800d2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2d4:	fab3 f383 	clz	r3, r3
 800d2d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d106      	bne.n	800d2ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff f990 	bl	800c60c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2102      	movs	r1, #2
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff f974 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <HAL_ADC_ConfigChannel+0x2d4>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2102      	movs	r1, #2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff f969 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d30e:	4603      	mov	r3, r0
 800d310:	0e9b      	lsrs	r3, r3, #26
 800d312:	f003 021f 	and.w	r2, r3, #31
 800d316:	e01e      	b.n	800d356 <HAL_ADC_ConfigChannel+0x312>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2102      	movs	r1, #2
 800d31e:	4618      	mov	r0, r3
 800d320:	f7ff f95e 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d324:	4603      	mov	r3, r0
 800d326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d32a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d32e:	fa93 f3a3 	rbit	r3, r3
 800d332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800d336:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d33a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800d33e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800d346:	2320      	movs	r3, #32
 800d348:	e004      	b.n	800d354 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800d34a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d34e:	fab3 f383 	clz	r3, r3
 800d352:	b2db      	uxtb	r3, r3
 800d354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d105      	bne.n	800d36e <HAL_ADC_ConfigChannel+0x32a>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	0e9b      	lsrs	r3, r3, #26
 800d368:	f003 031f 	and.w	r3, r3, #31
 800d36c:	e016      	b.n	800d39c <HAL_ADC_ConfigChannel+0x358>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d37a:	fa93 f3a3 	rbit	r3, r3
 800d37e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800d380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800d386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800d38e:	2320      	movs	r3, #32
 800d390:	e004      	b.n	800d39c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800d392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d396:	fab3 f383 	clz	r3, r3
 800d39a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d106      	bne.n	800d3ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2102      	movs	r1, #2
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff f92f 	bl	800c60c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2103      	movs	r1, #3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff f913 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10a      	bne.n	800d3da <HAL_ADC_ConfigChannel+0x396>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2103      	movs	r1, #3
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff f908 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	0e9b      	lsrs	r3, r3, #26
 800d3d4:	f003 021f 	and.w	r2, r3, #31
 800d3d8:	e017      	b.n	800d40a <HAL_ADC_ConfigChannel+0x3c6>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2103      	movs	r1, #3
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff f8fd 	bl	800c5e0 <LL_ADC_GetOffsetChannel>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ec:	fa93 f3a3 	rbit	r3, r3
 800d3f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800d3f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800d3f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d101      	bne.n	800d400 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800d3fc:	2320      	movs	r3, #32
 800d3fe:	e003      	b.n	800d408 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800d400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d402:	fab3 f383 	clz	r3, r3
 800d406:	b2db      	uxtb	r3, r3
 800d408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d412:	2b00      	cmp	r3, #0
 800d414:	d105      	bne.n	800d422 <HAL_ADC_ConfigChannel+0x3de>
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	0e9b      	lsrs	r3, r3, #26
 800d41c:	f003 031f 	and.w	r3, r3, #31
 800d420:	e011      	b.n	800d446 <HAL_ADC_ConfigChannel+0x402>
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d42a:	fa93 f3a3 	rbit	r3, r3
 800d42e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800d430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d432:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800d434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800d43a:	2320      	movs	r3, #32
 800d43c:	e003      	b.n	800d446 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800d43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d440:	fab3 f383 	clz	r3, r3
 800d444:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800d446:	429a      	cmp	r2, r3
 800d448:	d106      	bne.n	800d458 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2200      	movs	r2, #0
 800d450:	2103      	movs	r1, #3
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff f8da 	bl	800c60c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff f9f5 	bl	800c84c <LL_ADC_IsEnabled>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	f040 813f 	bne.w	800d6e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	461a      	mov	r2, r3
 800d478:	f7ff f94e 	bl	800c718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	4a8e      	ldr	r2, [pc, #568]	; (800d6bc <HAL_ADC_ConfigChannel+0x678>)
 800d482:	4293      	cmp	r3, r2
 800d484:	f040 8130 	bne.w	800d6e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10b      	bne.n	800d4b0 <HAL_ADC_ConfigChannel+0x46c>
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	0e9b      	lsrs	r3, r3, #26
 800d49e:	3301      	adds	r3, #1
 800d4a0:	f003 031f 	and.w	r3, r3, #31
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	bf94      	ite	ls
 800d4a8:	2301      	movls	r3, #1
 800d4aa:	2300      	movhi	r3, #0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	e019      	b.n	800d4e4 <HAL_ADC_ConfigChannel+0x4a0>
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4b8:	fa93 f3a3 	rbit	r3, r3
 800d4bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800d4be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800d4c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	e003      	b.n	800d4d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800d4cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ce:	fab3 f383 	clz	r3, r3
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	f003 031f 	and.w	r3, r3, #31
 800d4da:	2b09      	cmp	r3, #9
 800d4dc:	bf94      	ite	ls
 800d4de:	2301      	movls	r3, #1
 800d4e0:	2300      	movhi	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d079      	beq.n	800d5dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d107      	bne.n	800d504 <HAL_ADC_ConfigChannel+0x4c0>
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	0e9b      	lsrs	r3, r3, #26
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	069b      	lsls	r3, r3, #26
 800d4fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d502:	e015      	b.n	800d530 <HAL_ADC_ConfigChannel+0x4ec>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d50c:	fa93 f3a3 	rbit	r3, r3
 800d510:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d514:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800d516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d101      	bne.n	800d520 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800d51c:	2320      	movs	r3, #32
 800d51e:	e003      	b.n	800d528 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800d520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d522:	fab3 f383 	clz	r3, r3
 800d526:	b2db      	uxtb	r3, r3
 800d528:	3301      	adds	r3, #1
 800d52a:	069b      	lsls	r3, r3, #26
 800d52c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d109      	bne.n	800d550 <HAL_ADC_ConfigChannel+0x50c>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	0e9b      	lsrs	r3, r3, #26
 800d542:	3301      	adds	r3, #1
 800d544:	f003 031f 	and.w	r3, r3, #31
 800d548:	2101      	movs	r1, #1
 800d54a:	fa01 f303 	lsl.w	r3, r1, r3
 800d54e:	e017      	b.n	800d580 <HAL_ADC_ConfigChannel+0x53c>
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d558:	fa93 f3a3 	rbit	r3, r3
 800d55c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800d55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d560:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800d562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d564:	2b00      	cmp	r3, #0
 800d566:	d101      	bne.n	800d56c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800d568:	2320      	movs	r3, #32
 800d56a:	e003      	b.n	800d574 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800d56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d56e:	fab3 f383 	clz	r3, r3
 800d572:	b2db      	uxtb	r3, r3
 800d574:	3301      	adds	r3, #1
 800d576:	f003 031f 	and.w	r3, r3, #31
 800d57a:	2101      	movs	r1, #1
 800d57c:	fa01 f303 	lsl.w	r3, r1, r3
 800d580:	ea42 0103 	orr.w	r1, r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10a      	bne.n	800d5a6 <HAL_ADC_ConfigChannel+0x562>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	0e9b      	lsrs	r3, r3, #26
 800d596:	3301      	adds	r3, #1
 800d598:	f003 021f 	and.w	r2, r3, #31
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	051b      	lsls	r3, r3, #20
 800d5a4:	e018      	b.n	800d5d8 <HAL_ADC_ConfigChannel+0x594>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	fa93 f3a3 	rbit	r3, r3
 800d5b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800d5be:	2320      	movs	r3, #32
 800d5c0:	e003      	b.n	800d5ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800d5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c4:	fab3 f383 	clz	r3, r3
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	f003 021f 	and.w	r2, r3, #31
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	4413      	add	r3, r2
 800d5d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	e080      	b.n	800d6de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d107      	bne.n	800d5f8 <HAL_ADC_ConfigChannel+0x5b4>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	0e9b      	lsrs	r3, r3, #26
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	069b      	lsls	r3, r3, #26
 800d5f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d5f6:	e015      	b.n	800d624 <HAL_ADC_ConfigChannel+0x5e0>
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	fa93 f3a3 	rbit	r3, r3
 800d604:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800d610:	2320      	movs	r3, #32
 800d612:	e003      	b.n	800d61c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	fab3 f383 	clz	r3, r3
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	3301      	adds	r3, #1
 800d61e:	069b      	lsls	r3, r3, #26
 800d620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d109      	bne.n	800d644 <HAL_ADC_ConfigChannel+0x600>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	0e9b      	lsrs	r3, r3, #26
 800d636:	3301      	adds	r3, #1
 800d638:	f003 031f 	and.w	r3, r3, #31
 800d63c:	2101      	movs	r1, #1
 800d63e:	fa01 f303 	lsl.w	r3, r1, r3
 800d642:	e017      	b.n	800d674 <HAL_ADC_ConfigChannel+0x630>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	fa93 f3a3 	rbit	r3, r3
 800d650:	61fb      	str	r3, [r7, #28]
  return result;
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800d65c:	2320      	movs	r3, #32
 800d65e:	e003      	b.n	800d668 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	fab3 f383 	clz	r3, r3
 800d666:	b2db      	uxtb	r3, r3
 800d668:	3301      	adds	r3, #1
 800d66a:	f003 031f 	and.w	r3, r3, #31
 800d66e:	2101      	movs	r1, #1
 800d670:	fa01 f303 	lsl.w	r3, r1, r3
 800d674:	ea42 0103 	orr.w	r1, r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10d      	bne.n	800d6a0 <HAL_ADC_ConfigChannel+0x65c>
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	0e9b      	lsrs	r3, r3, #26
 800d68a:	3301      	adds	r3, #1
 800d68c:	f003 021f 	and.w	r2, r3, #31
 800d690:	4613      	mov	r3, r2
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	4413      	add	r3, r2
 800d696:	3b1e      	subs	r3, #30
 800d698:	051b      	lsls	r3, r3, #20
 800d69a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d69e:	e01d      	b.n	800d6dc <HAL_ADC_ConfigChannel+0x698>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	fa93 f3a3 	rbit	r3, r3
 800d6ac:	613b      	str	r3, [r7, #16]
  return result;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d103      	bne.n	800d6c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	e005      	b.n	800d6c8 <HAL_ADC_ConfigChannel+0x684>
 800d6bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	fab3 f383 	clz	r3, r3
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	f003 021f 	and.w	r2, r3, #31
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3b1e      	subs	r3, #30
 800d6d6:	051b      	lsls	r3, r3, #20
 800d6d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d6dc:	430b      	orrs	r3, r1
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	6892      	ldr	r2, [r2, #8]
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	f7fe ffec 	bl	800c6c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	4b3d      	ldr	r3, [pc, #244]	; (800d7e4 <HAL_ADC_ConfigChannel+0x7a0>)
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d06c      	beq.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d6f4:	483c      	ldr	r0, [pc, #240]	; (800d7e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800d6f6:	f7fe ff41 	bl	800c57c <LL_ADC_GetCommonPathInternalCh>
 800d6fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a3a      	ldr	r2, [pc, #232]	; (800d7ec <HAL_ADC_ConfigChannel+0x7a8>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d127      	bne.n	800d758 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d70c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d710:	2b00      	cmp	r3, #0
 800d712:	d121      	bne.n	800d758 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a35      	ldr	r2, [pc, #212]	; (800d7f0 <HAL_ADC_ConfigChannel+0x7ac>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d157      	bne.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d71e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d726:	4619      	mov	r1, r3
 800d728:	482f      	ldr	r0, [pc, #188]	; (800d7e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800d72a:	f7fe ff14 	bl	800c556 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d72e:	4b31      	ldr	r3, [pc, #196]	; (800d7f4 <HAL_ADC_ConfigChannel+0x7b0>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	099b      	lsrs	r3, r3, #6
 800d734:	4a30      	ldr	r2, [pc, #192]	; (800d7f8 <HAL_ADC_ConfigChannel+0x7b4>)
 800d736:	fba2 2303 	umull	r2, r3, r2, r3
 800d73a:	099b      	lsrs	r3, r3, #6
 800d73c:	1c5a      	adds	r2, r3, #1
 800d73e:	4613      	mov	r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d748:	e002      	b.n	800d750 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1f9      	bne.n	800d74a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d756:	e03a      	b.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a27      	ldr	r2, [pc, #156]	; (800d7fc <HAL_ADC_ConfigChannel+0x7b8>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d113      	bne.n	800d78a <HAL_ADC_ConfigChannel+0x746>
 800d762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10d      	bne.n	800d78a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a1f      	ldr	r2, [pc, #124]	; (800d7f0 <HAL_ADC_ConfigChannel+0x7ac>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d12a      	bne.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d77c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d780:	4619      	mov	r1, r3
 800d782:	4819      	ldr	r0, [pc, #100]	; (800d7e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800d784:	f7fe fee7 	bl	800c556 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d788:	e021      	b.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a1c      	ldr	r2, [pc, #112]	; (800d800 <HAL_ADC_ConfigChannel+0x7bc>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d11c      	bne.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d116      	bne.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <HAL_ADC_ConfigChannel+0x7ac>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d111      	bne.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d7aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d7ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	480c      	ldr	r0, [pc, #48]	; (800d7e8 <HAL_ADC_ConfigChannel+0x7a4>)
 800d7b6:	f7fe fece 	bl	800c556 <LL_ADC_SetCommonPathInternalCh>
 800d7ba:	e008      	b.n	800d7ce <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7c0:	f043 0220 	orr.w	r2, r3, #32
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800d7d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	37d8      	adds	r7, #216	; 0xd8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	80080000 	.word	0x80080000
 800d7e8:	50040300 	.word	0x50040300
 800d7ec:	c7520000 	.word	0xc7520000
 800d7f0:	50040000 	.word	0x50040000
 800d7f4:	20000000 	.word	0x20000000
 800d7f8:	053e2d63 	.word	0x053e2d63
 800d7fc:	cb840000 	.word	0xcb840000
 800d800:	80000001 	.word	0x80000001

0800d804 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800d80e:	2300      	movs	r3, #0
 800d810:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7ff f864 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800d820:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff f885 	bl	800c936 <LL_ADC_INJ_IsConversionOngoing>
 800d82c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 8098 	beq.w	800d96c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d02a      	beq.n	800d8a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	7e5b      	ldrb	r3, [r3, #25]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d126      	bne.n	800d8a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	7e1b      	ldrb	r3, [r3, #24]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d122      	bne.n	800d8a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800d85a:	2301      	movs	r3, #1
 800d85c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d85e:	e014      	b.n	800d88a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	4a45      	ldr	r2, [pc, #276]	; (800d978 <ADC_ConversionStop+0x174>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d90d      	bls.n	800d884 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86c:	f043 0210 	orr.w	r2, r3, #16
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d878:	f043 0201 	orr.w	r2, r3, #1
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	e074      	b.n	800d96e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	3301      	adds	r3, #1
 800d888:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d894:	2b40      	cmp	r3, #64	; 0x40
 800d896:	d1e3      	bne.n	800d860 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2240      	movs	r2, #64	; 0x40
 800d89e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d014      	beq.n	800d8d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff f81c 	bl	800c8e8 <LL_ADC_REG_IsConversionOngoing>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00c      	beq.n	800d8d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe ffd9 	bl	800c872 <LL_ADC_IsDisableOngoing>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d104      	bne.n	800d8d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fff8 	bl	800c8c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d014      	beq.n	800d900 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff f82b 	bl	800c936 <LL_ADC_INJ_IsConversionOngoing>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00c      	beq.n	800d900 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe ffc1 	bl	800c872 <LL_ADC_IsDisableOngoing>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d104      	bne.n	800d900 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7ff f807 	bl	800c90e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	2b02      	cmp	r3, #2
 800d904:	d005      	beq.n	800d912 <ADC_ConversionStop+0x10e>
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	2b03      	cmp	r3, #3
 800d90a:	d105      	bne.n	800d918 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800d90c:	230c      	movs	r3, #12
 800d90e:	617b      	str	r3, [r7, #20]
        break;
 800d910:	e005      	b.n	800d91e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800d912:	2308      	movs	r3, #8
 800d914:	617b      	str	r3, [r7, #20]
        break;
 800d916:	e002      	b.n	800d91e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800d918:	2304      	movs	r3, #4
 800d91a:	617b      	str	r3, [r7, #20]
        break;
 800d91c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800d91e:	f7fe fdd7 	bl	800c4d0 <HAL_GetTick>
 800d922:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d924:	e01b      	b.n	800d95e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800d926:	f7fe fdd3 	bl	800c4d0 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	2b05      	cmp	r3, #5
 800d932:	d914      	bls.n	800d95e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	689a      	ldr	r2, [r3, #8]
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	4013      	ands	r3, r2
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00d      	beq.n	800d95e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d946:	f043 0210 	orr.w	r2, r3, #16
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d952:	f043 0201 	orr.w	r2, r3, #1
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	e007      	b.n	800d96e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689a      	ldr	r2, [r3, #8]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	4013      	ands	r3, r2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1dc      	bne.n	800d926 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3720      	adds	r7, #32
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	a33fffff 	.word	0xa33fffff

0800d97c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fe ff5f 	bl	800c84c <LL_ADC_IsEnabled>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d14d      	bne.n	800da30 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	689a      	ldr	r2, [r3, #8]
 800d99a:	4b28      	ldr	r3, [pc, #160]	; (800da3c <ADC_Enable+0xc0>)
 800d99c:	4013      	ands	r3, r2
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00d      	beq.n	800d9be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a6:	f043 0210 	orr.w	r2, r3, #16
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9b2:	f043 0201 	orr.w	r2, r3, #1
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e039      	b.n	800da32 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe ff1a 	bl	800c7fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800d9c8:	f7fe fd82 	bl	800c4d0 <HAL_GetTick>
 800d9cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d9ce:	e028      	b.n	800da22 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7fe ff39 	bl	800c84c <LL_ADC_IsEnabled>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7fe ff09 	bl	800c7fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d9ea:	f7fe fd71 	bl	800c4d0 <HAL_GetTick>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d914      	bls.n	800da22 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	2b01      	cmp	r3, #1
 800da04:	d00d      	beq.n	800da22 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da0a:	f043 0210 	orr.w	r2, r3, #16
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da16:	f043 0201 	orr.w	r2, r3, #1
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e007      	b.n	800da32 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d1cf      	bne.n	800d9d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	8000003f 	.word	0x8000003f

0800da40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe ff10 	bl	800c872 <LL_ADC_IsDisableOngoing>
 800da52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fe fef7 	bl	800c84c <LL_ADC_IsEnabled>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d047      	beq.n	800daf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d144      	bne.n	800daf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f003 030d 	and.w	r3, r3, #13
 800da74:	2b01      	cmp	r3, #1
 800da76:	d10c      	bne.n	800da92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fed1 	bl	800c824 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2203      	movs	r2, #3
 800da88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800da8a:	f7fe fd21 	bl	800c4d0 <HAL_GetTick>
 800da8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800da90:	e029      	b.n	800dae6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da96:	f043 0210 	orr.w	r2, r3, #16
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa2:	f043 0201 	orr.w	r2, r3, #1
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e023      	b.n	800daf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800daae:	f7fe fd0f 	bl	800c4d0 <HAL_GetTick>
 800dab2:	4602      	mov	r2, r0
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d914      	bls.n	800dae6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00d      	beq.n	800dae6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dace:	f043 0210 	orr.w	r2, r3, #16
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dada:	f043 0201 	orr.w	r2, r3, #1
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e007      	b.n	800daf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1dc      	bne.n	800daae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db14:	2b00      	cmp	r3, #0
 800db16:	d14b      	bne.n	800dbb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f003 0308 	and.w	r3, r3, #8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d021      	beq.n	800db76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fd83 	bl	800c642 <LL_ADC_REG_IsTriggerSourceSWStart>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d032      	beq.n	800dba8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d12b      	bne.n	800dba8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db64:	2b00      	cmp	r3, #0
 800db66:	d11f      	bne.n	800dba8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6c:	f043 0201 	orr.w	r2, r3, #1
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	655a      	str	r2, [r3, #84]	; 0x54
 800db74:	e018      	b.n	800dba8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	f003 0302 	and.w	r3, r3, #2
 800db80:	2b00      	cmp	r3, #0
 800db82:	d111      	bne.n	800dba8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d105      	bne.n	800dba8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dba0:	f043 0201 	orr.w	r2, r3, #1
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7f6 f9b9 	bl	8003f20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800dbae:	e00e      	b.n	800dbce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d003      	beq.n	800dbc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f7ff fa37 	bl	800d030 <HAL_ADC_ErrorCallback>
}
 800dbc2:	e004      	b.n	800dbce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	4798      	blx	r3
}
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b084      	sub	sp, #16
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fa19 	bl	800d01c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc10:	f043 0204 	orr.w	r2, r3, #4
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff fa09 	bl	800d030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dc38:	4b0c      	ldr	r3, [pc, #48]	; (800dc6c <__NVIC_SetPriorityGrouping+0x44>)
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dc44:	4013      	ands	r3, r2
 800dc46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dc50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dc54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dc5a:	4a04      	ldr	r2, [pc, #16]	; (800dc6c <__NVIC_SetPriorityGrouping+0x44>)
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	60d3      	str	r3, [r2, #12]
}
 800dc60:	bf00      	nop
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	e000ed00 	.word	0xe000ed00

0800dc70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dc74:	4b04      	ldr	r3, [pc, #16]	; (800dc88 <__NVIC_GetPriorityGrouping+0x18>)
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	0a1b      	lsrs	r3, r3, #8
 800dc7a:	f003 0307 	and.w	r3, r3, #7
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	e000ed00 	.word	0xe000ed00

0800dc8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	db0b      	blt.n	800dcb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	f003 021f 	and.w	r2, r3, #31
 800dca4:	4907      	ldr	r1, [pc, #28]	; (800dcc4 <__NVIC_EnableIRQ+0x38>)
 800dca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcaa:	095b      	lsrs	r3, r3, #5
 800dcac:	2001      	movs	r0, #1
 800dcae:	fa00 f202 	lsl.w	r2, r0, r2
 800dcb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	e000e100 	.word	0xe000e100

0800dcc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	6039      	str	r1, [r7, #0]
 800dcd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dcd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	db0a      	blt.n	800dcf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	490c      	ldr	r1, [pc, #48]	; (800dd14 <__NVIC_SetPriority+0x4c>)
 800dce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dce6:	0112      	lsls	r2, r2, #4
 800dce8:	b2d2      	uxtb	r2, r2
 800dcea:	440b      	add	r3, r1
 800dcec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dcf0:	e00a      	b.n	800dd08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	4908      	ldr	r1, [pc, #32]	; (800dd18 <__NVIC_SetPriority+0x50>)
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	f003 030f 	and.w	r3, r3, #15
 800dcfe:	3b04      	subs	r3, #4
 800dd00:	0112      	lsls	r2, r2, #4
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	440b      	add	r3, r1
 800dd06:	761a      	strb	r2, [r3, #24]
}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	e000e100 	.word	0xe000e100
 800dd18:	e000ed00 	.word	0xe000ed00

0800dd1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b089      	sub	sp, #36	; 0x24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f003 0307 	and.w	r3, r3, #7
 800dd2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	f1c3 0307 	rsb	r3, r3, #7
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	bf28      	it	cs
 800dd3a:	2304      	movcs	r3, #4
 800dd3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	3304      	adds	r3, #4
 800dd42:	2b06      	cmp	r3, #6
 800dd44:	d902      	bls.n	800dd4c <NVIC_EncodePriority+0x30>
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	3b03      	subs	r3, #3
 800dd4a:	e000      	b.n	800dd4e <NVIC_EncodePriority+0x32>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5a:	43da      	mvns	r2, r3
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	401a      	ands	r2, r3
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dd64:	f04f 31ff 	mov.w	r1, #4294967295
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd6e:	43d9      	mvns	r1, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dd74:	4313      	orrs	r3, r2
         );
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3724      	adds	r7, #36	; 0x24
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
	...

0800dd84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dd94:	d301      	bcc.n	800dd9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dd96:	2301      	movs	r3, #1
 800dd98:	e00f      	b.n	800ddba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dd9a:	4a0a      	ldr	r2, [pc, #40]	; (800ddc4 <SysTick_Config+0x40>)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dda2:	210f      	movs	r1, #15
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	f7ff ff8e 	bl	800dcc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ddac:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <SysTick_Config+0x40>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ddb2:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <SysTick_Config+0x40>)
 800ddb4:	2207      	movs	r2, #7
 800ddb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	e000e010 	.word	0xe000e010

0800ddc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ff29 	bl	800dc28 <__NVIC_SetPriorityGrouping>
}
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	4603      	mov	r3, r0
 800dde6:	60b9      	str	r1, [r7, #8]
 800dde8:	607a      	str	r2, [r7, #4]
 800ddea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ddec:	2300      	movs	r3, #0
 800ddee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ddf0:	f7ff ff3e 	bl	800dc70 <__NVIC_GetPriorityGrouping>
 800ddf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	68b9      	ldr	r1, [r7, #8]
 800ddfa:	6978      	ldr	r0, [r7, #20]
 800ddfc:	f7ff ff8e 	bl	800dd1c <NVIC_EncodePriority>
 800de00:	4602      	mov	r2, r0
 800de02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de06:	4611      	mov	r1, r2
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff ff5d 	bl	800dcc8 <__NVIC_SetPriority>
}
 800de0e:	bf00      	nop
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	4603      	mov	r3, r0
 800de1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800de20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff ff31 	bl	800dc8c <__NVIC_EnableIRQ>
}
 800de2a:	bf00      	nop
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b082      	sub	sp, #8
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ffa2 	bl	800dd84 <SysTick_Config>
 800de40:	4603      	mov	r3, r0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
	...

0800de4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e098      	b.n	800df90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	4b4d      	ldr	r3, [pc, #308]	; (800df9c <HAL_DMA_Init+0x150>)
 800de66:	429a      	cmp	r2, r3
 800de68:	d80f      	bhi.n	800de8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	4b4b      	ldr	r3, [pc, #300]	; (800dfa0 <HAL_DMA_Init+0x154>)
 800de72:	4413      	add	r3, r2
 800de74:	4a4b      	ldr	r2, [pc, #300]	; (800dfa4 <HAL_DMA_Init+0x158>)
 800de76:	fba2 2303 	umull	r2, r3, r2, r3
 800de7a:	091b      	lsrs	r3, r3, #4
 800de7c:	009a      	lsls	r2, r3, #2
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a48      	ldr	r2, [pc, #288]	; (800dfa8 <HAL_DMA_Init+0x15c>)
 800de86:	641a      	str	r2, [r3, #64]	; 0x40
 800de88:	e00e      	b.n	800dea8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	4b46      	ldr	r3, [pc, #280]	; (800dfac <HAL_DMA_Init+0x160>)
 800de92:	4413      	add	r3, r2
 800de94:	4a43      	ldr	r2, [pc, #268]	; (800dfa4 <HAL_DMA_Init+0x158>)
 800de96:	fba2 2303 	umull	r2, r3, r2, r3
 800de9a:	091b      	lsrs	r3, r3, #4
 800de9c:	009a      	lsls	r2, r3, #2
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a42      	ldr	r2, [pc, #264]	; (800dfb0 <HAL_DMA_Init+0x164>)
 800dea6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2202      	movs	r2, #2
 800deac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800debe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800decc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ded8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	699b      	ldr	r3, [r3, #24]
 800dede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4313      	orrs	r3, r2
 800def0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df02:	d039      	beq.n	800df78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df08:	4a27      	ldr	r2, [pc, #156]	; (800dfa8 <HAL_DMA_Init+0x15c>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d11a      	bne.n	800df44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800df0e:	4b29      	ldr	r3, [pc, #164]	; (800dfb4 <HAL_DMA_Init+0x168>)
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df16:	f003 031c 	and.w	r3, r3, #28
 800df1a:	210f      	movs	r1, #15
 800df1c:	fa01 f303 	lsl.w	r3, r1, r3
 800df20:	43db      	mvns	r3, r3
 800df22:	4924      	ldr	r1, [pc, #144]	; (800dfb4 <HAL_DMA_Init+0x168>)
 800df24:	4013      	ands	r3, r2
 800df26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800df28:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <HAL_DMA_Init+0x168>)
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6859      	ldr	r1, [r3, #4]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df34:	f003 031c 	and.w	r3, r3, #28
 800df38:	fa01 f303 	lsl.w	r3, r1, r3
 800df3c:	491d      	ldr	r1, [pc, #116]	; (800dfb4 <HAL_DMA_Init+0x168>)
 800df3e:	4313      	orrs	r3, r2
 800df40:	600b      	str	r3, [r1, #0]
 800df42:	e019      	b.n	800df78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800df44:	4b1c      	ldr	r3, [pc, #112]	; (800dfb8 <HAL_DMA_Init+0x16c>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df4c:	f003 031c 	and.w	r3, r3, #28
 800df50:	210f      	movs	r1, #15
 800df52:	fa01 f303 	lsl.w	r3, r1, r3
 800df56:	43db      	mvns	r3, r3
 800df58:	4917      	ldr	r1, [pc, #92]	; (800dfb8 <HAL_DMA_Init+0x16c>)
 800df5a:	4013      	ands	r3, r2
 800df5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800df5e:	4b16      	ldr	r3, [pc, #88]	; (800dfb8 <HAL_DMA_Init+0x16c>)
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6859      	ldr	r1, [r3, #4]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6a:	f003 031c 	and.w	r3, r3, #28
 800df6e:	fa01 f303 	lsl.w	r3, r1, r3
 800df72:	4911      	ldr	r1, [pc, #68]	; (800dfb8 <HAL_DMA_Init+0x16c>)
 800df74:	4313      	orrs	r3, r2
 800df76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	40020407 	.word	0x40020407
 800dfa0:	bffdfff8 	.word	0xbffdfff8
 800dfa4:	cccccccd 	.word	0xcccccccd
 800dfa8:	40020000 	.word	0x40020000
 800dfac:	bffdfbf8 	.word	0xbffdfbf8
 800dfb0:	40020400 	.word	0x40020400
 800dfb4:	400200a8 	.word	0x400200a8
 800dfb8:	400204a8 	.word	0x400204a8

0800dfbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d101      	bne.n	800dfdc <HAL_DMA_Start_IT+0x20>
 800dfd8:	2302      	movs	r3, #2
 800dfda:	e04b      	b.n	800e074 <HAL_DMA_Start_IT+0xb8>
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d13a      	bne.n	800e066 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2202      	movs	r2, #2
 800dff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f022 0201 	bic.w	r2, r2, #1
 800e00c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f000 f91e 	bl	800e256 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d008      	beq.n	800e034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f042 020e 	orr.w	r2, r2, #14
 800e030:	601a      	str	r2, [r3, #0]
 800e032:	e00f      	b.n	800e054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f022 0204 	bic.w	r2, r2, #4
 800e042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 020a 	orr.w	r2, r2, #10
 800e052:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f042 0201 	orr.w	r2, r2, #1
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	e005      	b.n	800e072 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800e06e:	2302      	movs	r3, #2
 800e070:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800e072:	7dfb      	ldrb	r3, [r7, #23]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b02      	cmp	r3, #2
 800e092:	d008      	beq.n	800e0a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2204      	movs	r2, #4
 800e098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e022      	b.n	800e0ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f022 020e 	bic.w	r2, r2, #14
 800e0b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f022 0201 	bic.w	r2, r2, #1
 800e0c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ca:	f003 021c 	and.w	r2, r3, #28
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	fa01 f202 	lsl.w	r2, r1, r2
 800e0d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3714      	adds	r7, #20
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e114:	f003 031c 	and.w	r3, r3, #28
 800e118:	2204      	movs	r2, #4
 800e11a:	409a      	lsls	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d026      	beq.n	800e172 <HAL_DMA_IRQHandler+0x7a>
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	f003 0304 	and.w	r3, r3, #4
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d021      	beq.n	800e172 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0320 	and.w	r3, r3, #32
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d107      	bne.n	800e14c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f022 0204 	bic.w	r2, r2, #4
 800e14a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e150:	f003 021c 	and.w	r2, r3, #28
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e158:	2104      	movs	r1, #4
 800e15a:	fa01 f202 	lsl.w	r2, r1, r2
 800e15e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e164:	2b00      	cmp	r3, #0
 800e166:	d071      	beq.n	800e24c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800e170:	e06c      	b.n	800e24c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e176:	f003 031c 	and.w	r3, r3, #28
 800e17a:	2202      	movs	r2, #2
 800e17c:	409a      	lsls	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	4013      	ands	r3, r2
 800e182:	2b00      	cmp	r3, #0
 800e184:	d02e      	beq.n	800e1e4 <HAL_DMA_IRQHandler+0xec>
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d029      	beq.n	800e1e4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f003 0320 	and.w	r3, r3, #32
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10b      	bne.n	800e1b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f022 020a 	bic.w	r2, r2, #10
 800e1ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ba:	f003 021c 	and.w	r2, r3, #28
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c2:	2102      	movs	r1, #2
 800e1c4:	fa01 f202 	lsl.w	r2, r1, r2
 800e1c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d038      	beq.n	800e24c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e1e2:	e033      	b.n	800e24c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e8:	f003 031c 	and.w	r3, r3, #28
 800e1ec:	2208      	movs	r2, #8
 800e1ee:	409a      	lsls	r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02a      	beq.n	800e24e <HAL_DMA_IRQHandler+0x156>
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f003 0308 	and.w	r3, r3, #8
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d025      	beq.n	800e24e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 020e 	bic.w	r2, r2, #14
 800e210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e216:	f003 021c 	and.w	r2, r3, #28
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21e:	2101      	movs	r1, #1
 800e220:	fa01 f202 	lsl.w	r2, r1, r2
 800e224:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e240:	2b00      	cmp	r3, #0
 800e242:	d004      	beq.n	800e24e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e24c:	bf00      	nop
 800e24e:	bf00      	nop
}
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e256:	b480      	push	{r7}
 800e258:	b085      	sub	sp, #20
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
 800e262:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e268:	f003 021c 	and.w	r2, r3, #28
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e270:	2101      	movs	r1, #1
 800e272:	fa01 f202 	lsl.w	r2, r1, r2
 800e276:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	2b10      	cmp	r3, #16
 800e286:	d108      	bne.n	800e29a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e298:	e007      	b.n	800e2aa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	60da      	str	r2, [r3, #12]
}
 800e2aa:	bf00      	nop
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
	...

0800e2b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e2c6:	e148      	b.n	800e55a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f000 813a 	beq.w	800e554 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d00b      	beq.n	800e300 <HAL_GPIO_Init+0x48>
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	d007      	beq.n	800e300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e2f4:	2b11      	cmp	r3, #17
 800e2f6:	d003      	beq.n	800e300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2b12      	cmp	r3, #18
 800e2fe:	d130      	bne.n	800e362 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	2203      	movs	r2, #3
 800e30c:	fa02 f303 	lsl.w	r3, r2, r3
 800e310:	43db      	mvns	r3, r3
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	4013      	ands	r3, r2
 800e316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	68da      	ldr	r2, [r3, #12]
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	fa02 f303 	lsl.w	r3, r2, r3
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	4313      	orrs	r3, r2
 800e328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e336:	2201      	movs	r2, #1
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	fa02 f303 	lsl.w	r3, r2, r3
 800e33e:	43db      	mvns	r3, r3
 800e340:	693a      	ldr	r2, [r7, #16]
 800e342:	4013      	ands	r3, r2
 800e344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	091b      	lsrs	r3, r3, #4
 800e34c:	f003 0201 	and.w	r2, r3, #1
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	fa02 f303 	lsl.w	r3, r2, r3
 800e356:	693a      	ldr	r2, [r7, #16]
 800e358:	4313      	orrs	r3, r2
 800e35a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	2203      	movs	r2, #3
 800e36e:	fa02 f303 	lsl.w	r3, r2, r3
 800e372:	43db      	mvns	r3, r3
 800e374:	693a      	ldr	r2, [r7, #16]
 800e376:	4013      	ands	r3, r2
 800e378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	689a      	ldr	r2, [r3, #8]
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	fa02 f303 	lsl.w	r3, r2, r3
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	4313      	orrs	r3, r2
 800e38a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	2b02      	cmp	r3, #2
 800e398:	d003      	beq.n	800e3a2 <HAL_GPIO_Init+0xea>
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	2b12      	cmp	r3, #18
 800e3a0:	d123      	bne.n	800e3ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	08da      	lsrs	r2, r3, #3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3208      	adds	r2, #8
 800e3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f003 0307 	and.w	r3, r3, #7
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	220f      	movs	r2, #15
 800e3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e3be:	43db      	mvns	r3, r3
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	691a      	ldr	r2, [r3, #16]
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f003 0307 	and.w	r3, r3, #7
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3d6:	693a      	ldr	r2, [r7, #16]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	08da      	lsrs	r2, r3, #3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3208      	adds	r2, #8
 800e3e4:	6939      	ldr	r1, [r7, #16]
 800e3e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fa:	43db      	mvns	r3, r3
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4013      	ands	r3, r2
 800e400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	f003 0203 	and.w	r2, r3, #3
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	fa02 f303 	lsl.w	r3, r2, r3
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	4313      	orrs	r3, r2
 800e416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e426:	2b00      	cmp	r3, #0
 800e428:	f000 8094 	beq.w	800e554 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e42c:	4b52      	ldr	r3, [pc, #328]	; (800e578 <HAL_GPIO_Init+0x2c0>)
 800e42e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e430:	4a51      	ldr	r2, [pc, #324]	; (800e578 <HAL_GPIO_Init+0x2c0>)
 800e432:	f043 0301 	orr.w	r3, r3, #1
 800e436:	6613      	str	r3, [r2, #96]	; 0x60
 800e438:	4b4f      	ldr	r3, [pc, #316]	; (800e578 <HAL_GPIO_Init+0x2c0>)
 800e43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	60bb      	str	r3, [r7, #8]
 800e442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e444:	4a4d      	ldr	r2, [pc, #308]	; (800e57c <HAL_GPIO_Init+0x2c4>)
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	089b      	lsrs	r3, r3, #2
 800e44a:	3302      	adds	r3, #2
 800e44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	f003 0303 	and.w	r3, r3, #3
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	220f      	movs	r2, #15
 800e45c:	fa02 f303 	lsl.w	r3, r2, r3
 800e460:	43db      	mvns	r3, r3
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	4013      	ands	r3, r2
 800e466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e46e:	d00d      	beq.n	800e48c <HAL_GPIO_Init+0x1d4>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a43      	ldr	r2, [pc, #268]	; (800e580 <HAL_GPIO_Init+0x2c8>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d007      	beq.n	800e488 <HAL_GPIO_Init+0x1d0>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a42      	ldr	r2, [pc, #264]	; (800e584 <HAL_GPIO_Init+0x2cc>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d101      	bne.n	800e484 <HAL_GPIO_Init+0x1cc>
 800e480:	2302      	movs	r3, #2
 800e482:	e004      	b.n	800e48e <HAL_GPIO_Init+0x1d6>
 800e484:	2307      	movs	r3, #7
 800e486:	e002      	b.n	800e48e <HAL_GPIO_Init+0x1d6>
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <HAL_GPIO_Init+0x1d6>
 800e48c:	2300      	movs	r3, #0
 800e48e:	697a      	ldr	r2, [r7, #20]
 800e490:	f002 0203 	and.w	r2, r2, #3
 800e494:	0092      	lsls	r2, r2, #2
 800e496:	4093      	lsls	r3, r2
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e49e:	4937      	ldr	r1, [pc, #220]	; (800e57c <HAL_GPIO_Init+0x2c4>)
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	089b      	lsrs	r3, r3, #2
 800e4a4:	3302      	adds	r3, #2
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e4ac:	4b36      	ldr	r3, [pc, #216]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	43db      	mvns	r3, r3
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d003      	beq.n	800e4d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e4d0:	4a2d      	ldr	r2, [pc, #180]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800e4d6:	4b2c      	ldr	r3, [pc, #176]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	43db      	mvns	r3, r3
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	4013      	ands	r3, r2
 800e4e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e4fa:	4a23      	ldr	r2, [pc, #140]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e500:	4b21      	ldr	r3, [pc, #132]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	43db      	mvns	r3, r3
 800e50a:	693a      	ldr	r2, [r7, #16]
 800e50c:	4013      	ands	r3, r2
 800e50e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800e51c:	693a      	ldr	r2, [r7, #16]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	4313      	orrs	r3, r2
 800e522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e524:	4a18      	ldr	r2, [pc, #96]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e52a:	4b17      	ldr	r3, [pc, #92]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	43db      	mvns	r3, r3
 800e534:	693a      	ldr	r2, [r7, #16]
 800e536:	4013      	ands	r3, r2
 800e538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e542:	2b00      	cmp	r3, #0
 800e544:	d003      	beq.n	800e54e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e54e:	4a0e      	ldr	r2, [pc, #56]	; (800e588 <HAL_GPIO_Init+0x2d0>)
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	3301      	adds	r3, #1
 800e558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	fa22 f303 	lsr.w	r3, r2, r3
 800e564:	2b00      	cmp	r3, #0
 800e566:	f47f aeaf 	bne.w	800e2c8 <HAL_GPIO_Init+0x10>
  }
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	371c      	adds	r7, #28
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	40021000 	.word	0x40021000
 800e57c:	40010000 	.word	0x40010000
 800e580:	48000400 	.word	0x48000400
 800e584:	48000800 	.word	0x48000800
 800e588:	40010400 	.word	0x40010400

0800e58c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b085      	sub	sp, #20
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	691a      	ldr	r2, [r3, #16]
 800e59c:	887b      	ldrh	r3, [r7, #2]
 800e59e:	4013      	ands	r3, r2
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	73fb      	strb	r3, [r7, #15]
 800e5a8:	e001      	b.n	800e5ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	807b      	strh	r3, [r7, #2]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e5cc:	787b      	ldrb	r3, [r7, #1]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d003      	beq.n	800e5da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e5d2:	887a      	ldrh	r2, [r7, #2]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e5d8:	e002      	b.n	800e5e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e5da:	887a      	ldrh	r2, [r7, #2]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e081      	b.n	800e702 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7f5 fd70 	bl	80040f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2224      	movs	r2, #36	; 0x24
 800e61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f022 0201 	bic.w	r2, r2, #1
 800e62e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685a      	ldr	r2, [r3, #4]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e63c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e64c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d107      	bne.n	800e666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	689a      	ldr	r2, [r3, #8]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e662:	609a      	str	r2, [r3, #8]
 800e664:	e006      	b.n	800e674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	689a      	ldr	r2, [r3, #8]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d104      	bne.n	800e686 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	6812      	ldr	r2, [r2, #0]
 800e690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e6a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	691a      	ldr	r2, [r3, #16]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	ea42 0103 	orr.w	r1, r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	021a      	lsls	r2, r3, #8
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	430a      	orrs	r2, r1
 800e6c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	69d9      	ldr	r1, [r3, #28]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a1a      	ldr	r2, [r3, #32]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f042 0201 	orr.w	r2, r2, #1
 800e6e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2220      	movs	r2, #32
 800e6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
	...

0800e70c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b088      	sub	sp, #32
 800e710:	af02      	add	r7, sp, #8
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	607a      	str	r2, [r7, #4]
 800e716:	461a      	mov	r2, r3
 800e718:	460b      	mov	r3, r1
 800e71a:	817b      	strh	r3, [r7, #10]
 800e71c:	4613      	mov	r3, r2
 800e71e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b20      	cmp	r3, #32
 800e72a:	f040 80da 	bne.w	800e8e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e734:	2b01      	cmp	r3, #1
 800e736:	d101      	bne.n	800e73c <HAL_I2C_Master_Transmit+0x30>
 800e738:	2302      	movs	r3, #2
 800e73a:	e0d3      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e744:	f7fd fec4 	bl	800c4d0 <HAL_GetTick>
 800e748:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	2319      	movs	r3, #25
 800e750:	2201      	movs	r2, #1
 800e752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 f8fc 	bl	800e954 <I2C_WaitOnFlagUntilTimeout>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e0be      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2221      	movs	r2, #33	; 0x21
 800e76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2210      	movs	r2, #16
 800e772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	893a      	ldrh	r2, [r7, #8]
 800e786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e792:	b29b      	uxth	r3, r3
 800e794:	2bff      	cmp	r3, #255	; 0xff
 800e796:	d90e      	bls.n	800e7b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	22ff      	movs	r2, #255	; 0xff
 800e79c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	8979      	ldrh	r1, [r7, #10]
 800e7a6:	4b51      	ldr	r3, [pc, #324]	; (800e8ec <HAL_I2C_Master_Transmit+0x1e0>)
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f000 f9f2 	bl	800eb98 <I2C_TransferConfig>
 800e7b4:	e06c      	b.n	800e890 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	8979      	ldrh	r1, [r7, #10]
 800e7c8:	4b48      	ldr	r3, [pc, #288]	; (800e8ec <HAL_I2C_Master_Transmit+0x1e0>)
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f000 f9e1 	bl	800eb98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800e7d6:	e05b      	b.n	800e890 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7d8:	697a      	ldr	r2, [r7, #20]
 800e7da:	6a39      	ldr	r1, [r7, #32]
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f8f9 	bl	800e9d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e07b      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f0:	781a      	ldrb	r2, [r3, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fc:	1c5a      	adds	r2, r3, #1
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e806:	b29b      	uxth	r3, r3
 800e808:	3b01      	subs	r3, #1
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e814:	3b01      	subs	r3, #1
 800e816:	b29a      	uxth	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e820:	b29b      	uxth	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d034      	beq.n	800e890 <HAL_I2C_Master_Transmit+0x184>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d130      	bne.n	800e890 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	2200      	movs	r2, #0
 800e836:	2180      	movs	r1, #128	; 0x80
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 f88b 	bl	800e954 <I2C_WaitOnFlagUntilTimeout>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e844:	2301      	movs	r3, #1
 800e846:	e04d      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	2bff      	cmp	r3, #255	; 0xff
 800e850:	d90e      	bls.n	800e870 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	22ff      	movs	r2, #255	; 0xff
 800e856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	8979      	ldrh	r1, [r7, #10]
 800e860:	2300      	movs	r3, #0
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 f995 	bl	800eb98 <I2C_TransferConfig>
 800e86e:	e00f      	b.n	800e890 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e874:	b29a      	uxth	r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	8979      	ldrh	r1, [r7, #10]
 800e882:	2300      	movs	r3, #0
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f000 f984 	bl	800eb98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e894:	b29b      	uxth	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d19e      	bne.n	800e7d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	6a39      	ldr	r1, [r7, #32]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f000 f8d8 	bl	800ea54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e01a      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2220      	movs	r2, #32
 800e8b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6859      	ldr	r1, [r3, #4]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	4b0b      	ldr	r3, [pc, #44]	; (800e8f0 <HAL_I2C_Master_Transmit+0x1e4>)
 800e8c2:	400b      	ands	r3, r1
 800e8c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2220      	movs	r2, #32
 800e8ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	e000      	b.n	800e8e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800e8e2:	2302      	movs	r3, #2
  }
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	80002000 	.word	0x80002000
 800e8f0:	fe00e800 	.word	0xfe00e800

0800e8f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	f003 0302 	and.w	r3, r3, #2
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d103      	bne.n	800e92a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2200      	movs	r2, #0
 800e928:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	2b01      	cmp	r3, #1
 800e936:	d007      	beq.n	800e948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	699a      	ldr	r2, [r3, #24]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f042 0201 	orr.w	r2, r2, #1
 800e946:	619a      	str	r2, [r3, #24]
  }
}
 800e948:	bf00      	nop
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	4613      	mov	r3, r2
 800e962:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e964:	e022      	b.n	800e9ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96c:	d01e      	beq.n	800e9ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e96e:	f7fd fdaf 	bl	800c4d0 <HAL_GetTick>
 800e972:	4602      	mov	r2, r0
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d302      	bcc.n	800e984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d113      	bne.n	800e9ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e988:	f043 0220 	orr.w	r2, r3, #32
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2220      	movs	r2, #32
 800e994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e00f      	b.n	800e9cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	699a      	ldr	r2, [r3, #24]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	bf0c      	ite	eq
 800e9bc:	2301      	moveq	r3, #1
 800e9be:	2300      	movne	r3, #0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d0cd      	beq.n	800e966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e9e0:	e02c      	b.n	800ea3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f000 f870 	bl	800eacc <I2C_IsAcknowledgeFailed>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e02a      	b.n	800ea4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fc:	d01e      	beq.n	800ea3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9fe:	f7fd fd67 	bl	800c4d0 <HAL_GetTick>
 800ea02:	4602      	mov	r2, r0
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d302      	bcc.n	800ea14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d113      	bne.n	800ea3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea18:	f043 0220 	orr.w	r2, r3, #32
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e007      	b.n	800ea4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	699b      	ldr	r3, [r3, #24]
 800ea42:	f003 0302 	and.w	r3, r3, #2
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d1cb      	bne.n	800e9e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea60:	e028      	b.n	800eab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	68b9      	ldr	r1, [r7, #8]
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f000 f830 	bl	800eacc <I2C_IsAcknowledgeFailed>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	e026      	b.n	800eac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea76:	f7fd fd2b 	bl	800c4d0 <HAL_GetTick>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d302      	bcc.n	800ea8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d113      	bne.n	800eab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea90:	f043 0220 	orr.w	r2, r3, #32
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2220      	movs	r2, #32
 800ea9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e007      	b.n	800eac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	699b      	ldr	r3, [r3, #24]
 800eaba:	f003 0320 	and.w	r3, r3, #32
 800eabe:	2b20      	cmp	r3, #32
 800eac0:	d1cf      	bne.n	800ea62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	f003 0310 	and.w	r3, r3, #16
 800eae2:	2b10      	cmp	r3, #16
 800eae4:	d151      	bne.n	800eb8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eae6:	e022      	b.n	800eb2e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaee:	d01e      	beq.n	800eb2e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaf0:	f7fd fcee 	bl	800c4d0 <HAL_GetTick>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	68ba      	ldr	r2, [r7, #8]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d302      	bcc.n	800eb06 <I2C_IsAcknowledgeFailed+0x3a>
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d113      	bne.n	800eb2e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0a:	f043 0220 	orr.w	r2, r3, #32
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e02e      	b.n	800eb8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	699b      	ldr	r3, [r3, #24]
 800eb34:	f003 0320 	and.w	r3, r3, #32
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	d1d5      	bne.n	800eae8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2210      	movs	r2, #16
 800eb42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2220      	movs	r2, #32
 800eb4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f7ff fedd 	bl	800e90c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6859      	ldr	r1, [r3, #4]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <I2C_IsAcknowledgeFailed+0xc8>)
 800eb5e:	400b      	ands	r3, r1
 800eb60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb66:	f043 0204 	orr.w	r2, r3, #4
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2220      	movs	r2, #32
 800eb72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e000      	b.n	800eb8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	fe00e800 	.word	0xfe00e800

0800eb98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	607b      	str	r3, [r7, #4]
 800eba2:	460b      	mov	r3, r1
 800eba4:	817b      	strh	r3, [r7, #10]
 800eba6:	4613      	mov	r3, r2
 800eba8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	0d5b      	lsrs	r3, r3, #21
 800ebb4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ebb8:	4b0d      	ldr	r3, [pc, #52]	; (800ebf0 <I2C_TransferConfig+0x58>)
 800ebba:	430b      	orrs	r3, r1
 800ebbc:	43db      	mvns	r3, r3
 800ebbe:	ea02 0103 	and.w	r1, r2, r3
 800ebc2:	897b      	ldrh	r3, [r7, #10]
 800ebc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ebc8:	7a7b      	ldrb	r3, [r7, #9]
 800ebca:	041b      	lsls	r3, r3, #16
 800ebcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebd0:	431a      	orrs	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	431a      	orrs	r2, r3
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	431a      	orrs	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ebe2:	bf00      	nop
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	03ff63ff 	.word	0x03ff63ff

0800ebf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b20      	cmp	r3, #32
 800ec08:	d138      	bne.n	800ec7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e032      	b.n	800ec7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2224      	movs	r2, #36	; 0x24
 800ec24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0201 	bic.w	r2, r2, #1
 800ec36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6819      	ldr	r1, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f042 0201 	orr.w	r2, r2, #1
 800ec66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	e000      	b.n	800ec7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec7c:	2302      	movs	r3, #2
  }
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b085      	sub	sp, #20
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	2b20      	cmp	r3, #32
 800ec9e:	d139      	bne.n	800ed14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d101      	bne.n	800ecae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ecaa:	2302      	movs	r3, #2
 800ecac:	e033      	b.n	800ed16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2224      	movs	r2, #36	; 0x24
 800ecba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f022 0201 	bic.w	r2, r2, #1
 800eccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ecdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	021b      	lsls	r3, r3, #8
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f042 0201 	orr.w	r2, r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2220      	movs	r2, #32
 800ed04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e000      	b.n	800ed16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ed14:	2302      	movs	r3, #2
  }
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
	...

0800ed24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ed24:	b480      	push	{r7}
 800ed26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ed28:	4b04      	ldr	r3, [pc, #16]	; (800ed3c <HAL_PWREx_GetVoltageRange+0x18>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	40007000 	.word	0x40007000

0800ed40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed4e:	d130      	bne.n	800edb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ed50:	4b23      	ldr	r3, [pc, #140]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ed58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed5c:	d038      	beq.n	800edd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ed5e:	4b20      	ldr	r3, [pc, #128]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ed66:	4a1e      	ldr	r2, [pc, #120]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ed6e:	4b1d      	ldr	r3, [pc, #116]	; (800ede4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2232      	movs	r2, #50	; 0x32
 800ed74:	fb02 f303 	mul.w	r3, r2, r3
 800ed78:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ed7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed7e:	0c9b      	lsrs	r3, r3, #18
 800ed80:	3301      	adds	r3, #1
 800ed82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed84:	e002      	b.n	800ed8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed8c:	4b14      	ldr	r3, [pc, #80]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed8e:	695b      	ldr	r3, [r3, #20]
 800ed90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed98:	d102      	bne.n	800eda0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1f2      	bne.n	800ed86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eda8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edac:	d110      	bne.n	800edd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800edae:	2303      	movs	r3, #3
 800edb0:	e00f      	b.n	800edd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800edb2:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800edba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edbe:	d007      	beq.n	800edd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800edc0:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800edc8:	4a05      	ldr	r2, [pc, #20]	; (800ede0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800edca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800edce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	40007000 	.word	0x40007000
 800ede4:	20000000 	.word	0x20000000
 800ede8:	431bde83 	.word	0x431bde83

0800edec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d102      	bne.n	800ee00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	f000 bc10 	b.w	800f620 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ee00:	4b96      	ldr	r3, [pc, #600]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	f003 030c 	and.w	r3, r3, #12
 800ee08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ee0a:	4b94      	ldr	r3, [pc, #592]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	f003 0303 	and.w	r3, r3, #3
 800ee12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f003 0310 	and.w	r3, r3, #16
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f000 80e4 	beq.w	800efea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d007      	beq.n	800ee38 <HAL_RCC_OscConfig+0x4c>
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	2b0c      	cmp	r3, #12
 800ee2c:	f040 808b 	bne.w	800ef46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	f040 8087 	bne.w	800ef46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ee38:	4b88      	ldr	r3, [pc, #544]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 0302 	and.w	r3, r3, #2
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <HAL_RCC_OscConfig+0x64>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e3e7      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a1a      	ldr	r2, [r3, #32]
 800ee54:	4b81      	ldr	r3, [pc, #516]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 0308 	and.w	r3, r3, #8
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <HAL_RCC_OscConfig+0x7e>
 800ee60:	4b7e      	ldr	r3, [pc, #504]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee68:	e005      	b.n	800ee76 <HAL_RCC_OscConfig+0x8a>
 800ee6a:	4b7c      	ldr	r3, [pc, #496]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ee70:	091b      	lsrs	r3, r3, #4
 800ee72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d223      	bcs.n	800eec2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 fd7a 	bl	800f978 <RCC_SetFlashLatencyFromMSIRange>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e3c8      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ee8e:	4b73      	ldr	r3, [pc, #460]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a72      	ldr	r2, [pc, #456]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee94:	f043 0308 	orr.w	r3, r3, #8
 800ee98:	6013      	str	r3, [r2, #0]
 800ee9a:	4b70      	ldr	r3, [pc, #448]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	496d      	ldr	r1, [pc, #436]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eeac:	4b6b      	ldr	r3, [pc, #428]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	69db      	ldr	r3, [r3, #28]
 800eeb8:	021b      	lsls	r3, r3, #8
 800eeba:	4968      	ldr	r1, [pc, #416]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eebc:	4313      	orrs	r3, r2
 800eebe:	604b      	str	r3, [r1, #4]
 800eec0:	e025      	b.n	800ef0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eec2:	4b66      	ldr	r3, [pc, #408]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a65      	ldr	r2, [pc, #404]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eec8:	f043 0308 	orr.w	r3, r3, #8
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	4b63      	ldr	r3, [pc, #396]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a1b      	ldr	r3, [r3, #32]
 800eeda:	4960      	ldr	r1, [pc, #384]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eedc:	4313      	orrs	r3, r2
 800eede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eee0:	4b5e      	ldr	r3, [pc, #376]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	69db      	ldr	r3, [r3, #28]
 800eeec:	021b      	lsls	r3, r3, #8
 800eeee:	495b      	ldr	r1, [pc, #364]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800eef0:	4313      	orrs	r3, r2
 800eef2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a1b      	ldr	r3, [r3, #32]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f000 fd3a 	bl	800f978 <RCC_SetFlashLatencyFromMSIRange>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e388      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ef0e:	f000 fc6f 	bl	800f7f0 <HAL_RCC_GetSysClockFreq>
 800ef12:	4602      	mov	r2, r0
 800ef14:	4b51      	ldr	r3, [pc, #324]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	091b      	lsrs	r3, r3, #4
 800ef1a:	f003 030f 	and.w	r3, r3, #15
 800ef1e:	4950      	ldr	r1, [pc, #320]	; (800f060 <HAL_RCC_OscConfig+0x274>)
 800ef20:	5ccb      	ldrb	r3, [r1, r3]
 800ef22:	f003 031f 	and.w	r3, r3, #31
 800ef26:	fa22 f303 	lsr.w	r3, r2, r3
 800ef2a:	4a4e      	ldr	r2, [pc, #312]	; (800f064 <HAL_RCC_OscConfig+0x278>)
 800ef2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ef2e:	4b4e      	ldr	r3, [pc, #312]	; (800f068 <HAL_RCC_OscConfig+0x27c>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd fa7c 	bl	800c430 <HAL_InitTick>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d052      	beq.n	800efe8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	e36c      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d032      	beq.n	800efb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ef4e:	4b43      	ldr	r3, [pc, #268]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4a42      	ldr	r2, [pc, #264]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef54:	f043 0301 	orr.w	r3, r3, #1
 800ef58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ef5a:	f7fd fab9 	bl	800c4d0 <HAL_GetTick>
 800ef5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ef60:	e008      	b.n	800ef74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ef62:	f7fd fab5 	bl	800c4d0 <HAL_GetTick>
 800ef66:	4602      	mov	r2, r0
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d901      	bls.n	800ef74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ef70:	2303      	movs	r3, #3
 800ef72:	e355      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ef74:	4b39      	ldr	r3, [pc, #228]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0f0      	beq.n	800ef62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ef80:	4b36      	ldr	r3, [pc, #216]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a35      	ldr	r2, [pc, #212]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef86:	f043 0308 	orr.w	r3, r3, #8
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	4b33      	ldr	r3, [pc, #204]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a1b      	ldr	r3, [r3, #32]
 800ef98:	4930      	ldr	r1, [pc, #192]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ef9e:	4b2f      	ldr	r3, [pc, #188]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	021b      	lsls	r3, r3, #8
 800efac:	492b      	ldr	r1, [pc, #172]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800efae:	4313      	orrs	r3, r2
 800efb0:	604b      	str	r3, [r1, #4]
 800efb2:	e01a      	b.n	800efea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800efb4:	4b29      	ldr	r3, [pc, #164]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a28      	ldr	r2, [pc, #160]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800efba:	f023 0301 	bic.w	r3, r3, #1
 800efbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800efc0:	f7fd fa86 	bl	800c4d0 <HAL_GetTick>
 800efc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800efc6:	e008      	b.n	800efda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800efc8:	f7fd fa82 	bl	800c4d0 <HAL_GetTick>
 800efcc:	4602      	mov	r2, r0
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d901      	bls.n	800efda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e322      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800efda:	4b20      	ldr	r3, [pc, #128]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 0302 	and.w	r3, r3, #2
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1f0      	bne.n	800efc8 <HAL_RCC_OscConfig+0x1dc>
 800efe6:	e000      	b.n	800efea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800efe8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d073      	beq.n	800f0de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	2b08      	cmp	r3, #8
 800effa:	d005      	beq.n	800f008 <HAL_RCC_OscConfig+0x21c>
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	2b0c      	cmp	r3, #12
 800f000:	d10e      	bne.n	800f020 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	2b03      	cmp	r3, #3
 800f006:	d10b      	bne.n	800f020 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f008:	4b14      	ldr	r3, [pc, #80]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d063      	beq.n	800f0dc <HAL_RCC_OscConfig+0x2f0>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d15f      	bne.n	800f0dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	e2ff      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f028:	d106      	bne.n	800f038 <HAL_RCC_OscConfig+0x24c>
 800f02a:	4b0c      	ldr	r3, [pc, #48]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a0b      	ldr	r2, [pc, #44]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	e025      	b.n	800f084 <HAL_RCC_OscConfig+0x298>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f040:	d114      	bne.n	800f06c <HAL_RCC_OscConfig+0x280>
 800f042:	4b06      	ldr	r3, [pc, #24]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a05      	ldr	r2, [pc, #20]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	4b03      	ldr	r3, [pc, #12]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a02      	ldr	r2, [pc, #8]	; (800f05c <HAL_RCC_OscConfig+0x270>)
 800f054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f058:	6013      	str	r3, [r2, #0]
 800f05a:	e013      	b.n	800f084 <HAL_RCC_OscConfig+0x298>
 800f05c:	40021000 	.word	0x40021000
 800f060:	08014e18 	.word	0x08014e18
 800f064:	20000000 	.word	0x20000000
 800f068:	20000004 	.word	0x20000004
 800f06c:	4ba0      	ldr	r3, [pc, #640]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a9f      	ldr	r2, [pc, #636]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	4b9d      	ldr	r3, [pc, #628]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a9c      	ldr	r2, [pc, #624]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f07e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d013      	beq.n	800f0b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f08c:	f7fd fa20 	bl	800c4d0 <HAL_GetTick>
 800f090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f092:	e008      	b.n	800f0a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f094:	f7fd fa1c 	bl	800c4d0 <HAL_GetTick>
 800f098:	4602      	mov	r2, r0
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	2b64      	cmp	r3, #100	; 0x64
 800f0a0:	d901      	bls.n	800f0a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	e2bc      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f0a6:	4b92      	ldr	r3, [pc, #584]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d0f0      	beq.n	800f094 <HAL_RCC_OscConfig+0x2a8>
 800f0b2:	e014      	b.n	800f0de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0b4:	f7fd fa0c 	bl	800c4d0 <HAL_GetTick>
 800f0b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f0ba:	e008      	b.n	800f0ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f0bc:	f7fd fa08 	bl	800c4d0 <HAL_GetTick>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	1ad3      	subs	r3, r2, r3
 800f0c6:	2b64      	cmp	r3, #100	; 0x64
 800f0c8:	d901      	bls.n	800f0ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	e2a8      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f0ce:	4b88      	ldr	r3, [pc, #544]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1f0      	bne.n	800f0bc <HAL_RCC_OscConfig+0x2d0>
 800f0da:	e000      	b.n	800f0de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f0dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f003 0302 	and.w	r3, r3, #2
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d060      	beq.n	800f1ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d005      	beq.n	800f0fc <HAL_RCC_OscConfig+0x310>
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b0c      	cmp	r3, #12
 800f0f4:	d119      	bne.n	800f12a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d116      	bne.n	800f12a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f0fc:	4b7c      	ldr	r3, [pc, #496]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f104:	2b00      	cmp	r3, #0
 800f106:	d005      	beq.n	800f114 <HAL_RCC_OscConfig+0x328>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e285      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f114:	4b76      	ldr	r3, [pc, #472]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	061b      	lsls	r3, r3, #24
 800f122:	4973      	ldr	r1, [pc, #460]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f124:	4313      	orrs	r3, r2
 800f126:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f128:	e040      	b.n	800f1ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d023      	beq.n	800f17a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f132:	4b6f      	ldr	r3, [pc, #444]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a6e      	ldr	r2, [pc, #440]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f13c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f13e:	f7fd f9c7 	bl	800c4d0 <HAL_GetTick>
 800f142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f144:	e008      	b.n	800f158 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f146:	f7fd f9c3 	bl	800c4d0 <HAL_GetTick>
 800f14a:	4602      	mov	r2, r0
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	2b02      	cmp	r3, #2
 800f152:	d901      	bls.n	800f158 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f154:	2303      	movs	r3, #3
 800f156:	e263      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f158:	4b65      	ldr	r3, [pc, #404]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f160:	2b00      	cmp	r3, #0
 800f162:	d0f0      	beq.n	800f146 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f164:	4b62      	ldr	r3, [pc, #392]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	061b      	lsls	r3, r3, #24
 800f172:	495f      	ldr	r1, [pc, #380]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f174:	4313      	orrs	r3, r2
 800f176:	604b      	str	r3, [r1, #4]
 800f178:	e018      	b.n	800f1ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f17a:	4b5d      	ldr	r3, [pc, #372]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a5c      	ldr	r2, [pc, #368]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f186:	f7fd f9a3 	bl	800c4d0 <HAL_GetTick>
 800f18a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f18c:	e008      	b.n	800f1a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f18e:	f7fd f99f 	bl	800c4d0 <HAL_GetTick>
 800f192:	4602      	mov	r2, r0
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	2b02      	cmp	r3, #2
 800f19a:	d901      	bls.n	800f1a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f19c:	2303      	movs	r3, #3
 800f19e:	e23f      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f1a0:	4b53      	ldr	r3, [pc, #332]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1f0      	bne.n	800f18e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f003 0308 	and.w	r3, r3, #8
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d03c      	beq.n	800f232 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d01c      	beq.n	800f1fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f1c0:	4b4b      	ldr	r3, [pc, #300]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f1c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1c6:	4a4a      	ldr	r2, [pc, #296]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f1c8:	f043 0301 	orr.w	r3, r3, #1
 800f1cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1d0:	f7fd f97e 	bl	800c4d0 <HAL_GetTick>
 800f1d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f1d6:	e008      	b.n	800f1ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f1d8:	f7fd f97a 	bl	800c4d0 <HAL_GetTick>
 800f1dc:	4602      	mov	r2, r0
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d901      	bls.n	800f1ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e21a      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f1ea:	4b41      	ldr	r3, [pc, #260]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f1ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1f0:	f003 0302 	and.w	r3, r3, #2
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d0ef      	beq.n	800f1d8 <HAL_RCC_OscConfig+0x3ec>
 800f1f8:	e01b      	b.n	800f232 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f1fa:	4b3d      	ldr	r3, [pc, #244]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f1fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f200:	4a3b      	ldr	r2, [pc, #236]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f202:	f023 0301 	bic.w	r3, r3, #1
 800f206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f20a:	f7fd f961 	bl	800c4d0 <HAL_GetTick>
 800f20e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f210:	e008      	b.n	800f224 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f212:	f7fd f95d 	bl	800c4d0 <HAL_GetTick>
 800f216:	4602      	mov	r2, r0
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d901      	bls.n	800f224 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f220:	2303      	movs	r3, #3
 800f222:	e1fd      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f224:	4b32      	ldr	r3, [pc, #200]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f22a:	f003 0302 	and.w	r3, r3, #2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1ef      	bne.n	800f212 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 0304 	and.w	r3, r3, #4
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f000 80a6 	beq.w	800f38c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f240:	2300      	movs	r3, #0
 800f242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f244:	4b2a      	ldr	r3, [pc, #168]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d10d      	bne.n	800f26c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f250:	4b27      	ldr	r3, [pc, #156]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f254:	4a26      	ldr	r2, [pc, #152]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f25a:	6593      	str	r3, [r2, #88]	; 0x58
 800f25c:	4b24      	ldr	r3, [pc, #144]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f264:	60bb      	str	r3, [r7, #8]
 800f266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f268:	2301      	movs	r3, #1
 800f26a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f26c:	4b21      	ldr	r3, [pc, #132]	; (800f2f4 <HAL_RCC_OscConfig+0x508>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f274:	2b00      	cmp	r3, #0
 800f276:	d118      	bne.n	800f2aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f278:	4b1e      	ldr	r3, [pc, #120]	; (800f2f4 <HAL_RCC_OscConfig+0x508>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a1d      	ldr	r2, [pc, #116]	; (800f2f4 <HAL_RCC_OscConfig+0x508>)
 800f27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f284:	f7fd f924 	bl	800c4d0 <HAL_GetTick>
 800f288:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f28a:	e008      	b.n	800f29e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f28c:	f7fd f920 	bl	800c4d0 <HAL_GetTick>
 800f290:	4602      	mov	r2, r0
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	1ad3      	subs	r3, r2, r3
 800f296:	2b02      	cmp	r3, #2
 800f298:	d901      	bls.n	800f29e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e1c0      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f29e:	4b15      	ldr	r3, [pc, #84]	; (800f2f4 <HAL_RCC_OscConfig+0x508>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f0      	beq.n	800f28c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d108      	bne.n	800f2c4 <HAL_RCC_OscConfig+0x4d8>
 800f2b2:	4b0f      	ldr	r3, [pc, #60]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2b8:	4a0d      	ldr	r2, [pc, #52]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2ba:	f043 0301 	orr.w	r3, r3, #1
 800f2be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f2c2:	e029      	b.n	800f318 <HAL_RCC_OscConfig+0x52c>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	2b05      	cmp	r3, #5
 800f2ca:	d115      	bne.n	800f2f8 <HAL_RCC_OscConfig+0x50c>
 800f2cc:	4b08      	ldr	r3, [pc, #32]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2d2:	4a07      	ldr	r2, [pc, #28]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2d4:	f043 0304 	orr.w	r3, r3, #4
 800f2d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f2dc:	4b04      	ldr	r3, [pc, #16]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2e2:	4a03      	ldr	r2, [pc, #12]	; (800f2f0 <HAL_RCC_OscConfig+0x504>)
 800f2e4:	f043 0301 	orr.w	r3, r3, #1
 800f2e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f2ec:	e014      	b.n	800f318 <HAL_RCC_OscConfig+0x52c>
 800f2ee:	bf00      	nop
 800f2f0:	40021000 	.word	0x40021000
 800f2f4:	40007000 	.word	0x40007000
 800f2f8:	4b9a      	ldr	r3, [pc, #616]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2fe:	4a99      	ldr	r2, [pc, #612]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f300:	f023 0301 	bic.w	r3, r3, #1
 800f304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f308:	4b96      	ldr	r3, [pc, #600]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f30e:	4a95      	ldr	r2, [pc, #596]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f310:	f023 0304 	bic.w	r3, r3, #4
 800f314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d016      	beq.n	800f34e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f320:	f7fd f8d6 	bl	800c4d0 <HAL_GetTick>
 800f324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f326:	e00a      	b.n	800f33e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f328:	f7fd f8d2 	bl	800c4d0 <HAL_GetTick>
 800f32c:	4602      	mov	r2, r0
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	f241 3288 	movw	r2, #5000	; 0x1388
 800f336:	4293      	cmp	r3, r2
 800f338:	d901      	bls.n	800f33e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e170      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f33e:	4b89      	ldr	r3, [pc, #548]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f344:	f003 0302 	and.w	r3, r3, #2
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d0ed      	beq.n	800f328 <HAL_RCC_OscConfig+0x53c>
 800f34c:	e015      	b.n	800f37a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f34e:	f7fd f8bf 	bl	800c4d0 <HAL_GetTick>
 800f352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f354:	e00a      	b.n	800f36c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f356:	f7fd f8bb 	bl	800c4d0 <HAL_GetTick>
 800f35a:	4602      	mov	r2, r0
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	f241 3288 	movw	r2, #5000	; 0x1388
 800f364:	4293      	cmp	r3, r2
 800f366:	d901      	bls.n	800f36c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800f368:	2303      	movs	r3, #3
 800f36a:	e159      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f36c:	4b7d      	ldr	r3, [pc, #500]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f372:	f003 0302 	and.w	r3, r3, #2
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1ed      	bne.n	800f356 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f37a:	7ffb      	ldrb	r3, [r7, #31]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d105      	bne.n	800f38c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f380:	4b78      	ldr	r3, [pc, #480]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f384:	4a77      	ldr	r2, [pc, #476]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f38a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 0320 	and.w	r3, r3, #32
 800f394:	2b00      	cmp	r3, #0
 800f396:	d03c      	beq.n	800f412 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d01c      	beq.n	800f3da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f3a0:	4b70      	ldr	r3, [pc, #448]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f3a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f3a6:	4a6f      	ldr	r2, [pc, #444]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f3a8:	f043 0301 	orr.w	r3, r3, #1
 800f3ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3b0:	f7fd f88e 	bl	800c4d0 <HAL_GetTick>
 800f3b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f3b6:	e008      	b.n	800f3ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f3b8:	f7fd f88a 	bl	800c4d0 <HAL_GetTick>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d901      	bls.n	800f3ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	e12a      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f3ca:	4b66      	ldr	r3, [pc, #408]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f3cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f3d0:	f003 0302 	and.w	r3, r3, #2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0ef      	beq.n	800f3b8 <HAL_RCC_OscConfig+0x5cc>
 800f3d8:	e01b      	b.n	800f412 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f3da:	4b62      	ldr	r3, [pc, #392]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f3dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f3e0:	4a60      	ldr	r2, [pc, #384]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f3e2:	f023 0301 	bic.w	r3, r3, #1
 800f3e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f3ea:	f7fd f871 	bl	800c4d0 <HAL_GetTick>
 800f3ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f3f0:	e008      	b.n	800f404 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f3f2:	f7fd f86d 	bl	800c4d0 <HAL_GetTick>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d901      	bls.n	800f404 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800f400:	2303      	movs	r3, #3
 800f402:	e10d      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f404:	4b57      	ldr	r3, [pc, #348]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f40a:	f003 0302 	and.w	r3, r3, #2
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1ef      	bne.n	800f3f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f416:	2b00      	cmp	r3, #0
 800f418:	f000 8101 	beq.w	800f61e <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f420:	2b02      	cmp	r3, #2
 800f422:	f040 80c9 	bne.w	800f5b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f426:	4b4f      	ldr	r3, [pc, #316]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f003 0203 	and.w	r2, r3, #3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f436:	429a      	cmp	r2, r3
 800f438:	d12c      	bne.n	800f494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f444:	3b01      	subs	r3, #1
 800f446:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f448:	429a      	cmp	r2, r3
 800f44a:	d123      	bne.n	800f494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f456:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f458:	429a      	cmp	r2, r3
 800f45a:	d11b      	bne.n	800f494 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f466:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f468:	429a      	cmp	r2, r3
 800f46a:	d113      	bne.n	800f494 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f476:	085b      	lsrs	r3, r3, #1
 800f478:	3b01      	subs	r3, #1
 800f47a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d109      	bne.n	800f494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48a:	085b      	lsrs	r3, r3, #1
 800f48c:	3b01      	subs	r3, #1
 800f48e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f490:	429a      	cmp	r2, r3
 800f492:	d06b      	beq.n	800f56c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	2b0c      	cmp	r3, #12
 800f498:	d062      	beq.n	800f560 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f49a:	4b32      	ldr	r3, [pc, #200]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e0ba      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f4aa:	4b2e      	ldr	r3, [pc, #184]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4a2d      	ldr	r2, [pc, #180]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f4b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f4b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f4b6:	f7fd f80b 	bl	800c4d0 <HAL_GetTick>
 800f4ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f4bc:	e008      	b.n	800f4d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f4be:	f7fd f807 	bl	800c4d0 <HAL_GetTick>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d901      	bls.n	800f4d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	e0a7      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f4d0:	4b24      	ldr	r3, [pc, #144]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f0      	bne.n	800f4be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f4dc:	4b21      	ldr	r3, [pc, #132]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f4de:	68da      	ldr	r2, [r3, #12]
 800f4e0:	4b21      	ldr	r3, [pc, #132]	; (800f568 <HAL_RCC_OscConfig+0x77c>)
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f4ec:	3a01      	subs	r2, #1
 800f4ee:	0112      	lsls	r2, r2, #4
 800f4f0:	4311      	orrs	r1, r2
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f4f6:	0212      	lsls	r2, r2, #8
 800f4f8:	4311      	orrs	r1, r2
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f4fe:	0852      	lsrs	r2, r2, #1
 800f500:	3a01      	subs	r2, #1
 800f502:	0552      	lsls	r2, r2, #21
 800f504:	4311      	orrs	r1, r2
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f50a:	0852      	lsrs	r2, r2, #1
 800f50c:	3a01      	subs	r2, #1
 800f50e:	0652      	lsls	r2, r2, #25
 800f510:	4311      	orrs	r1, r2
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f516:	06d2      	lsls	r2, r2, #27
 800f518:	430a      	orrs	r2, r1
 800f51a:	4912      	ldr	r1, [pc, #72]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f51c:	4313      	orrs	r3, r2
 800f51e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f520:	4b10      	ldr	r3, [pc, #64]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4a0f      	ldr	r2, [pc, #60]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f52a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f52c:	4b0d      	ldr	r3, [pc, #52]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	4a0c      	ldr	r2, [pc, #48]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f538:	f7fc ffca 	bl	800c4d0 <HAL_GetTick>
 800f53c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f53e:	e008      	b.n	800f552 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f540:	f7fc ffc6 	bl	800c4d0 <HAL_GetTick>
 800f544:	4602      	mov	r2, r0
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d901      	bls.n	800f552 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800f54e:	2303      	movs	r3, #3
 800f550:	e066      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f552:	4b04      	ldr	r3, [pc, #16]	; (800f564 <HAL_RCC_OscConfig+0x778>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d0f0      	beq.n	800f540 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f55e:	e05e      	b.n	800f61e <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f560:	2301      	movs	r3, #1
 800f562:	e05d      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
 800f564:	40021000 	.word	0x40021000
 800f568:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f56c:	4b2e      	ldr	r3, [pc, #184]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f574:	2b00      	cmp	r3, #0
 800f576:	d152      	bne.n	800f61e <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f578:	4b2b      	ldr	r3, [pc, #172]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a2a      	ldr	r2, [pc, #168]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f57e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f582:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f584:	4b28      	ldr	r3, [pc, #160]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	4a27      	ldr	r2, [pc, #156]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f58e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f590:	f7fc ff9e 	bl	800c4d0 <HAL_GetTick>
 800f594:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f596:	e008      	b.n	800f5aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f598:	f7fc ff9a 	bl	800c4d0 <HAL_GetTick>
 800f59c:	4602      	mov	r2, r0
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d901      	bls.n	800f5aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e03a      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f5aa:	4b1f      	ldr	r3, [pc, #124]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0f0      	beq.n	800f598 <HAL_RCC_OscConfig+0x7ac>
 800f5b6:	e032      	b.n	800f61e <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	2b0c      	cmp	r3, #12
 800f5bc:	d02d      	beq.n	800f61a <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f5be:	4b1a      	ldr	r3, [pc, #104]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a19      	ldr	r2, [pc, #100]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f5c8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f5ca:	4b17      	ldr	r3, [pc, #92]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d105      	bne.n	800f5e2 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800f5d6:	4b14      	ldr	r3, [pc, #80]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	4a13      	ldr	r2, [pc, #76]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5dc:	f023 0303 	bic.w	r3, r3, #3
 800f5e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800f5e2:	4b11      	ldr	r3, [pc, #68]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	4a10      	ldr	r2, [pc, #64]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f5e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800f5ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5f2:	f7fc ff6d 	bl	800c4d0 <HAL_GetTick>
 800f5f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f5f8:	e008      	b.n	800f60c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5fa:	f7fc ff69 	bl	800c4d0 <HAL_GetTick>
 800f5fe:	4602      	mov	r2, r0
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	2b02      	cmp	r3, #2
 800f606:	d901      	bls.n	800f60c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800f608:	2303      	movs	r3, #3
 800f60a:	e009      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f60c:	4b06      	ldr	r3, [pc, #24]	; (800f628 <HAL_RCC_OscConfig+0x83c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1f0      	bne.n	800f5fa <HAL_RCC_OscConfig+0x80e>
 800f618:	e001      	b.n	800f61e <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3720      	adds	r7, #32
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}
 800f628:	40021000 	.word	0x40021000

0800f62c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d101      	bne.n	800f640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f63c:	2301      	movs	r3, #1
 800f63e:	e0c8      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f640:	4b66      	ldr	r3, [pc, #408]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0307 	and.w	r3, r3, #7
 800f648:	683a      	ldr	r2, [r7, #0]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d910      	bls.n	800f670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f64e:	4b63      	ldr	r3, [pc, #396]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f023 0207 	bic.w	r2, r3, #7
 800f656:	4961      	ldr	r1, [pc, #388]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f65e:	4b5f      	ldr	r3, [pc, #380]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d001      	beq.n	800f670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e0b0      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 0301 	and.w	r3, r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d04c      	beq.n	800f716 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	2b03      	cmp	r3, #3
 800f682:	d107      	bne.n	800f694 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f684:	4b56      	ldr	r3, [pc, #344]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d121      	bne.n	800f6d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800f690:	2301      	movs	r3, #1
 800f692:	e09e      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d107      	bne.n	800f6ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f69c:	4b50      	ldr	r3, [pc, #320]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d115      	bne.n	800f6d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e092      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d107      	bne.n	800f6c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f6b4:	4b4a      	ldr	r3, [pc, #296]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f003 0302 	and.w	r3, r3, #2
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d109      	bne.n	800f6d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e086      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f6c4:	4b46      	ldr	r3, [pc, #280]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d101      	bne.n	800f6d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e07e      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f6d4:	4b42      	ldr	r3, [pc, #264]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	f023 0203 	bic.w	r2, r3, #3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	493f      	ldr	r1, [pc, #252]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6e6:	f7fc fef3 	bl	800c4d0 <HAL_GetTick>
 800f6ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f6ec:	e00a      	b.n	800f704 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f6ee:	f7fc feef 	bl	800c4d0 <HAL_GetTick>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	1ad3      	subs	r3, r2, r3
 800f6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d901      	bls.n	800f704 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800f700:	2303      	movs	r3, #3
 800f702:	e066      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f704:	4b36      	ldr	r3, [pc, #216]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	f003 020c 	and.w	r2, r3, #12
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	429a      	cmp	r2, r3
 800f714:	d1eb      	bne.n	800f6ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f003 0302 	and.w	r3, r3, #2
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d008      	beq.n	800f734 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f722:	4b2f      	ldr	r3, [pc, #188]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	492c      	ldr	r1, [pc, #176]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f730:	4313      	orrs	r3, r2
 800f732:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f734:	4b29      	ldr	r3, [pc, #164]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f003 0307 	and.w	r3, r3, #7
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d210      	bcs.n	800f764 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f742:	4b26      	ldr	r3, [pc, #152]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f023 0207 	bic.w	r2, r3, #7
 800f74a:	4924      	ldr	r1, [pc, #144]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	4313      	orrs	r3, r2
 800f750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f752:	4b22      	ldr	r3, [pc, #136]	; (800f7dc <HAL_RCC_ClockConfig+0x1b0>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f003 0307 	and.w	r3, r3, #7
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d001      	beq.n	800f764 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800f760:	2301      	movs	r3, #1
 800f762:	e036      	b.n	800f7d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f003 0304 	and.w	r3, r3, #4
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d008      	beq.n	800f782 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f770:	4b1b      	ldr	r3, [pc, #108]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	4918      	ldr	r1, [pc, #96]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f77e:	4313      	orrs	r3, r2
 800f780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f003 0308 	and.w	r3, r3, #8
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f78e:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	4910      	ldr	r1, [pc, #64]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f7a2:	f000 f825 	bl	800f7f0 <HAL_RCC_GetSysClockFreq>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	4b0d      	ldr	r3, [pc, #52]	; (800f7e0 <HAL_RCC_ClockConfig+0x1b4>)
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	091b      	lsrs	r3, r3, #4
 800f7ae:	f003 030f 	and.w	r3, r3, #15
 800f7b2:	490c      	ldr	r1, [pc, #48]	; (800f7e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f7b4:	5ccb      	ldrb	r3, [r1, r3]
 800f7b6:	f003 031f 	and.w	r3, r3, #31
 800f7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f7be:	4a0a      	ldr	r2, [pc, #40]	; (800f7e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f7c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f7c2:	4b0a      	ldr	r3, [pc, #40]	; (800f7ec <HAL_RCC_ClockConfig+0x1c0>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fc fe32 	bl	800c430 <HAL_InitTick>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	72fb      	strb	r3, [r7, #11]

  return status;
 800f7d0:	7afb      	ldrb	r3, [r7, #11]
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	40022000 	.word	0x40022000
 800f7e0:	40021000 	.word	0x40021000
 800f7e4:	08014e18 	.word	0x08014e18
 800f7e8:	20000000 	.word	0x20000000
 800f7ec:	20000004 	.word	0x20000004

0800f7f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b089      	sub	sp, #36	; 0x24
 800f7f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	61fb      	str	r3, [r7, #28]
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f7fe:	4b3e      	ldr	r3, [pc, #248]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	f003 030c 	and.w	r3, r3, #12
 800f806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f808:	4b3b      	ldr	r3, [pc, #236]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f003 0303 	and.w	r3, r3, #3
 800f810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <HAL_RCC_GetSysClockFreq+0x34>
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	2b0c      	cmp	r3, #12
 800f81c:	d121      	bne.n	800f862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d11e      	bne.n	800f862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f824:	4b34      	ldr	r3, [pc, #208]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f003 0308 	and.w	r3, r3, #8
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d107      	bne.n	800f840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f830:	4b31      	ldr	r3, [pc, #196]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f836:	0a1b      	lsrs	r3, r3, #8
 800f838:	f003 030f 	and.w	r3, r3, #15
 800f83c:	61fb      	str	r3, [r7, #28]
 800f83e:	e005      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f840:	4b2d      	ldr	r3, [pc, #180]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	091b      	lsrs	r3, r3, #4
 800f846:	f003 030f 	and.w	r3, r3, #15
 800f84a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f84c:	4a2b      	ldr	r2, [pc, #172]	; (800f8fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10d      	bne.n	800f878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f860:	e00a      	b.n	800f878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	2b04      	cmp	r3, #4
 800f866:	d102      	bne.n	800f86e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f868:	4b25      	ldr	r3, [pc, #148]	; (800f900 <HAL_RCC_GetSysClockFreq+0x110>)
 800f86a:	61bb      	str	r3, [r7, #24]
 800f86c:	e004      	b.n	800f878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2b08      	cmp	r3, #8
 800f872:	d101      	bne.n	800f878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f874:	4b23      	ldr	r3, [pc, #140]	; (800f904 <HAL_RCC_GetSysClockFreq+0x114>)
 800f876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	2b0c      	cmp	r3, #12
 800f87c:	d134      	bne.n	800f8e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f87e:	4b1e      	ldr	r3, [pc, #120]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	f003 0303 	and.w	r3, r3, #3
 800f886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d003      	beq.n	800f896 <HAL_RCC_GetSysClockFreq+0xa6>
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b03      	cmp	r3, #3
 800f892:	d003      	beq.n	800f89c <HAL_RCC_GetSysClockFreq+0xac>
 800f894:	e005      	b.n	800f8a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f896:	4b1a      	ldr	r3, [pc, #104]	; (800f900 <HAL_RCC_GetSysClockFreq+0x110>)
 800f898:	617b      	str	r3, [r7, #20]
      break;
 800f89a:	e005      	b.n	800f8a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f89c:	4b19      	ldr	r3, [pc, #100]	; (800f904 <HAL_RCC_GetSysClockFreq+0x114>)
 800f89e:	617b      	str	r3, [r7, #20]
      break;
 800f8a0:	e002      	b.n	800f8a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	617b      	str	r3, [r7, #20]
      break;
 800f8a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f8a8:	4b13      	ldr	r3, [pc, #76]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	091b      	lsrs	r3, r3, #4
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f8b6:	4b10      	ldr	r3, [pc, #64]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	0a1b      	lsrs	r3, r3, #8
 800f8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	fb03 f202 	mul.w	r2, r3, r2
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f8ce:	4b0a      	ldr	r3, [pc, #40]	; (800f8f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	0e5b      	lsrs	r3, r3, #25
 800f8d4:	f003 0303 	and.w	r3, r3, #3
 800f8d8:	3301      	adds	r3, #1
 800f8da:	005b      	lsls	r3, r3, #1
 800f8dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f8e8:	69bb      	ldr	r3, [r7, #24]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3724      	adds	r7, #36	; 0x24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	40021000 	.word	0x40021000
 800f8fc:	08014e30 	.word	0x08014e30
 800f900:	00f42400 	.word	0x00f42400
 800f904:	00b71b00 	.word	0x00b71b00

0800f908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f908:	b480      	push	{r7}
 800f90a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f90c:	4b03      	ldr	r3, [pc, #12]	; (800f91c <HAL_RCC_GetHCLKFreq+0x14>)
 800f90e:	681b      	ldr	r3, [r3, #0]
}
 800f910:	4618      	mov	r0, r3
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	20000000 	.word	0x20000000

0800f920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f924:	f7ff fff0 	bl	800f908 <HAL_RCC_GetHCLKFreq>
 800f928:	4602      	mov	r2, r0
 800f92a:	4b06      	ldr	r3, [pc, #24]	; (800f944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	0a1b      	lsrs	r3, r3, #8
 800f930:	f003 0307 	and.w	r3, r3, #7
 800f934:	4904      	ldr	r1, [pc, #16]	; (800f948 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f936:	5ccb      	ldrb	r3, [r1, r3]
 800f938:	f003 031f 	and.w	r3, r3, #31
 800f93c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f940:	4618      	mov	r0, r3
 800f942:	bd80      	pop	{r7, pc}
 800f944:	40021000 	.word	0x40021000
 800f948:	08014e28 	.word	0x08014e28

0800f94c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800f950:	f7ff ffda 	bl	800f908 <HAL_RCC_GetHCLKFreq>
 800f954:	4602      	mov	r2, r0
 800f956:	4b06      	ldr	r3, [pc, #24]	; (800f970 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	0adb      	lsrs	r3, r3, #11
 800f95c:	f003 0307 	and.w	r3, r3, #7
 800f960:	4904      	ldr	r1, [pc, #16]	; (800f974 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f962:	5ccb      	ldrb	r3, [r1, r3]
 800f964:	f003 031f 	and.w	r3, r3, #31
 800f968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	40021000 	.word	0x40021000
 800f974:	08014e28 	.word	0x08014e28

0800f978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f980:	2300      	movs	r3, #0
 800f982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f984:	4b2a      	ldr	r3, [pc, #168]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d003      	beq.n	800f998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f990:	f7ff f9c8 	bl	800ed24 <HAL_PWREx_GetVoltageRange>
 800f994:	6178      	str	r0, [r7, #20]
 800f996:	e014      	b.n	800f9c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f998:	4b25      	ldr	r3, [pc, #148]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f99c:	4a24      	ldr	r2, [pc, #144]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f99e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9a2:	6593      	str	r3, [r2, #88]	; 0x58
 800f9a4:	4b22      	ldr	r3, [pc, #136]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9ac:	60fb      	str	r3, [r7, #12]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f9b0:	f7ff f9b8 	bl	800ed24 <HAL_PWREx_GetVoltageRange>
 800f9b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f9b6:	4b1e      	ldr	r3, [pc, #120]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ba:	4a1d      	ldr	r2, [pc, #116]	; (800fa30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f9bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9c8:	d10b      	bne.n	800f9e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b80      	cmp	r3, #128	; 0x80
 800f9ce:	d919      	bls.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2ba0      	cmp	r3, #160	; 0xa0
 800f9d4:	d902      	bls.n	800f9dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f9d6:	2302      	movs	r3, #2
 800f9d8:	613b      	str	r3, [r7, #16]
 800f9da:	e013      	b.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f9dc:	2301      	movs	r3, #1
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	e010      	b.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b80      	cmp	r3, #128	; 0x80
 800f9e6:	d902      	bls.n	800f9ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f9e8:	2303      	movs	r3, #3
 800f9ea:	613b      	str	r3, [r7, #16]
 800f9ec:	e00a      	b.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b80      	cmp	r3, #128	; 0x80
 800f9f2:	d102      	bne.n	800f9fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f9f4:	2302      	movs	r3, #2
 800f9f6:	613b      	str	r3, [r7, #16]
 800f9f8:	e004      	b.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b70      	cmp	r3, #112	; 0x70
 800f9fe:	d101      	bne.n	800fa04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fa00:	2301      	movs	r3, #1
 800fa02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fa04:	4b0b      	ldr	r3, [pc, #44]	; (800fa34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f023 0207 	bic.w	r2, r3, #7
 800fa0c:	4909      	ldr	r1, [pc, #36]	; (800fa34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	4313      	orrs	r3, r2
 800fa12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800fa14:	4b07      	ldr	r3, [pc, #28]	; (800fa34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 0307 	and.w	r3, r3, #7
 800fa1c:	693a      	ldr	r2, [r7, #16]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d001      	beq.n	800fa26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800fa22:	2301      	movs	r3, #1
 800fa24:	e000      	b.n	800fa28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3718      	adds	r7, #24
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	40021000 	.word	0x40021000
 800fa34:	40022000 	.word	0x40022000

0800fa38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fa40:	2300      	movs	r3, #0
 800fa42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fa44:	2300      	movs	r3, #0
 800fa46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d031      	beq.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fa5c:	d01a      	beq.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800fa5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fa62:	d814      	bhi.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d009      	beq.n	800fa7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800fa68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fa6c:	d10f      	bne.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800fa6e:	4b5d      	ldr	r3, [pc, #372]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	4a5c      	ldr	r2, [pc, #368]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fa74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fa7a:	e00c      	b.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	2100      	movs	r1, #0
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 f9ce 	bl	800fe24 <RCCEx_PLLSAI1_Config>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fa8c:	e003      	b.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	74fb      	strb	r3, [r7, #19]
      break;
 800fa92:	e000      	b.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800fa94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa96:	7cfb      	ldrb	r3, [r7, #19]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fa9c:	4b51      	ldr	r3, [pc, #324]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fa9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faaa:	494e      	ldr	r1, [pc, #312]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800faac:	4313      	orrs	r3, r2
 800faae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800fab2:	e001      	b.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fab4:	7cfb      	ldrb	r3, [r7, #19]
 800fab6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 809e 	beq.w	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fac6:	2300      	movs	r3, #0
 800fac8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800faca:	4b46      	ldr	r3, [pc, #280]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800facc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800face:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e000      	b.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800fada:	2300      	movs	r3, #0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00d      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fae0:	4b40      	ldr	r3, [pc, #256]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae4:	4a3f      	ldr	r2, [pc, #252]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800faea:	6593      	str	r3, [r2, #88]	; 0x58
 800faec:	4b3d      	ldr	r3, [pc, #244]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800faee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800faf4:	60bb      	str	r3, [r7, #8]
 800faf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800faf8:	2301      	movs	r3, #1
 800fafa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fafc:	4b3a      	ldr	r3, [pc, #232]	; (800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a39      	ldr	r2, [pc, #228]	; (800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fb02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fb08:	f7fc fce2 	bl	800c4d0 <HAL_GetTick>
 800fb0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fb0e:	e009      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb10:	f7fc fcde 	bl	800c4d0 <HAL_GetTick>
 800fb14:	4602      	mov	r2, r0
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	2b02      	cmp	r3, #2
 800fb1c:	d902      	bls.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800fb1e:	2303      	movs	r3, #3
 800fb20:	74fb      	strb	r3, [r7, #19]
        break;
 800fb22:	e005      	b.n	800fb30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fb24:	4b30      	ldr	r3, [pc, #192]	; (800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d0ef      	beq.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800fb30:	7cfb      	ldrb	r3, [r7, #19]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d15a      	bne.n	800fbec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800fb36:	4b2b      	ldr	r3, [pc, #172]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d01e      	beq.n	800fb86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d019      	beq.n	800fb86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800fb52:	4b24      	ldr	r3, [pc, #144]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fb5e:	4b21      	ldr	r3, [pc, #132]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb64:	4a1f      	ldr	r2, [pc, #124]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fb6e:	4b1d      	ldr	r3, [pc, #116]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb74:	4a1b      	ldr	r2, [pc, #108]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800fb7e:	4a19      	ldr	r2, [pc, #100]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d016      	beq.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb90:	f7fc fc9e 	bl	800c4d0 <HAL_GetTick>
 800fb94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fb96:	e00b      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb98:	f7fc fc9a 	bl	800c4d0 <HAL_GetTick>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d902      	bls.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	74fb      	strb	r3, [r7, #19]
            break;
 800fbae:	e006      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fbb0:	4b0c      	ldr	r3, [pc, #48]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbb6:	f003 0302 	and.w	r3, r3, #2
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0ec      	beq.n	800fb98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800fbbe:	7cfb      	ldrb	r3, [r7, #19]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10b      	bne.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fbc4:	4b07      	ldr	r3, [pc, #28]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbd2:	4904      	ldr	r1, [pc, #16]	; (800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800fbda:	e009      	b.n	800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fbdc:	7cfb      	ldrb	r3, [r7, #19]
 800fbde:	74bb      	strb	r3, [r7, #18]
 800fbe0:	e006      	b.n	800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800fbe2:	bf00      	nop
 800fbe4:	40021000 	.word	0x40021000
 800fbe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbec:	7cfb      	ldrb	r3, [r7, #19]
 800fbee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fbf0:	7c7b      	ldrb	r3, [r7, #17]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d105      	bne.n	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fbf6:	4b8a      	ldr	r3, [pc, #552]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbfa:	4a89      	ldr	r2, [pc, #548]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fbfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f003 0301 	and.w	r3, r3, #1
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00a      	beq.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fc0e:	4b84      	ldr	r3, [pc, #528]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc14:	f023 0203 	bic.w	r2, r3, #3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6a1b      	ldr	r3, [r3, #32]
 800fc1c:	4980      	ldr	r1, [pc, #512]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 0302 	and.w	r3, r3, #2
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00a      	beq.n	800fc46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800fc30:	4b7b      	ldr	r3, [pc, #492]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc36:	f023 020c 	bic.w	r2, r3, #12
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3e:	4978      	ldr	r1, [pc, #480]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc40:	4313      	orrs	r3, r2
 800fc42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f003 0320 	and.w	r3, r3, #32
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00a      	beq.n	800fc68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fc52:	4b73      	ldr	r3, [pc, #460]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc60:	496f      	ldr	r1, [pc, #444]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc62:	4313      	orrs	r3, r2
 800fc64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00a      	beq.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fc74:	4b6a      	ldr	r3, [pc, #424]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc82:	4967      	ldr	r1, [pc, #412]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc84:	4313      	orrs	r3, r2
 800fc86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00a      	beq.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fc96:	4b62      	ldr	r3, [pc, #392]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fc98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca4:	495e      	ldr	r1, [pc, #376]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fca6:	4313      	orrs	r3, r2
 800fca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00a      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fcb8:	4b59      	ldr	r3, [pc, #356]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fcba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc6:	4956      	ldr	r1, [pc, #344]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00a      	beq.n	800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fcda:	4b51      	ldr	r3, [pc, #324]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce8:	494d      	ldr	r1, [pc, #308]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fcea:	4313      	orrs	r3, r2
 800fcec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d028      	beq.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fcfc:	4b48      	ldr	r3, [pc, #288]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd0a:	4945      	ldr	r1, [pc, #276]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd1a:	d106      	bne.n	800fd2a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fd1c:	4b40      	ldr	r3, [pc, #256]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	4a3f      	ldr	r2, [pc, #252]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd26:	60d3      	str	r3, [r2, #12]
 800fd28:	e011      	b.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd32:	d10c      	bne.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3304      	adds	r3, #4
 800fd38:	2101      	movs	r1, #1
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 f872 	bl	800fe24 <RCCEx_PLLSAI1_Config>
 800fd40:	4603      	mov	r3, r0
 800fd42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800fd44:	7cfb      	ldrb	r3, [r7, #19]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d001      	beq.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800fd4a:	7cfb      	ldrb	r3, [r7, #19]
 800fd4c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d028      	beq.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fd5a:	4b31      	ldr	r3, [pc, #196]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd68:	492d      	ldr	r1, [pc, #180]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd78:	d106      	bne.n	800fd88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fd7a:	4b29      	ldr	r3, [pc, #164]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	4a28      	ldr	r2, [pc, #160]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fd80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd84:	60d3      	str	r3, [r2, #12]
 800fd86:	e011      	b.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd90:	d10c      	bne.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	3304      	adds	r3, #4
 800fd96:	2101      	movs	r1, #1
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 f843 	bl	800fe24 <RCCEx_PLLSAI1_Config>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fda2:	7cfb      	ldrb	r3, [r7, #19]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d001      	beq.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800fda8:	7cfb      	ldrb	r3, [r7, #19]
 800fdaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d01c      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fdb8:	4b19      	ldr	r3, [pc, #100]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdc6:	4916      	ldr	r1, [pc, #88]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fdd6:	d10c      	bne.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	3304      	adds	r3, #4
 800fddc:	2102      	movs	r1, #2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 f820 	bl	800fe24 <RCCEx_PLLSAI1_Config>
 800fde4:	4603      	mov	r3, r0
 800fde6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fde8:	7cfb      	ldrb	r3, [r7, #19]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800fdee:	7cfb      	ldrb	r3, [r7, #19]
 800fdf0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00a      	beq.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fdfe:	4b08      	ldr	r3, [pc, #32]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe0c:	4904      	ldr	r1, [pc, #16]	; (800fe20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800fe14:	7cbb      	ldrb	r3, [r7, #18]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	40021000 	.word	0x40021000

0800fe24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fe32:	4b74      	ldr	r3, [pc, #464]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f003 0303 	and.w	r3, r3, #3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d018      	beq.n	800fe70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800fe3e:	4b71      	ldr	r3, [pc, #452]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	f003 0203 	and.w	r2, r3, #3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d10d      	bne.n	800fe6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
       ||
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800fe56:	4b6b      	ldr	r3, [pc, #428]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	091b      	lsrs	r3, r3, #4
 800fe5c:	f003 0307 	and.w	r3, r3, #7
 800fe60:	1c5a      	adds	r2, r3, #1
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685b      	ldr	r3, [r3, #4]
       ||
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d047      	beq.n	800fefa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	73fb      	strb	r3, [r7, #15]
 800fe6e:	e044      	b.n	800fefa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b03      	cmp	r3, #3
 800fe76:	d018      	beq.n	800feaa <RCCEx_PLLSAI1_Config+0x86>
 800fe78:	2b03      	cmp	r3, #3
 800fe7a:	d825      	bhi.n	800fec8 <RCCEx_PLLSAI1_Config+0xa4>
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d002      	beq.n	800fe86 <RCCEx_PLLSAI1_Config+0x62>
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d009      	beq.n	800fe98 <RCCEx_PLLSAI1_Config+0x74>
 800fe84:	e020      	b.n	800fec8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fe86:	4b5f      	ldr	r3, [pc, #380]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f003 0302 	and.w	r3, r3, #2
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d11d      	bne.n	800fece <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe96:	e01a      	b.n	800fece <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fe98:	4b5a      	ldr	r3, [pc, #360]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d116      	bne.n	800fed2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800fea4:	2301      	movs	r3, #1
 800fea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fea8:	e013      	b.n	800fed2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800feaa:	4b56      	ldr	r3, [pc, #344]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10f      	bne.n	800fed6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800feb6:	4b53      	ldr	r3, [pc, #332]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d109      	bne.n	800fed6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fec6:	e006      	b.n	800fed6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fec8:	2301      	movs	r3, #1
 800feca:	73fb      	strb	r3, [r7, #15]
      break;
 800fecc:	e004      	b.n	800fed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fece:	bf00      	nop
 800fed0:	e002      	b.n	800fed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fed2:	bf00      	nop
 800fed4:	e000      	b.n	800fed8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fed6:	bf00      	nop
    }

    if(status == HAL_OK)
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10d      	bne.n	800fefa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fede:	4b49      	ldr	r3, [pc, #292]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6819      	ldr	r1, [r3, #0]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	3b01      	subs	r3, #1
 800fef0:	011b      	lsls	r3, r3, #4
 800fef2:	430b      	orrs	r3, r1
 800fef4:	4943      	ldr	r1, [pc, #268]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fef6:	4313      	orrs	r3, r2
 800fef8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d17c      	bne.n	800fffa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ff00:	4b40      	ldr	r3, [pc, #256]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a3f      	ldr	r2, [pc, #252]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ff0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff0c:	f7fc fae0 	bl	800c4d0 <HAL_GetTick>
 800ff10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ff12:	e009      	b.n	800ff28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ff14:	f7fc fadc 	bl	800c4d0 <HAL_GetTick>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	1ad3      	subs	r3, r2, r3
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	d902      	bls.n	800ff28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ff22:	2303      	movs	r3, #3
 800ff24:	73fb      	strb	r3, [r7, #15]
        break;
 800ff26:	e005      	b.n	800ff34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ff28:	4b36      	ldr	r3, [pc, #216]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1ef      	bne.n	800ff14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d15f      	bne.n	800fffa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d110      	bne.n	800ff62 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ff40:	4b30      	ldr	r3, [pc, #192]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff42:	691b      	ldr	r3, [r3, #16]
 800ff44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ff48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	6892      	ldr	r2, [r2, #8]
 800ff50:	0211      	lsls	r1, r2, #8
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	68d2      	ldr	r2, [r2, #12]
 800ff56:	06d2      	lsls	r2, r2, #27
 800ff58:	430a      	orrs	r2, r1
 800ff5a:	492a      	ldr	r1, [pc, #168]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	610b      	str	r3, [r1, #16]
 800ff60:	e027      	b.n	800ffb2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d112      	bne.n	800ff8e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ff68:	4b26      	ldr	r3, [pc, #152]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ff70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	6892      	ldr	r2, [r2, #8]
 800ff78:	0211      	lsls	r1, r2, #8
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	6912      	ldr	r2, [r2, #16]
 800ff7e:	0852      	lsrs	r2, r2, #1
 800ff80:	3a01      	subs	r2, #1
 800ff82:	0552      	lsls	r2, r2, #21
 800ff84:	430a      	orrs	r2, r1
 800ff86:	491f      	ldr	r1, [pc, #124]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	610b      	str	r3, [r1, #16]
 800ff8c:	e011      	b.n	800ffb2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ff8e:	4b1d      	ldr	r3, [pc, #116]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ff90:	691b      	ldr	r3, [r3, #16]
 800ff92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ff96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	6892      	ldr	r2, [r2, #8]
 800ff9e:	0211      	lsls	r1, r2, #8
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	6952      	ldr	r2, [r2, #20]
 800ffa4:	0852      	lsrs	r2, r2, #1
 800ffa6:	3a01      	subs	r2, #1
 800ffa8:	0652      	lsls	r2, r2, #25
 800ffaa:	430a      	orrs	r2, r1
 800ffac:	4915      	ldr	r1, [pc, #84]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ffb2:	4b14      	ldr	r3, [pc, #80]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a13      	ldr	r2, [pc, #76]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ffbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ffbe:	f7fc fa87 	bl	800c4d0 <HAL_GetTick>
 800ffc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ffc4:	e009      	b.n	800ffda <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ffc6:	f7fc fa83 	bl	800c4d0 <HAL_GetTick>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	1ad3      	subs	r3, r2, r3
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d902      	bls.n	800ffda <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	73fb      	strb	r3, [r7, #15]
          break;
 800ffd8:	e005      	b.n	800ffe6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ffda:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0ef      	beq.n	800ffc6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ffe6:	7bfb      	ldrb	r3, [r7, #15]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d106      	bne.n	800fffa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ffec:	4b05      	ldr	r3, [pc, #20]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ffee:	691a      	ldr	r2, [r3, #16]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	4903      	ldr	r1, [pc, #12]	; (8010004 <RCCEx_PLLSAI1_Config+0x1e0>)
 800fff6:	4313      	orrs	r3, r2
 800fff8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800fffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	40021000 	.word	0x40021000

08010008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010016:	2301      	movs	r3, #1
 8010018:	e049      	b.n	80100ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010020:	b2db      	uxtb	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7fb fab0 	bl	800b594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2202      	movs	r2, #2
 8010038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3304      	adds	r3, #4
 8010044:	4619      	mov	r1, r3
 8010046:	4610      	mov	r0, r2
 8010048:	f000 fcaa 	bl	80109a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2201      	movs	r2, #1
 8010068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d001      	beq.n	80100d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	e03b      	b.n	8010148 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2202      	movs	r2, #2
 80100d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68da      	ldr	r2, [r3, #12]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f042 0201 	orr.w	r2, r2, #1
 80100e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a19      	ldr	r2, [pc, #100]	; (8010154 <HAL_TIM_Base_Start_IT+0x9c>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d009      	beq.n	8010106 <HAL_TIM_Base_Start_IT+0x4e>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100fa:	d004      	beq.n	8010106 <HAL_TIM_Base_Start_IT+0x4e>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a15      	ldr	r2, [pc, #84]	; (8010158 <HAL_TIM_Base_Start_IT+0xa0>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d115      	bne.n	8010132 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	689a      	ldr	r2, [r3, #8]
 801010c:	4b13      	ldr	r3, [pc, #76]	; (801015c <HAL_TIM_Base_Start_IT+0xa4>)
 801010e:	4013      	ands	r3, r2
 8010110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2b06      	cmp	r3, #6
 8010116:	d015      	beq.n	8010144 <HAL_TIM_Base_Start_IT+0x8c>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801011e:	d011      	beq.n	8010144 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f042 0201 	orr.w	r2, r2, #1
 801012e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010130:	e008      	b.n	8010144 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f042 0201 	orr.w	r2, r2, #1
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	e000      	b.n	8010146 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010144:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3714      	adds	r7, #20
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	40012c00 	.word	0x40012c00
 8010158:	40014000 	.word	0x40014000
 801015c:	00010007 	.word	0x00010007

08010160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801016e:	2301      	movs	r3, #1
 8010170:	e049      	b.n	8010206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2200      	movs	r2, #0
 8010182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7fb f9b0 	bl	800b4ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2202      	movs	r2, #2
 8010190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3304      	adds	r3, #4
 801019c:	4619      	mov	r1, r3
 801019e:	4610      	mov	r0, r2
 80101a0:	f000 fbfe 	bl	80109a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2201      	movs	r2, #1
 80101b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
	...

08010210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d109      	bne.n	8010234 <HAL_TIM_PWM_Start+0x24>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b01      	cmp	r3, #1
 801022a:	bf14      	ite	ne
 801022c:	2301      	movne	r3, #1
 801022e:	2300      	moveq	r3, #0
 8010230:	b2db      	uxtb	r3, r3
 8010232:	e03c      	b.n	80102ae <HAL_TIM_PWM_Start+0x9e>
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2b04      	cmp	r3, #4
 8010238:	d109      	bne.n	801024e <HAL_TIM_PWM_Start+0x3e>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010240:	b2db      	uxtb	r3, r3
 8010242:	2b01      	cmp	r3, #1
 8010244:	bf14      	ite	ne
 8010246:	2301      	movne	r3, #1
 8010248:	2300      	moveq	r3, #0
 801024a:	b2db      	uxtb	r3, r3
 801024c:	e02f      	b.n	80102ae <HAL_TIM_PWM_Start+0x9e>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	2b08      	cmp	r3, #8
 8010252:	d109      	bne.n	8010268 <HAL_TIM_PWM_Start+0x58>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b01      	cmp	r3, #1
 801025e:	bf14      	ite	ne
 8010260:	2301      	movne	r3, #1
 8010262:	2300      	moveq	r3, #0
 8010264:	b2db      	uxtb	r3, r3
 8010266:	e022      	b.n	80102ae <HAL_TIM_PWM_Start+0x9e>
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	2b0c      	cmp	r3, #12
 801026c:	d109      	bne.n	8010282 <HAL_TIM_PWM_Start+0x72>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b01      	cmp	r3, #1
 8010278:	bf14      	ite	ne
 801027a:	2301      	movne	r3, #1
 801027c:	2300      	moveq	r3, #0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	e015      	b.n	80102ae <HAL_TIM_PWM_Start+0x9e>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	2b10      	cmp	r3, #16
 8010286:	d109      	bne.n	801029c <HAL_TIM_PWM_Start+0x8c>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b01      	cmp	r3, #1
 8010292:	bf14      	ite	ne
 8010294:	2301      	movne	r3, #1
 8010296:	2300      	moveq	r3, #0
 8010298:	b2db      	uxtb	r3, r3
 801029a:	e008      	b.n	80102ae <HAL_TIM_PWM_Start+0x9e>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	bf14      	ite	ne
 80102a8:	2301      	movne	r3, #1
 80102aa:	2300      	moveq	r3, #0
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80102b2:	2301      	movs	r3, #1
 80102b4:	e07e      	b.n	80103b4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d104      	bne.n	80102c6 <HAL_TIM_PWM_Start+0xb6>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2202      	movs	r2, #2
 80102c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102c4:	e023      	b.n	801030e <HAL_TIM_PWM_Start+0xfe>
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b04      	cmp	r3, #4
 80102ca:	d104      	bne.n	80102d6 <HAL_TIM_PWM_Start+0xc6>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2202      	movs	r2, #2
 80102d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102d4:	e01b      	b.n	801030e <HAL_TIM_PWM_Start+0xfe>
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	2b08      	cmp	r3, #8
 80102da:	d104      	bne.n	80102e6 <HAL_TIM_PWM_Start+0xd6>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2202      	movs	r2, #2
 80102e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102e4:	e013      	b.n	801030e <HAL_TIM_PWM_Start+0xfe>
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b0c      	cmp	r3, #12
 80102ea:	d104      	bne.n	80102f6 <HAL_TIM_PWM_Start+0xe6>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2202      	movs	r2, #2
 80102f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102f4:	e00b      	b.n	801030e <HAL_TIM_PWM_Start+0xfe>
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	2b10      	cmp	r3, #16
 80102fa:	d104      	bne.n	8010306 <HAL_TIM_PWM_Start+0xf6>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2202      	movs	r2, #2
 8010300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010304:	e003      	b.n	801030e <HAL_TIM_PWM_Start+0xfe>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2202      	movs	r2, #2
 801030a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2201      	movs	r2, #1
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	4618      	mov	r0, r3
 8010318:	f000 fe24 	bl	8010f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a26      	ldr	r2, [pc, #152]	; (80103bc <HAL_TIM_PWM_Start+0x1ac>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d009      	beq.n	801033a <HAL_TIM_PWM_Start+0x12a>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a25      	ldr	r2, [pc, #148]	; (80103c0 <HAL_TIM_PWM_Start+0x1b0>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d004      	beq.n	801033a <HAL_TIM_PWM_Start+0x12a>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a23      	ldr	r2, [pc, #140]	; (80103c4 <HAL_TIM_PWM_Start+0x1b4>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d101      	bne.n	801033e <HAL_TIM_PWM_Start+0x12e>
 801033a:	2301      	movs	r3, #1
 801033c:	e000      	b.n	8010340 <HAL_TIM_PWM_Start+0x130>
 801033e:	2300      	movs	r3, #0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d007      	beq.n	8010354 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010352:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a18      	ldr	r2, [pc, #96]	; (80103bc <HAL_TIM_PWM_Start+0x1ac>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d009      	beq.n	8010372 <HAL_TIM_PWM_Start+0x162>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010366:	d004      	beq.n	8010372 <HAL_TIM_PWM_Start+0x162>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a14      	ldr	r2, [pc, #80]	; (80103c0 <HAL_TIM_PWM_Start+0x1b0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d115      	bne.n	801039e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	689a      	ldr	r2, [r3, #8]
 8010378:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <HAL_TIM_PWM_Start+0x1b8>)
 801037a:	4013      	ands	r3, r2
 801037c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b06      	cmp	r3, #6
 8010382:	d015      	beq.n	80103b0 <HAL_TIM_PWM_Start+0x1a0>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801038a:	d011      	beq.n	80103b0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f042 0201 	orr.w	r2, r2, #1
 801039a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801039c:	e008      	b.n	80103b0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f042 0201 	orr.w	r2, r2, #1
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	e000      	b.n	80103b2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	40012c00 	.word	0x40012c00
 80103c0:	40014000 	.word	0x40014000
 80103c4:	40014400 	.word	0x40014400
 80103c8:	00010007 	.word	0x00010007

080103cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2200      	movs	r2, #0
 80103dc:	6839      	ldr	r1, [r7, #0]
 80103de:	4618      	mov	r0, r3
 80103e0:	f000 fdc0 	bl	8010f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a39      	ldr	r2, [pc, #228]	; (80104d0 <HAL_TIM_PWM_Stop+0x104>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d009      	beq.n	8010402 <HAL_TIM_PWM_Stop+0x36>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4a38      	ldr	r2, [pc, #224]	; (80104d4 <HAL_TIM_PWM_Stop+0x108>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d004      	beq.n	8010402 <HAL_TIM_PWM_Stop+0x36>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a36      	ldr	r2, [pc, #216]	; (80104d8 <HAL_TIM_PWM_Stop+0x10c>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d101      	bne.n	8010406 <HAL_TIM_PWM_Stop+0x3a>
 8010402:	2301      	movs	r3, #1
 8010404:	e000      	b.n	8010408 <HAL_TIM_PWM_Stop+0x3c>
 8010406:	2300      	movs	r3, #0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d017      	beq.n	801043c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	6a1a      	ldr	r2, [r3, #32]
 8010412:	f241 1311 	movw	r3, #4369	; 0x1111
 8010416:	4013      	ands	r3, r2
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10f      	bne.n	801043c <HAL_TIM_PWM_Stop+0x70>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6a1a      	ldr	r2, [r3, #32]
 8010422:	f240 4344 	movw	r3, #1092	; 0x444
 8010426:	4013      	ands	r3, r2
 8010428:	2b00      	cmp	r3, #0
 801042a:	d107      	bne.n	801043c <HAL_TIM_PWM_Stop+0x70>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801043a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6a1a      	ldr	r2, [r3, #32]
 8010442:	f241 1311 	movw	r3, #4369	; 0x1111
 8010446:	4013      	ands	r3, r2
 8010448:	2b00      	cmp	r3, #0
 801044a:	d10f      	bne.n	801046c <HAL_TIM_PWM_Stop+0xa0>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6a1a      	ldr	r2, [r3, #32]
 8010452:	f240 4344 	movw	r3, #1092	; 0x444
 8010456:	4013      	ands	r3, r2
 8010458:	2b00      	cmp	r3, #0
 801045a:	d107      	bne.n	801046c <HAL_TIM_PWM_Stop+0xa0>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f022 0201 	bic.w	r2, r2, #1
 801046a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d104      	bne.n	801047c <HAL_TIM_PWM_Stop+0xb0>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2201      	movs	r2, #1
 8010476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801047a:	e023      	b.n	80104c4 <HAL_TIM_PWM_Stop+0xf8>
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	2b04      	cmp	r3, #4
 8010480:	d104      	bne.n	801048c <HAL_TIM_PWM_Stop+0xc0>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2201      	movs	r2, #1
 8010486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801048a:	e01b      	b.n	80104c4 <HAL_TIM_PWM_Stop+0xf8>
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	2b08      	cmp	r3, #8
 8010490:	d104      	bne.n	801049c <HAL_TIM_PWM_Stop+0xd0>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2201      	movs	r2, #1
 8010496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801049a:	e013      	b.n	80104c4 <HAL_TIM_PWM_Stop+0xf8>
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	2b0c      	cmp	r3, #12
 80104a0:	d104      	bne.n	80104ac <HAL_TIM_PWM_Stop+0xe0>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2201      	movs	r2, #1
 80104a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104aa:	e00b      	b.n	80104c4 <HAL_TIM_PWM_Stop+0xf8>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2b10      	cmp	r3, #16
 80104b0:	d104      	bne.n	80104bc <HAL_TIM_PWM_Stop+0xf0>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2201      	movs	r2, #1
 80104b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104ba:	e003      	b.n	80104c4 <HAL_TIM_PWM_Stop+0xf8>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	40012c00 	.word	0x40012c00
 80104d4:	40014000 	.word	0x40014000
 80104d8:	40014400 	.word	0x40014400

080104dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	f003 0302 	and.w	r3, r3, #2
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d122      	bne.n	8010538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	f003 0302 	and.w	r3, r3, #2
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	d11b      	bne.n	8010538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f06f 0202 	mvn.w	r2, #2
 8010508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2201      	movs	r2, #1
 801050e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	699b      	ldr	r3, [r3, #24]
 8010516:	f003 0303 	and.w	r3, r3, #3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 fa20 	bl	8010964 <HAL_TIM_IC_CaptureCallback>
 8010524:	e005      	b.n	8010532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 fa12 	bl	8010950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 fa23 	bl	8010978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2200      	movs	r2, #0
 8010536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	691b      	ldr	r3, [r3, #16]
 801053e:	f003 0304 	and.w	r3, r3, #4
 8010542:	2b04      	cmp	r3, #4
 8010544:	d122      	bne.n	801058c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	f003 0304 	and.w	r3, r3, #4
 8010550:	2b04      	cmp	r3, #4
 8010552:	d11b      	bne.n	801058c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f06f 0204 	mvn.w	r2, #4
 801055c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2202      	movs	r2, #2
 8010562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	699b      	ldr	r3, [r3, #24]
 801056a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801056e:	2b00      	cmp	r3, #0
 8010570:	d003      	beq.n	801057a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f9f6 	bl	8010964 <HAL_TIM_IC_CaptureCallback>
 8010578:	e005      	b.n	8010586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f9e8 	bl	8010950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f9f9 	bl	8010978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	f003 0308 	and.w	r3, r3, #8
 8010596:	2b08      	cmp	r3, #8
 8010598:	d122      	bne.n	80105e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	f003 0308 	and.w	r3, r3, #8
 80105a4:	2b08      	cmp	r3, #8
 80105a6:	d11b      	bne.n	80105e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f06f 0208 	mvn.w	r2, #8
 80105b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2204      	movs	r2, #4
 80105b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	69db      	ldr	r3, [r3, #28]
 80105be:	f003 0303 	and.w	r3, r3, #3
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d003      	beq.n	80105ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f9cc 	bl	8010964 <HAL_TIM_IC_CaptureCallback>
 80105cc:	e005      	b.n	80105da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 f9be 	bl	8010950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 f9cf 	bl	8010978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	f003 0310 	and.w	r3, r3, #16
 80105ea:	2b10      	cmp	r3, #16
 80105ec:	d122      	bne.n	8010634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	f003 0310 	and.w	r3, r3, #16
 80105f8:	2b10      	cmp	r3, #16
 80105fa:	d11b      	bne.n	8010634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f06f 0210 	mvn.w	r2, #16
 8010604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2208      	movs	r2, #8
 801060a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010616:	2b00      	cmp	r3, #0
 8010618:	d003      	beq.n	8010622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f9a2 	bl	8010964 <HAL_TIM_IC_CaptureCallback>
 8010620:	e005      	b.n	801062e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 f994 	bl	8010950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f9a5 	bl	8010978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b01      	cmp	r3, #1
 8010640:	d10e      	bne.n	8010660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b01      	cmp	r3, #1
 801064e:	d107      	bne.n	8010660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f06f 0201 	mvn.w	r2, #1
 8010658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 f96e 	bl	801093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801066a:	2b80      	cmp	r3, #128	; 0x80
 801066c:	d10e      	bne.n	801068c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010678:	2b80      	cmp	r3, #128	; 0x80
 801067a:	d107      	bne.n	801068c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fd7a 	bl	8011180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801069a:	d10e      	bne.n	80106ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106a6:	2b80      	cmp	r3, #128	; 0x80
 80106a8:	d107      	bne.n	80106ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80106b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 fd6d 	bl	8011194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	691b      	ldr	r3, [r3, #16]
 80106c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106c4:	2b40      	cmp	r3, #64	; 0x40
 80106c6:	d10e      	bne.n	80106e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106d2:	2b40      	cmp	r3, #64	; 0x40
 80106d4:	d107      	bne.n	80106e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80106de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 f953 	bl	801098c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	691b      	ldr	r3, [r3, #16]
 80106ec:	f003 0320 	and.w	r3, r3, #32
 80106f0:	2b20      	cmp	r3, #32
 80106f2:	d10e      	bne.n	8010712 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	f003 0320 	and.w	r3, r3, #32
 80106fe:	2b20      	cmp	r3, #32
 8010700:	d107      	bne.n	8010712 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f06f 0220 	mvn.w	r2, #32
 801070a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fd2d 	bl	801116c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010712:	bf00      	nop
 8010714:	3708      	adds	r7, #8
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
	...

0801071c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801072e:	2b01      	cmp	r3, #1
 8010730:	d101      	bne.n	8010736 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010732:	2302      	movs	r3, #2
 8010734:	e0fd      	b.n	8010932 <HAL_TIM_PWM_ConfigChannel+0x216>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2201      	movs	r2, #1
 801073a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b14      	cmp	r3, #20
 8010742:	f200 80f0 	bhi.w	8010926 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010746:	a201      	add	r2, pc, #4	; (adr r2, 801074c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074c:	080107a1 	.word	0x080107a1
 8010750:	08010927 	.word	0x08010927
 8010754:	08010927 	.word	0x08010927
 8010758:	08010927 	.word	0x08010927
 801075c:	080107e1 	.word	0x080107e1
 8010760:	08010927 	.word	0x08010927
 8010764:	08010927 	.word	0x08010927
 8010768:	08010927 	.word	0x08010927
 801076c:	08010823 	.word	0x08010823
 8010770:	08010927 	.word	0x08010927
 8010774:	08010927 	.word	0x08010927
 8010778:	08010927 	.word	0x08010927
 801077c:	08010863 	.word	0x08010863
 8010780:	08010927 	.word	0x08010927
 8010784:	08010927 	.word	0x08010927
 8010788:	08010927 	.word	0x08010927
 801078c:	080108a5 	.word	0x080108a5
 8010790:	08010927 	.word	0x08010927
 8010794:	08010927 	.word	0x08010927
 8010798:	08010927 	.word	0x08010927
 801079c:	080108e5 	.word	0x080108e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68b9      	ldr	r1, [r7, #8]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 f95e 	bl	8010a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	699a      	ldr	r2, [r3, #24]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f042 0208 	orr.w	r2, r2, #8
 80107ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	699a      	ldr	r2, [r3, #24]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f022 0204 	bic.w	r2, r2, #4
 80107ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6999      	ldr	r1, [r3, #24]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	691a      	ldr	r2, [r3, #16]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	430a      	orrs	r2, r1
 80107dc:	619a      	str	r2, [r3, #24]
      break;
 80107de:	e0a3      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 f9ba 	bl	8010b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	699a      	ldr	r2, [r3, #24]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	699a      	ldr	r2, [r3, #24]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801080a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6999      	ldr	r1, [r3, #24]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	021a      	lsls	r2, r3, #8
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	430a      	orrs	r2, r1
 801081e:	619a      	str	r2, [r3, #24]
      break;
 8010820:	e082      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68b9      	ldr	r1, [r7, #8]
 8010828:	4618      	mov	r0, r3
 801082a:	f000 fa13 	bl	8010c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	69da      	ldr	r2, [r3, #28]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f042 0208 	orr.w	r2, r2, #8
 801083c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	69da      	ldr	r2, [r3, #28]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f022 0204 	bic.w	r2, r2, #4
 801084c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	69d9      	ldr	r1, [r3, #28]
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	691a      	ldr	r2, [r3, #16]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	430a      	orrs	r2, r1
 801085e:	61da      	str	r2, [r3, #28]
      break;
 8010860:	e062      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68b9      	ldr	r1, [r7, #8]
 8010868:	4618      	mov	r0, r3
 801086a:	f000 fa6b 	bl	8010d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	69da      	ldr	r2, [r3, #28]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801087c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	69da      	ldr	r2, [r3, #28]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801088c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	69d9      	ldr	r1, [r3, #28]
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	021a      	lsls	r2, r3, #8
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	430a      	orrs	r2, r1
 80108a0:	61da      	str	r2, [r3, #28]
      break;
 80108a2:	e041      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68b9      	ldr	r1, [r7, #8]
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 faa8 	bl	8010e00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f042 0208 	orr.w	r2, r2, #8
 80108be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f022 0204 	bic.w	r2, r2, #4
 80108ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	691a      	ldr	r2, [r3, #16]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	430a      	orrs	r2, r1
 80108e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80108e2:	e021      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68b9      	ldr	r1, [r7, #8]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 fae0 	bl	8010eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80108fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801090e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	021a      	lsls	r2, r3, #8
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	430a      	orrs	r2, r1
 8010922:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010924:	e000      	b.n	8010928 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010926:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2200      	movs	r2, #0
 801092c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop

0801093c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010980:	bf00      	nop
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010994:	bf00      	nop
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4a2a      	ldr	r2, [pc, #168]	; (8010a5c <TIM_Base_SetConfig+0xbc>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d003      	beq.n	80109c0 <TIM_Base_SetConfig+0x20>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109be:	d108      	bne.n	80109d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	4313      	orrs	r3, r2
 80109d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4a21      	ldr	r2, [pc, #132]	; (8010a5c <TIM_Base_SetConfig+0xbc>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d00b      	beq.n	80109f2 <TIM_Base_SetConfig+0x52>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109e0:	d007      	beq.n	80109f2 <TIM_Base_SetConfig+0x52>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4a1e      	ldr	r2, [pc, #120]	; (8010a60 <TIM_Base_SetConfig+0xc0>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d003      	beq.n	80109f2 <TIM_Base_SetConfig+0x52>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a1d      	ldr	r2, [pc, #116]	; (8010a64 <TIM_Base_SetConfig+0xc4>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d108      	bne.n	8010a04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	689a      	ldr	r2, [r3, #8]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a0c      	ldr	r2, [pc, #48]	; (8010a5c <TIM_Base_SetConfig+0xbc>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d007      	beq.n	8010a40 <TIM_Base_SetConfig+0xa0>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a0b      	ldr	r2, [pc, #44]	; (8010a60 <TIM_Base_SetConfig+0xc0>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d003      	beq.n	8010a40 <TIM_Base_SetConfig+0xa0>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a0a      	ldr	r2, [pc, #40]	; (8010a64 <TIM_Base_SetConfig+0xc4>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d103      	bne.n	8010a48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	691a      	ldr	r2, [r3, #16]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	615a      	str	r2, [r3, #20]
}
 8010a4e:	bf00      	nop
 8010a50:	3714      	adds	r7, #20
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	40012c00 	.word	0x40012c00
 8010a60:	40014000 	.word	0x40014000
 8010a64:	40014400 	.word	0x40014400

08010a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b087      	sub	sp, #28
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a1b      	ldr	r3, [r3, #32]
 8010a76:	f023 0201 	bic.w	r2, r3, #1
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a1b      	ldr	r3, [r3, #32]
 8010a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	699b      	ldr	r3, [r3, #24]
 8010a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f023 0302 	bic.w	r3, r3, #2
 8010ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	697a      	ldr	r2, [r7, #20]
 8010abc:	4313      	orrs	r3, r2
 8010abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	4a24      	ldr	r2, [pc, #144]	; (8010b54 <TIM_OC1_SetConfig+0xec>)
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d007      	beq.n	8010ad8 <TIM_OC1_SetConfig+0x70>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	4a23      	ldr	r2, [pc, #140]	; (8010b58 <TIM_OC1_SetConfig+0xf0>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d003      	beq.n	8010ad8 <TIM_OC1_SetConfig+0x70>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	4a22      	ldr	r2, [pc, #136]	; (8010b5c <TIM_OC1_SetConfig+0xf4>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d10c      	bne.n	8010af2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	f023 0308 	bic.w	r3, r3, #8
 8010ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	f023 0304 	bic.w	r3, r3, #4
 8010af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a17      	ldr	r2, [pc, #92]	; (8010b54 <TIM_OC1_SetConfig+0xec>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d007      	beq.n	8010b0a <TIM_OC1_SetConfig+0xa2>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a16      	ldr	r2, [pc, #88]	; (8010b58 <TIM_OC1_SetConfig+0xf0>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d003      	beq.n	8010b0a <TIM_OC1_SetConfig+0xa2>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a15      	ldr	r2, [pc, #84]	; (8010b5c <TIM_OC1_SetConfig+0xf4>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d111      	bne.n	8010b2e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	695b      	ldr	r3, [r3, #20]
 8010b1e:	693a      	ldr	r2, [r7, #16]
 8010b20:	4313      	orrs	r3, r2
 8010b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	699b      	ldr	r3, [r3, #24]
 8010b28:	693a      	ldr	r2, [r7, #16]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	685a      	ldr	r2, [r3, #4]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	697a      	ldr	r2, [r7, #20]
 8010b46:	621a      	str	r2, [r3, #32]
}
 8010b48:	bf00      	nop
 8010b4a:	371c      	adds	r7, #28
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	40012c00 	.word	0x40012c00
 8010b58:	40014000 	.word	0x40014000
 8010b5c:	40014400 	.word	0x40014400

08010b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6a1b      	ldr	r3, [r3, #32]
 8010b6e:	f023 0210 	bic.w	r2, r3, #16
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	699b      	ldr	r3, [r3, #24]
 8010b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	021b      	lsls	r3, r3, #8
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	f023 0320 	bic.w	r3, r3, #32
 8010bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	011b      	lsls	r3, r3, #4
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4a22      	ldr	r2, [pc, #136]	; (8010c48 <TIM_OC2_SetConfig+0xe8>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d10d      	bne.n	8010be0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	011b      	lsls	r3, r3, #4
 8010bd2:	697a      	ldr	r2, [r7, #20]
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a19      	ldr	r2, [pc, #100]	; (8010c48 <TIM_OC2_SetConfig+0xe8>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d007      	beq.n	8010bf8 <TIM_OC2_SetConfig+0x98>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a18      	ldr	r2, [pc, #96]	; (8010c4c <TIM_OC2_SetConfig+0xec>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d003      	beq.n	8010bf8 <TIM_OC2_SetConfig+0x98>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a17      	ldr	r2, [pc, #92]	; (8010c50 <TIM_OC2_SetConfig+0xf0>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d113      	bne.n	8010c20 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	695b      	ldr	r3, [r3, #20]
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	693a      	ldr	r2, [r7, #16]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	693a      	ldr	r2, [r7, #16]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	693a      	ldr	r2, [r7, #16]
 8010c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685a      	ldr	r2, [r3, #4]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	621a      	str	r2, [r3, #32]
}
 8010c3a:	bf00      	nop
 8010c3c:	371c      	adds	r7, #28
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	40012c00 	.word	0x40012c00
 8010c4c:	40014000 	.word	0x40014000
 8010c50:	40014400 	.word	0x40014400

08010c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b087      	sub	sp, #28
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a1b      	ldr	r3, [r3, #32]
 8010c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	69db      	ldr	r3, [r3, #28]
 8010c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f023 0303 	bic.w	r3, r3, #3
 8010c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	021b      	lsls	r3, r3, #8
 8010ca8:	697a      	ldr	r2, [r7, #20]
 8010caa:	4313      	orrs	r3, r2
 8010cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a21      	ldr	r2, [pc, #132]	; (8010d38 <TIM_OC3_SetConfig+0xe4>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d10d      	bne.n	8010cd2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	021b      	lsls	r3, r3, #8
 8010cc4:	697a      	ldr	r2, [r7, #20]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a18      	ldr	r2, [pc, #96]	; (8010d38 <TIM_OC3_SetConfig+0xe4>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d007      	beq.n	8010cea <TIM_OC3_SetConfig+0x96>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <TIM_OC3_SetConfig+0xe8>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d003      	beq.n	8010cea <TIM_OC3_SetConfig+0x96>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a16      	ldr	r2, [pc, #88]	; (8010d40 <TIM_OC3_SetConfig+0xec>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d113      	bne.n	8010d12 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	695b      	ldr	r3, [r3, #20]
 8010cfe:	011b      	lsls	r3, r3, #4
 8010d00:	693a      	ldr	r2, [r7, #16]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	011b      	lsls	r3, r3, #4
 8010d0c:	693a      	ldr	r2, [r7, #16]
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	68fa      	ldr	r2, [r7, #12]
 8010d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	685a      	ldr	r2, [r3, #4]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	621a      	str	r2, [r3, #32]
}
 8010d2c:	bf00      	nop
 8010d2e:	371c      	adds	r7, #28
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	40012c00 	.word	0x40012c00
 8010d3c:	40014000 	.word	0x40014000
 8010d40:	40014400 	.word	0x40014400

08010d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6a1b      	ldr	r3, [r3, #32]
 8010d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a1b      	ldr	r3, [r3, #32]
 8010d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	69db      	ldr	r3, [r3, #28]
 8010d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	021b      	lsls	r3, r3, #8
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	031b      	lsls	r3, r3, #12
 8010d9a:	693a      	ldr	r2, [r7, #16]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a14      	ldr	r2, [pc, #80]	; (8010df4 <TIM_OC4_SetConfig+0xb0>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d007      	beq.n	8010db8 <TIM_OC4_SetConfig+0x74>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a13      	ldr	r2, [pc, #76]	; (8010df8 <TIM_OC4_SetConfig+0xb4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d003      	beq.n	8010db8 <TIM_OC4_SetConfig+0x74>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a12      	ldr	r2, [pc, #72]	; (8010dfc <TIM_OC4_SetConfig+0xb8>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d109      	bne.n	8010dcc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	695b      	ldr	r3, [r3, #20]
 8010dc4:	019b      	lsls	r3, r3, #6
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	685a      	ldr	r2, [r3, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	693a      	ldr	r2, [r7, #16]
 8010de4:	621a      	str	r2, [r3, #32]
}
 8010de6:	bf00      	nop
 8010de8:	371c      	adds	r7, #28
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	40012c00 	.word	0x40012c00
 8010df8:	40014000 	.word	0x40014000
 8010dfc:	40014400 	.word	0x40014400

08010e00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b087      	sub	sp, #28
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a1b      	ldr	r3, [r3, #32]
 8010e0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6a1b      	ldr	r3, [r3, #32]
 8010e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010e44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	041b      	lsls	r3, r3, #16
 8010e4c:	693a      	ldr	r2, [r7, #16]
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a13      	ldr	r2, [pc, #76]	; (8010ea4 <TIM_OC5_SetConfig+0xa4>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d007      	beq.n	8010e6a <TIM_OC5_SetConfig+0x6a>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a12      	ldr	r2, [pc, #72]	; (8010ea8 <TIM_OC5_SetConfig+0xa8>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d003      	beq.n	8010e6a <TIM_OC5_SetConfig+0x6a>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4a11      	ldr	r2, [pc, #68]	; (8010eac <TIM_OC5_SetConfig+0xac>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d109      	bne.n	8010e7e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	021b      	lsls	r3, r3, #8
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	697a      	ldr	r2, [r7, #20]
 8010e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	685a      	ldr	r2, [r3, #4]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	693a      	ldr	r2, [r7, #16]
 8010e96:	621a      	str	r2, [r3, #32]
}
 8010e98:	bf00      	nop
 8010e9a:	371c      	adds	r7, #28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr
 8010ea4:	40012c00 	.word	0x40012c00
 8010ea8:	40014000 	.word	0x40014000
 8010eac:	40014400 	.word	0x40014400

08010eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a1b      	ldr	r3, [r3, #32]
 8010ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6a1b      	ldr	r3, [r3, #32]
 8010eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	021b      	lsls	r3, r3, #8
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	4313      	orrs	r3, r2
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	051b      	lsls	r3, r3, #20
 8010efe:	693a      	ldr	r2, [r7, #16]
 8010f00:	4313      	orrs	r3, r2
 8010f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4a14      	ldr	r2, [pc, #80]	; (8010f58 <TIM_OC6_SetConfig+0xa8>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d007      	beq.n	8010f1c <TIM_OC6_SetConfig+0x6c>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4a13      	ldr	r2, [pc, #76]	; (8010f5c <TIM_OC6_SetConfig+0xac>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d003      	beq.n	8010f1c <TIM_OC6_SetConfig+0x6c>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4a12      	ldr	r2, [pc, #72]	; (8010f60 <TIM_OC6_SetConfig+0xb0>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d109      	bne.n	8010f30 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	029b      	lsls	r3, r3, #10
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	697a      	ldr	r2, [r7, #20]
 8010f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	693a      	ldr	r2, [r7, #16]
 8010f48:	621a      	str	r2, [r3, #32]
}
 8010f4a:	bf00      	nop
 8010f4c:	371c      	adds	r7, #28
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop
 8010f58:	40012c00 	.word	0x40012c00
 8010f5c:	40014000 	.word	0x40014000
 8010f60:	40014400 	.word	0x40014400

08010f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b087      	sub	sp, #28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	f003 031f 	and.w	r3, r3, #31
 8010f76:	2201      	movs	r2, #1
 8010f78:	fa02 f303 	lsl.w	r3, r2, r3
 8010f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6a1a      	ldr	r2, [r3, #32]
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	43db      	mvns	r3, r3
 8010f86:	401a      	ands	r2, r3
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	6a1a      	ldr	r2, [r3, #32]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	f003 031f 	and.w	r3, r3, #31
 8010f96:	6879      	ldr	r1, [r7, #4]
 8010f98:	fa01 f303 	lsl.w	r3, r1, r3
 8010f9c:	431a      	orrs	r2, r3
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	621a      	str	r2, [r3, #32]
}
 8010fa2:	bf00      	nop
 8010fa4:	371c      	adds	r7, #28
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
	...

08010fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d101      	bne.n	8010fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	e04f      	b.n	8011068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	689b      	ldr	r3, [r3, #8]
 8010fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a21      	ldr	r2, [pc, #132]	; (8011074 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d108      	bne.n	8011004 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010ff8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	4313      	orrs	r3, r2
 8011002:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801100a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	4313      	orrs	r3, r2
 8011014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a14      	ldr	r2, [pc, #80]	; (8011074 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8011024:	4293      	cmp	r3, r2
 8011026:	d009      	beq.n	801103c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011030:	d004      	beq.n	801103c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4a10      	ldr	r2, [pc, #64]	; (8011078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d10c      	bne.n	8011056 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	68ba      	ldr	r2, [r7, #8]
 801104a:	4313      	orrs	r3, r2
 801104c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011066:	2300      	movs	r3, #0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	40012c00 	.word	0x40012c00
 8011078:	40014000 	.word	0x40014000

0801107c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801107c:	b480      	push	{r7}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011086:	2300      	movs	r3, #0
 8011088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011090:	2b01      	cmp	r3, #1
 8011092:	d101      	bne.n	8011098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011094:	2302      	movs	r3, #2
 8011096:	e060      	b.n	801115a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	4313      	orrs	r3, r2
 80110ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	4313      	orrs	r3, r2
 80110c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4313      	orrs	r3, r2
 80110d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	691b      	ldr	r3, [r3, #16]
 80110e2:	4313      	orrs	r3, r2
 80110e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	695b      	ldr	r3, [r3, #20]
 80110f0:	4313      	orrs	r3, r2
 80110f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110fe:	4313      	orrs	r3, r2
 8011100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	041b      	lsls	r3, r3, #16
 801110e:	4313      	orrs	r3, r2
 8011110:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a14      	ldr	r2, [pc, #80]	; (8011168 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d115      	bne.n	8011148 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011126:	051b      	lsls	r3, r3, #20
 8011128:	4313      	orrs	r3, r2
 801112a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	69db      	ldr	r3, [r3, #28]
 8011136:	4313      	orrs	r3, r2
 8011138:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	6a1b      	ldr	r3, [r3, #32]
 8011144:	4313      	orrs	r3, r2
 8011146:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	40012c00 	.word	0x40012c00

0801116c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011174:	bf00      	nop
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011188:	bf00      	nop
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d101      	bne.n	80111ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e040      	b.n	801123c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d106      	bne.n	80111d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7fb f884 	bl	800c2d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2224      	movs	r2, #36	; 0x24
 80111d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f022 0201 	bic.w	r2, r2, #1
 80111e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f8c0 	bl	801136c <UART_SetConfig>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d101      	bne.n	80111f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80111f2:	2301      	movs	r3, #1
 80111f4:	e022      	b.n	801123c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d002      	beq.n	8011204 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 fae2 	bl	80117c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	685a      	ldr	r2, [r3, #4]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	689a      	ldr	r2, [r3, #8]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f042 0201 	orr.w	r2, r2, #1
 8011232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 fb69 	bl	801190c <UART_CheckIdleState>
 801123a:	4603      	mov	r3, r0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b08a      	sub	sp, #40	; 0x28
 8011248:	af02      	add	r7, sp, #8
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	603b      	str	r3, [r7, #0]
 8011250:	4613      	mov	r3, r2
 8011252:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011258:	2b20      	cmp	r3, #32
 801125a:	f040 8082 	bne.w	8011362 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <HAL_UART_Transmit+0x26>
 8011264:	88fb      	ldrh	r3, [r7, #6]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d101      	bne.n	801126e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	e07a      	b.n	8011364 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011274:	2b01      	cmp	r3, #1
 8011276:	d101      	bne.n	801127c <HAL_UART_Transmit+0x38>
 8011278:	2302      	movs	r3, #2
 801127a:	e073      	b.n	8011364 <HAL_UART_Transmit+0x120>
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2201      	movs	r2, #1
 8011280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2200      	movs	r2, #0
 8011288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2221      	movs	r2, #33	; 0x21
 8011290:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011292:	f7fb f91d 	bl	800c4d0 <HAL_GetTick>
 8011296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	88fa      	ldrh	r2, [r7, #6]
 801129c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	88fa      	ldrh	r2, [r7, #6]
 80112a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112b0:	d108      	bne.n	80112c4 <HAL_UART_Transmit+0x80>
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d104      	bne.n	80112c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	61bb      	str	r3, [r7, #24]
 80112c2:	e003      	b.n	80112cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80112c8:	2300      	movs	r3, #0
 80112ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80112d4:	e02d      	b.n	8011332 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	2200      	movs	r2, #0
 80112de:	2180      	movs	r1, #128	; 0x80
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 fb5c 	bl	801199e <UART_WaitOnFlagUntilTimeout>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d001      	beq.n	80112f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80112ec:	2303      	movs	r3, #3
 80112ee:	e039      	b.n	8011364 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10b      	bne.n	801130e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	881a      	ldrh	r2, [r3, #0]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011302:	b292      	uxth	r2, r2
 8011304:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	3302      	adds	r3, #2
 801130a:	61bb      	str	r3, [r7, #24]
 801130c:	e008      	b.n	8011320 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	781a      	ldrb	r2, [r3, #0]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	b292      	uxth	r2, r2
 8011318:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	3301      	adds	r3, #1
 801131e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011326:	b29b      	uxth	r3, r3
 8011328:	3b01      	subs	r3, #1
 801132a:	b29a      	uxth	r2, r3
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011338:	b29b      	uxth	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1cb      	bne.n	80112d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2200      	movs	r2, #0
 8011346:	2140      	movs	r1, #64	; 0x40
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f000 fb28 	bl	801199e <UART_WaitOnFlagUntilTimeout>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8011354:	2303      	movs	r3, #3
 8011356:	e005      	b.n	8011364 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2220      	movs	r2, #32
 801135c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801135e:	2300      	movs	r3, #0
 8011360:	e000      	b.n	8011364 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8011362:	2302      	movs	r3, #2
  }
}
 8011364:	4618      	mov	r0, r3
 8011366:	3720      	adds	r7, #32
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801136c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011370:	b08a      	sub	sp, #40	; 0x28
 8011372:	af00      	add	r7, sp, #0
 8011374:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011376:	2300      	movs	r3, #0
 8011378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	689a      	ldr	r2, [r3, #8]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	431a      	orrs	r2, r3
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	695b      	ldr	r3, [r3, #20]
 801138a:	431a      	orrs	r2, r3
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	4313      	orrs	r3, r2
 8011392:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	4bb4      	ldr	r3, [pc, #720]	; (801166c <UART_SetConfig+0x300>)
 801139c:	4013      	ands	r3, r2
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	6812      	ldr	r2, [r2, #0]
 80113a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113a4:	430b      	orrs	r3, r1
 80113a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	68da      	ldr	r2, [r3, #12]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	430a      	orrs	r2, r1
 80113bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	699b      	ldr	r3, [r3, #24]
 80113c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4aa9      	ldr	r2, [pc, #676]	; (8011670 <UART_SetConfig+0x304>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d004      	beq.n	80113d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6a1b      	ldr	r3, [r3, #32]
 80113d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113d4:	4313      	orrs	r3, r2
 80113d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e8:	430a      	orrs	r2, r1
 80113ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4aa0      	ldr	r2, [pc, #640]	; (8011674 <UART_SetConfig+0x308>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d126      	bne.n	8011444 <UART_SetConfig+0xd8>
 80113f6:	4ba0      	ldr	r3, [pc, #640]	; (8011678 <UART_SetConfig+0x30c>)
 80113f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113fc:	f003 0303 	and.w	r3, r3, #3
 8011400:	2b03      	cmp	r3, #3
 8011402:	d81b      	bhi.n	801143c <UART_SetConfig+0xd0>
 8011404:	a201      	add	r2, pc, #4	; (adr r2, 801140c <UART_SetConfig+0xa0>)
 8011406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140a:	bf00      	nop
 801140c:	0801141d 	.word	0x0801141d
 8011410:	0801142d 	.word	0x0801142d
 8011414:	08011425 	.word	0x08011425
 8011418:	08011435 	.word	0x08011435
 801141c:	2301      	movs	r3, #1
 801141e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011422:	e080      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011424:	2302      	movs	r3, #2
 8011426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801142a:	e07c      	b.n	8011526 <UART_SetConfig+0x1ba>
 801142c:	2304      	movs	r3, #4
 801142e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011432:	e078      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011434:	2308      	movs	r3, #8
 8011436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801143a:	e074      	b.n	8011526 <UART_SetConfig+0x1ba>
 801143c:	2310      	movs	r3, #16
 801143e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011442:	e070      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4a8c      	ldr	r2, [pc, #560]	; (801167c <UART_SetConfig+0x310>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d138      	bne.n	80114c0 <UART_SetConfig+0x154>
 801144e:	4b8a      	ldr	r3, [pc, #552]	; (8011678 <UART_SetConfig+0x30c>)
 8011450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011454:	f003 030c 	and.w	r3, r3, #12
 8011458:	2b0c      	cmp	r3, #12
 801145a:	d82d      	bhi.n	80114b8 <UART_SetConfig+0x14c>
 801145c:	a201      	add	r2, pc, #4	; (adr r2, 8011464 <UART_SetConfig+0xf8>)
 801145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011462:	bf00      	nop
 8011464:	08011499 	.word	0x08011499
 8011468:	080114b9 	.word	0x080114b9
 801146c:	080114b9 	.word	0x080114b9
 8011470:	080114b9 	.word	0x080114b9
 8011474:	080114a9 	.word	0x080114a9
 8011478:	080114b9 	.word	0x080114b9
 801147c:	080114b9 	.word	0x080114b9
 8011480:	080114b9 	.word	0x080114b9
 8011484:	080114a1 	.word	0x080114a1
 8011488:	080114b9 	.word	0x080114b9
 801148c:	080114b9 	.word	0x080114b9
 8011490:	080114b9 	.word	0x080114b9
 8011494:	080114b1 	.word	0x080114b1
 8011498:	2300      	movs	r3, #0
 801149a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801149e:	e042      	b.n	8011526 <UART_SetConfig+0x1ba>
 80114a0:	2302      	movs	r3, #2
 80114a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80114a6:	e03e      	b.n	8011526 <UART_SetConfig+0x1ba>
 80114a8:	2304      	movs	r3, #4
 80114aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80114ae:	e03a      	b.n	8011526 <UART_SetConfig+0x1ba>
 80114b0:	2308      	movs	r3, #8
 80114b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80114b6:	e036      	b.n	8011526 <UART_SetConfig+0x1ba>
 80114b8:	2310      	movs	r3, #16
 80114ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80114be:	e032      	b.n	8011526 <UART_SetConfig+0x1ba>
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a6a      	ldr	r2, [pc, #424]	; (8011670 <UART_SetConfig+0x304>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d12a      	bne.n	8011520 <UART_SetConfig+0x1b4>
 80114ca:	4b6b      	ldr	r3, [pc, #428]	; (8011678 <UART_SetConfig+0x30c>)
 80114cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80114d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114d8:	d01a      	beq.n	8011510 <UART_SetConfig+0x1a4>
 80114da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80114de:	d81b      	bhi.n	8011518 <UART_SetConfig+0x1ac>
 80114e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114e4:	d00c      	beq.n	8011500 <UART_SetConfig+0x194>
 80114e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114ea:	d815      	bhi.n	8011518 <UART_SetConfig+0x1ac>
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d003      	beq.n	80114f8 <UART_SetConfig+0x18c>
 80114f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114f4:	d008      	beq.n	8011508 <UART_SetConfig+0x19c>
 80114f6:	e00f      	b.n	8011518 <UART_SetConfig+0x1ac>
 80114f8:	2300      	movs	r3, #0
 80114fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80114fe:	e012      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011500:	2302      	movs	r3, #2
 8011502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011506:	e00e      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011508:	2304      	movs	r3, #4
 801150a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801150e:	e00a      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011510:	2308      	movs	r3, #8
 8011512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011516:	e006      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011518:	2310      	movs	r3, #16
 801151a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801151e:	e002      	b.n	8011526 <UART_SetConfig+0x1ba>
 8011520:	2310      	movs	r3, #16
 8011522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a51      	ldr	r2, [pc, #324]	; (8011670 <UART_SetConfig+0x304>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d17a      	bne.n	8011626 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011534:	2b08      	cmp	r3, #8
 8011536:	d824      	bhi.n	8011582 <UART_SetConfig+0x216>
 8011538:	a201      	add	r2, pc, #4	; (adr r2, 8011540 <UART_SetConfig+0x1d4>)
 801153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153e:	bf00      	nop
 8011540:	08011565 	.word	0x08011565
 8011544:	08011583 	.word	0x08011583
 8011548:	0801156d 	.word	0x0801156d
 801154c:	08011583 	.word	0x08011583
 8011550:	08011573 	.word	0x08011573
 8011554:	08011583 	.word	0x08011583
 8011558:	08011583 	.word	0x08011583
 801155c:	08011583 	.word	0x08011583
 8011560:	0801157b 	.word	0x0801157b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011564:	f7fe f9dc 	bl	800f920 <HAL_RCC_GetPCLK1Freq>
 8011568:	61f8      	str	r0, [r7, #28]
        break;
 801156a:	e010      	b.n	801158e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801156c:	4b44      	ldr	r3, [pc, #272]	; (8011680 <UART_SetConfig+0x314>)
 801156e:	61fb      	str	r3, [r7, #28]
        break;
 8011570:	e00d      	b.n	801158e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011572:	f7fe f93d 	bl	800f7f0 <HAL_RCC_GetSysClockFreq>
 8011576:	61f8      	str	r0, [r7, #28]
        break;
 8011578:	e009      	b.n	801158e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801157a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801157e:	61fb      	str	r3, [r7, #28]
        break;
 8011580:	e005      	b.n	801158e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8011582:	2300      	movs	r3, #0
 8011584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011586:	2301      	movs	r3, #1
 8011588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 801158c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f000 8109 	beq.w	80117a8 <UART_SetConfig+0x43c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	4613      	mov	r3, r2
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	4413      	add	r3, r2
 80115a0:	69fa      	ldr	r2, [r7, #28]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d305      	bcc.n	80115b2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80115ac:	69fa      	ldr	r2, [r7, #28]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d903      	bls.n	80115ba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80115b2:	2301      	movs	r3, #1
 80115b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80115b8:	e0f6      	b.n	80117a8 <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	2200      	movs	r2, #0
 80115be:	461c      	mov	r4, r3
 80115c0:	4615      	mov	r5, r2
 80115c2:	f04f 0200 	mov.w	r2, #0
 80115c6:	f04f 0300 	mov.w	r3, #0
 80115ca:	022b      	lsls	r3, r5, #8
 80115cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80115d0:	0222      	lsls	r2, r4, #8
 80115d2:	68f9      	ldr	r1, [r7, #12]
 80115d4:	6849      	ldr	r1, [r1, #4]
 80115d6:	0849      	lsrs	r1, r1, #1
 80115d8:	2000      	movs	r0, #0
 80115da:	4688      	mov	r8, r1
 80115dc:	4681      	mov	r9, r0
 80115de:	eb12 0a08 	adds.w	sl, r2, r8
 80115e2:	eb43 0b09 	adc.w	fp, r3, r9
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	2200      	movs	r2, #0
 80115ec:	603b      	str	r3, [r7, #0]
 80115ee:	607a      	str	r2, [r7, #4]
 80115f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115f4:	4650      	mov	r0, sl
 80115f6:	4659      	mov	r1, fp
 80115f8:	f7ef fb46 	bl	8000c88 <__aeabi_uldivmod>
 80115fc:	4602      	mov	r2, r0
 80115fe:	460b      	mov	r3, r1
 8011600:	4613      	mov	r3, r2
 8011602:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801160a:	d308      	bcc.n	801161e <UART_SetConfig+0x2b2>
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011612:	d204      	bcs.n	801161e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	69ba      	ldr	r2, [r7, #24]
 801161a:	60da      	str	r2, [r3, #12]
 801161c:	e0c4      	b.n	80117a8 <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 801161e:	2301      	movs	r3, #1
 8011620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011624:	e0c0      	b.n	80117a8 <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	69db      	ldr	r3, [r3, #28]
 801162a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801162e:	d16b      	bne.n	8011708 <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8011630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011634:	2b08      	cmp	r3, #8
 8011636:	d834      	bhi.n	80116a2 <UART_SetConfig+0x336>
 8011638:	a201      	add	r2, pc, #4	; (adr r2, 8011640 <UART_SetConfig+0x2d4>)
 801163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163e:	bf00      	nop
 8011640:	08011665 	.word	0x08011665
 8011644:	08011685 	.word	0x08011685
 8011648:	0801168d 	.word	0x0801168d
 801164c:	080116a3 	.word	0x080116a3
 8011650:	08011693 	.word	0x08011693
 8011654:	080116a3 	.word	0x080116a3
 8011658:	080116a3 	.word	0x080116a3
 801165c:	080116a3 	.word	0x080116a3
 8011660:	0801169b 	.word	0x0801169b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011664:	f7fe f95c 	bl	800f920 <HAL_RCC_GetPCLK1Freq>
 8011668:	61f8      	str	r0, [r7, #28]
        break;
 801166a:	e020      	b.n	80116ae <UART_SetConfig+0x342>
 801166c:	efff69f3 	.word	0xefff69f3
 8011670:	40008000 	.word	0x40008000
 8011674:	40013800 	.word	0x40013800
 8011678:	40021000 	.word	0x40021000
 801167c:	40004400 	.word	0x40004400
 8011680:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011684:	f7fe f962 	bl	800f94c <HAL_RCC_GetPCLK2Freq>
 8011688:	61f8      	str	r0, [r7, #28]
        break;
 801168a:	e010      	b.n	80116ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801168c:	4b4d      	ldr	r3, [pc, #308]	; (80117c4 <UART_SetConfig+0x458>)
 801168e:	61fb      	str	r3, [r7, #28]
        break;
 8011690:	e00d      	b.n	80116ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011692:	f7fe f8ad 	bl	800f7f0 <HAL_RCC_GetSysClockFreq>
 8011696:	61f8      	str	r0, [r7, #28]
        break;
 8011698:	e009      	b.n	80116ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801169a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801169e:	61fb      	str	r3, [r7, #28]
        break;
 80116a0:	e005      	b.n	80116ae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80116a2:	2300      	movs	r3, #0
 80116a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80116a6:	2301      	movs	r3, #1
 80116a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80116ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d079      	beq.n	80117a8 <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	005a      	lsls	r2, r3, #1
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	085b      	lsrs	r3, r3, #1
 80116be:	441a      	add	r2, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	2b0f      	cmp	r3, #15
 80116d0:	d916      	bls.n	8011700 <UART_SetConfig+0x394>
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116d8:	d212      	bcs.n	8011700 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	f023 030f 	bic.w	r3, r3, #15
 80116e2:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	085b      	lsrs	r3, r3, #1
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	f003 0307 	and.w	r3, r3, #7
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	8afb      	ldrh	r3, [r7, #22]
 80116f2:	4313      	orrs	r3, r2
 80116f4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	8afa      	ldrh	r2, [r7, #22]
 80116fc:	60da      	str	r2, [r3, #12]
 80116fe:	e053      	b.n	80117a8 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8011706:	e04f      	b.n	80117a8 <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801170c:	2b08      	cmp	r3, #8
 801170e:	d828      	bhi.n	8011762 <UART_SetConfig+0x3f6>
 8011710:	a201      	add	r2, pc, #4	; (adr r2, 8011718 <UART_SetConfig+0x3ac>)
 8011712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011716:	bf00      	nop
 8011718:	0801173d 	.word	0x0801173d
 801171c:	08011745 	.word	0x08011745
 8011720:	0801174d 	.word	0x0801174d
 8011724:	08011763 	.word	0x08011763
 8011728:	08011753 	.word	0x08011753
 801172c:	08011763 	.word	0x08011763
 8011730:	08011763 	.word	0x08011763
 8011734:	08011763 	.word	0x08011763
 8011738:	0801175b 	.word	0x0801175b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801173c:	f7fe f8f0 	bl	800f920 <HAL_RCC_GetPCLK1Freq>
 8011740:	61f8      	str	r0, [r7, #28]
        break;
 8011742:	e014      	b.n	801176e <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011744:	f7fe f902 	bl	800f94c <HAL_RCC_GetPCLK2Freq>
 8011748:	61f8      	str	r0, [r7, #28]
        break;
 801174a:	e010      	b.n	801176e <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801174c:	4b1d      	ldr	r3, [pc, #116]	; (80117c4 <UART_SetConfig+0x458>)
 801174e:	61fb      	str	r3, [r7, #28]
        break;
 8011750:	e00d      	b.n	801176e <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011752:	f7fe f84d 	bl	800f7f0 <HAL_RCC_GetSysClockFreq>
 8011756:	61f8      	str	r0, [r7, #28]
        break;
 8011758:	e009      	b.n	801176e <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801175a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801175e:	61fb      	str	r3, [r7, #28]
        break;
 8011760:	e005      	b.n	801176e <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8011762:	2300      	movs	r3, #0
 8011764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 801176c:	bf00      	nop
    }

    if (pclk != 0U)
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d019      	beq.n	80117a8 <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	085a      	lsrs	r2, r3, #1
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	441a      	add	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	fbb2 f3f3 	udiv	r3, r2, r3
 8011786:	b29b      	uxth	r3, r3
 8011788:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	2b0f      	cmp	r3, #15
 801178e:	d908      	bls.n	80117a2 <UART_SetConfig+0x436>
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011796:	d204      	bcs.n	80117a2 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	60da      	str	r2, [r3, #12]
 80117a0:	e002      	b.n	80117a8 <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 80117a2:	2301      	movs	r3, #1
 80117a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2200      	movs	r2, #0
 80117ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80117b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3728      	adds	r7, #40	; 0x28
 80117bc:	46bd      	mov	sp, r7
 80117be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117c2:	bf00      	nop
 80117c4:	00f42400 	.word	0x00f42400

080117c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d4:	f003 0301 	and.w	r3, r3, #1
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00a      	beq.n	80117f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	430a      	orrs	r2, r1
 80117f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f6:	f003 0302 	and.w	r3, r3, #2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00a      	beq.n	8011814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	430a      	orrs	r2, r1
 8011812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011818:	f003 0304 	and.w	r3, r3, #4
 801181c:	2b00      	cmp	r3, #0
 801181e:	d00a      	beq.n	8011836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	430a      	orrs	r2, r1
 8011834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183a:	f003 0308 	and.w	r3, r3, #8
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00a      	beq.n	8011858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	430a      	orrs	r2, r1
 8011856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185c:	f003 0310 	and.w	r3, r3, #16
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00a      	beq.n	801187a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	430a      	orrs	r2, r1
 8011878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187e:	f003 0320 	and.w	r3, r3, #32
 8011882:	2b00      	cmp	r3, #0
 8011884:	d00a      	beq.n	801189c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	430a      	orrs	r2, r1
 801189a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d01a      	beq.n	80118de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	430a      	orrs	r2, r1
 80118bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118c6:	d10a      	bne.n	80118de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	430a      	orrs	r2, r1
 80118dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00a      	beq.n	8011900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	430a      	orrs	r2, r1
 80118fe:	605a      	str	r2, [r3, #4]
  }
}
 8011900:	bf00      	nop
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b086      	sub	sp, #24
 8011910:	af02      	add	r7, sp, #8
 8011912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2200      	movs	r2, #0
 8011918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801191c:	f7fa fdd8 	bl	800c4d0 <HAL_GetTick>
 8011920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f003 0308 	and.w	r3, r3, #8
 801192c:	2b08      	cmp	r3, #8
 801192e:	d10e      	bne.n	801194e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f82d 	bl	801199e <UART_WaitOnFlagUntilTimeout>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d001      	beq.n	801194e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801194a:	2303      	movs	r3, #3
 801194c:	e023      	b.n	8011996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f003 0304 	and.w	r3, r3, #4
 8011958:	2b04      	cmp	r3, #4
 801195a:	d10e      	bne.n	801197a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801195c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f817 	bl	801199e <UART_WaitOnFlagUntilTimeout>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011976:	2303      	movs	r3, #3
 8011978:	e00d      	b.n	8011996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2220      	movs	r2, #32
 801197e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2220      	movs	r2, #32
 8011984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2200      	movs	r2, #0
 801198a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	60f8      	str	r0, [r7, #12]
 80119a6:	60b9      	str	r1, [r7, #8]
 80119a8:	603b      	str	r3, [r7, #0]
 80119aa:	4613      	mov	r3, r2
 80119ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119ae:	e05e      	b.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b6:	d05a      	beq.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119b8:	f7fa fd8a 	bl	800c4d0 <HAL_GetTick>
 80119bc:	4602      	mov	r2, r0
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	69ba      	ldr	r2, [r7, #24]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d302      	bcc.n	80119ce <UART_WaitOnFlagUntilTimeout+0x30>
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d11b      	bne.n	8011a06 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80119dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	689a      	ldr	r2, [r3, #8]
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f022 0201 	bic.w	r2, r2, #1
 80119ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2220      	movs	r2, #32
 80119f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2220      	movs	r2, #32
 80119f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2200      	movs	r2, #0
 80119fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8011a02:	2303      	movs	r3, #3
 8011a04:	e043      	b.n	8011a8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f003 0304 	and.w	r3, r3, #4
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d02c      	beq.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	69db      	ldr	r3, [r3, #28]
 8011a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a22:	d124      	bne.n	8011a6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a2c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011a3c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	689a      	ldr	r2, [r3, #8]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f022 0201 	bic.w	r2, r2, #1
 8011a4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2220      	movs	r2, #32
 8011a52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2220      	movs	r2, #32
 8011a58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2220      	movs	r2, #32
 8011a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2200      	movs	r2, #0
 8011a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	e00f      	b.n	8011a8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	69da      	ldr	r2, [r3, #28]
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	4013      	ands	r3, r2
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	bf0c      	ite	eq
 8011a7e:	2301      	moveq	r3, #1
 8011a80:	2300      	movne	r3, #0
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	461a      	mov	r2, r3
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d091      	beq.n	80119b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <__errno>:
 8011a98:	4b01      	ldr	r3, [pc, #4]	; (8011aa0 <__errno+0x8>)
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	2000000c 	.word	0x2000000c

08011aa4 <__libc_init_array>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	4d0d      	ldr	r5, [pc, #52]	; (8011adc <__libc_init_array+0x38>)
 8011aa8:	4c0d      	ldr	r4, [pc, #52]	; (8011ae0 <__libc_init_array+0x3c>)
 8011aaa:	1b64      	subs	r4, r4, r5
 8011aac:	10a4      	asrs	r4, r4, #2
 8011aae:	2600      	movs	r6, #0
 8011ab0:	42a6      	cmp	r6, r4
 8011ab2:	d109      	bne.n	8011ac8 <__libc_init_array+0x24>
 8011ab4:	4d0b      	ldr	r5, [pc, #44]	; (8011ae4 <__libc_init_array+0x40>)
 8011ab6:	4c0c      	ldr	r4, [pc, #48]	; (8011ae8 <__libc_init_array+0x44>)
 8011ab8:	f003 f8bc 	bl	8014c34 <_init>
 8011abc:	1b64      	subs	r4, r4, r5
 8011abe:	10a4      	asrs	r4, r4, #2
 8011ac0:	2600      	movs	r6, #0
 8011ac2:	42a6      	cmp	r6, r4
 8011ac4:	d105      	bne.n	8011ad2 <__libc_init_array+0x2e>
 8011ac6:	bd70      	pop	{r4, r5, r6, pc}
 8011ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011acc:	4798      	blx	r3
 8011ace:	3601      	adds	r6, #1
 8011ad0:	e7ee      	b.n	8011ab0 <__libc_init_array+0xc>
 8011ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ad6:	4798      	blx	r3
 8011ad8:	3601      	adds	r6, #1
 8011ada:	e7f2      	b.n	8011ac2 <__libc_init_array+0x1e>
 8011adc:	08015244 	.word	0x08015244
 8011ae0:	08015244 	.word	0x08015244
 8011ae4:	08015244 	.word	0x08015244
 8011ae8:	08015248 	.word	0x08015248

08011aec <memcpy>:
 8011aec:	440a      	add	r2, r1
 8011aee:	4291      	cmp	r1, r2
 8011af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011af4:	d100      	bne.n	8011af8 <memcpy+0xc>
 8011af6:	4770      	bx	lr
 8011af8:	b510      	push	{r4, lr}
 8011afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b02:	4291      	cmp	r1, r2
 8011b04:	d1f9      	bne.n	8011afa <memcpy+0xe>
 8011b06:	bd10      	pop	{r4, pc}

08011b08 <memset>:
 8011b08:	4402      	add	r2, r0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d100      	bne.n	8011b12 <memset+0xa>
 8011b10:	4770      	bx	lr
 8011b12:	f803 1b01 	strb.w	r1, [r3], #1
 8011b16:	e7f9      	b.n	8011b0c <memset+0x4>

08011b18 <__cvt>:
 8011b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b1c:	ec55 4b10 	vmov	r4, r5, d0
 8011b20:	2d00      	cmp	r5, #0
 8011b22:	460e      	mov	r6, r1
 8011b24:	4619      	mov	r1, r3
 8011b26:	462b      	mov	r3, r5
 8011b28:	bfbb      	ittet	lt
 8011b2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011b2e:	461d      	movlt	r5, r3
 8011b30:	2300      	movge	r3, #0
 8011b32:	232d      	movlt	r3, #45	; 0x2d
 8011b34:	700b      	strb	r3, [r1, #0]
 8011b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011b3c:	4691      	mov	r9, r2
 8011b3e:	f023 0820 	bic.w	r8, r3, #32
 8011b42:	bfbc      	itt	lt
 8011b44:	4622      	movlt	r2, r4
 8011b46:	4614      	movlt	r4, r2
 8011b48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b4c:	d005      	beq.n	8011b5a <__cvt+0x42>
 8011b4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b52:	d100      	bne.n	8011b56 <__cvt+0x3e>
 8011b54:	3601      	adds	r6, #1
 8011b56:	2102      	movs	r1, #2
 8011b58:	e000      	b.n	8011b5c <__cvt+0x44>
 8011b5a:	2103      	movs	r1, #3
 8011b5c:	ab03      	add	r3, sp, #12
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	ab02      	add	r3, sp, #8
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	ec45 4b10 	vmov	d0, r4, r5
 8011b68:	4653      	mov	r3, sl
 8011b6a:	4632      	mov	r2, r6
 8011b6c:	f000 ff1c 	bl	80129a8 <_dtoa_r>
 8011b70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b74:	4607      	mov	r7, r0
 8011b76:	d102      	bne.n	8011b7e <__cvt+0x66>
 8011b78:	f019 0f01 	tst.w	r9, #1
 8011b7c:	d022      	beq.n	8011bc4 <__cvt+0xac>
 8011b7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b82:	eb07 0906 	add.w	r9, r7, r6
 8011b86:	d110      	bne.n	8011baa <__cvt+0x92>
 8011b88:	783b      	ldrb	r3, [r7, #0]
 8011b8a:	2b30      	cmp	r3, #48	; 0x30
 8011b8c:	d10a      	bne.n	8011ba4 <__cvt+0x8c>
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2300      	movs	r3, #0
 8011b92:	4620      	mov	r0, r4
 8011b94:	4629      	mov	r1, r5
 8011b96:	f7ee ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b9a:	b918      	cbnz	r0, 8011ba4 <__cvt+0x8c>
 8011b9c:	f1c6 0601 	rsb	r6, r6, #1
 8011ba0:	f8ca 6000 	str.w	r6, [sl]
 8011ba4:	f8da 3000 	ldr.w	r3, [sl]
 8011ba8:	4499      	add	r9, r3
 8011baa:	2200      	movs	r2, #0
 8011bac:	2300      	movs	r3, #0
 8011bae:	4620      	mov	r0, r4
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	f7ee ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bb6:	b108      	cbz	r0, 8011bbc <__cvt+0xa4>
 8011bb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8011bbc:	2230      	movs	r2, #48	; 0x30
 8011bbe:	9b03      	ldr	r3, [sp, #12]
 8011bc0:	454b      	cmp	r3, r9
 8011bc2:	d307      	bcc.n	8011bd4 <__cvt+0xbc>
 8011bc4:	9b03      	ldr	r3, [sp, #12]
 8011bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bc8:	1bdb      	subs	r3, r3, r7
 8011bca:	4638      	mov	r0, r7
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	b004      	add	sp, #16
 8011bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd4:	1c59      	adds	r1, r3, #1
 8011bd6:	9103      	str	r1, [sp, #12]
 8011bd8:	701a      	strb	r2, [r3, #0]
 8011bda:	e7f0      	b.n	8011bbe <__cvt+0xa6>

08011bdc <__exponent>:
 8011bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bde:	4603      	mov	r3, r0
 8011be0:	2900      	cmp	r1, #0
 8011be2:	bfb8      	it	lt
 8011be4:	4249      	neglt	r1, r1
 8011be6:	f803 2b02 	strb.w	r2, [r3], #2
 8011bea:	bfb4      	ite	lt
 8011bec:	222d      	movlt	r2, #45	; 0x2d
 8011bee:	222b      	movge	r2, #43	; 0x2b
 8011bf0:	2909      	cmp	r1, #9
 8011bf2:	7042      	strb	r2, [r0, #1]
 8011bf4:	dd2a      	ble.n	8011c4c <__exponent+0x70>
 8011bf6:	f10d 0407 	add.w	r4, sp, #7
 8011bfa:	46a4      	mov	ip, r4
 8011bfc:	270a      	movs	r7, #10
 8011bfe:	46a6      	mov	lr, r4
 8011c00:	460a      	mov	r2, r1
 8011c02:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c06:	fb07 1516 	mls	r5, r7, r6, r1
 8011c0a:	3530      	adds	r5, #48	; 0x30
 8011c0c:	2a63      	cmp	r2, #99	; 0x63
 8011c0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011c12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011c16:	4631      	mov	r1, r6
 8011c18:	dcf1      	bgt.n	8011bfe <__exponent+0x22>
 8011c1a:	3130      	adds	r1, #48	; 0x30
 8011c1c:	f1ae 0502 	sub.w	r5, lr, #2
 8011c20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011c24:	1c44      	adds	r4, r0, #1
 8011c26:	4629      	mov	r1, r5
 8011c28:	4561      	cmp	r1, ip
 8011c2a:	d30a      	bcc.n	8011c42 <__exponent+0x66>
 8011c2c:	f10d 0209 	add.w	r2, sp, #9
 8011c30:	eba2 020e 	sub.w	r2, r2, lr
 8011c34:	4565      	cmp	r5, ip
 8011c36:	bf88      	it	hi
 8011c38:	2200      	movhi	r2, #0
 8011c3a:	4413      	add	r3, r2
 8011c3c:	1a18      	subs	r0, r3, r0
 8011c3e:	b003      	add	sp, #12
 8011c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c4a:	e7ed      	b.n	8011c28 <__exponent+0x4c>
 8011c4c:	2330      	movs	r3, #48	; 0x30
 8011c4e:	3130      	adds	r1, #48	; 0x30
 8011c50:	7083      	strb	r3, [r0, #2]
 8011c52:	70c1      	strb	r1, [r0, #3]
 8011c54:	1d03      	adds	r3, r0, #4
 8011c56:	e7f1      	b.n	8011c3c <__exponent+0x60>

08011c58 <_printf_float>:
 8011c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5c:	ed2d 8b02 	vpush	{d8}
 8011c60:	b08d      	sub	sp, #52	; 0x34
 8011c62:	460c      	mov	r4, r1
 8011c64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011c68:	4616      	mov	r6, r2
 8011c6a:	461f      	mov	r7, r3
 8011c6c:	4605      	mov	r5, r0
 8011c6e:	f001 fe41 	bl	80138f4 <_localeconv_r>
 8011c72:	f8d0 a000 	ldr.w	sl, [r0]
 8011c76:	4650      	mov	r0, sl
 8011c78:	f7ee faaa 	bl	80001d0 <strlen>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	f8d8 3000 	ldr.w	r3, [r8]
 8011c88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011c8c:	3307      	adds	r3, #7
 8011c8e:	f023 0307 	bic.w	r3, r3, #7
 8011c92:	f103 0208 	add.w	r2, r3, #8
 8011c96:	f8c8 2000 	str.w	r2, [r8]
 8011c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011ca2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011ca6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011caa:	9307      	str	r3, [sp, #28]
 8011cac:	f8cd 8018 	str.w	r8, [sp, #24]
 8011cb0:	ee08 0a10 	vmov	s16, r0
 8011cb4:	4b9f      	ldr	r3, [pc, #636]	; (8011f34 <_printf_float+0x2dc>)
 8011cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011cba:	f04f 32ff 	mov.w	r2, #4294967295
 8011cbe:	f7ee ff35 	bl	8000b2c <__aeabi_dcmpun>
 8011cc2:	bb88      	cbnz	r0, 8011d28 <_printf_float+0xd0>
 8011cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011cc8:	4b9a      	ldr	r3, [pc, #616]	; (8011f34 <_printf_float+0x2dc>)
 8011cca:	f04f 32ff 	mov.w	r2, #4294967295
 8011cce:	f7ee ff0f 	bl	8000af0 <__aeabi_dcmple>
 8011cd2:	bb48      	cbnz	r0, 8011d28 <_printf_float+0xd0>
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	4640      	mov	r0, r8
 8011cda:	4649      	mov	r1, r9
 8011cdc:	f7ee fefe 	bl	8000adc <__aeabi_dcmplt>
 8011ce0:	b110      	cbz	r0, 8011ce8 <_printf_float+0x90>
 8011ce2:	232d      	movs	r3, #45	; 0x2d
 8011ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ce8:	4b93      	ldr	r3, [pc, #588]	; (8011f38 <_printf_float+0x2e0>)
 8011cea:	4894      	ldr	r0, [pc, #592]	; (8011f3c <_printf_float+0x2e4>)
 8011cec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011cf0:	bf94      	ite	ls
 8011cf2:	4698      	movls	r8, r3
 8011cf4:	4680      	movhi	r8, r0
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	6123      	str	r3, [r4, #16]
 8011cfa:	9b05      	ldr	r3, [sp, #20]
 8011cfc:	f023 0204 	bic.w	r2, r3, #4
 8011d00:	6022      	str	r2, [r4, #0]
 8011d02:	f04f 0900 	mov.w	r9, #0
 8011d06:	9700      	str	r7, [sp, #0]
 8011d08:	4633      	mov	r3, r6
 8011d0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f000 f9d8 	bl	80120c4 <_printf_common>
 8011d14:	3001      	adds	r0, #1
 8011d16:	f040 8090 	bne.w	8011e3a <_printf_float+0x1e2>
 8011d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1e:	b00d      	add	sp, #52	; 0x34
 8011d20:	ecbd 8b02 	vpop	{d8}
 8011d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d28:	4642      	mov	r2, r8
 8011d2a:	464b      	mov	r3, r9
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	4649      	mov	r1, r9
 8011d30:	f7ee fefc 	bl	8000b2c <__aeabi_dcmpun>
 8011d34:	b140      	cbz	r0, 8011d48 <_printf_float+0xf0>
 8011d36:	464b      	mov	r3, r9
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bfbc      	itt	lt
 8011d3c:	232d      	movlt	r3, #45	; 0x2d
 8011d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d42:	487f      	ldr	r0, [pc, #508]	; (8011f40 <_printf_float+0x2e8>)
 8011d44:	4b7f      	ldr	r3, [pc, #508]	; (8011f44 <_printf_float+0x2ec>)
 8011d46:	e7d1      	b.n	8011cec <_printf_float+0x94>
 8011d48:	6863      	ldr	r3, [r4, #4]
 8011d4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011d4e:	9206      	str	r2, [sp, #24]
 8011d50:	1c5a      	adds	r2, r3, #1
 8011d52:	d13f      	bne.n	8011dd4 <_printf_float+0x17c>
 8011d54:	2306      	movs	r3, #6
 8011d56:	6063      	str	r3, [r4, #4]
 8011d58:	9b05      	ldr	r3, [sp, #20]
 8011d5a:	6861      	ldr	r1, [r4, #4]
 8011d5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011d60:	2300      	movs	r3, #0
 8011d62:	9303      	str	r3, [sp, #12]
 8011d64:	ab0a      	add	r3, sp, #40	; 0x28
 8011d66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011d6a:	ab09      	add	r3, sp, #36	; 0x24
 8011d6c:	ec49 8b10 	vmov	d0, r8, r9
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	6022      	str	r2, [r4, #0]
 8011d74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f7ff fecd 	bl	8011b18 <__cvt>
 8011d7e:	9b06      	ldr	r3, [sp, #24]
 8011d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d82:	2b47      	cmp	r3, #71	; 0x47
 8011d84:	4680      	mov	r8, r0
 8011d86:	d108      	bne.n	8011d9a <_printf_float+0x142>
 8011d88:	1cc8      	adds	r0, r1, #3
 8011d8a:	db02      	blt.n	8011d92 <_printf_float+0x13a>
 8011d8c:	6863      	ldr	r3, [r4, #4]
 8011d8e:	4299      	cmp	r1, r3
 8011d90:	dd41      	ble.n	8011e16 <_printf_float+0x1be>
 8011d92:	f1ab 0b02 	sub.w	fp, fp, #2
 8011d96:	fa5f fb8b 	uxtb.w	fp, fp
 8011d9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d9e:	d820      	bhi.n	8011de2 <_printf_float+0x18a>
 8011da0:	3901      	subs	r1, #1
 8011da2:	465a      	mov	r2, fp
 8011da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011da8:	9109      	str	r1, [sp, #36]	; 0x24
 8011daa:	f7ff ff17 	bl	8011bdc <__exponent>
 8011dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011db0:	1813      	adds	r3, r2, r0
 8011db2:	2a01      	cmp	r2, #1
 8011db4:	4681      	mov	r9, r0
 8011db6:	6123      	str	r3, [r4, #16]
 8011db8:	dc02      	bgt.n	8011dc0 <_printf_float+0x168>
 8011dba:	6822      	ldr	r2, [r4, #0]
 8011dbc:	07d2      	lsls	r2, r2, #31
 8011dbe:	d501      	bpl.n	8011dc4 <_printf_float+0x16c>
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	6123      	str	r3, [r4, #16]
 8011dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d09c      	beq.n	8011d06 <_printf_float+0xae>
 8011dcc:	232d      	movs	r3, #45	; 0x2d
 8011dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dd2:	e798      	b.n	8011d06 <_printf_float+0xae>
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	2a47      	cmp	r2, #71	; 0x47
 8011dd8:	d1be      	bne.n	8011d58 <_printf_float+0x100>
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d1bc      	bne.n	8011d58 <_printf_float+0x100>
 8011dde:	2301      	movs	r3, #1
 8011de0:	e7b9      	b.n	8011d56 <_printf_float+0xfe>
 8011de2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011de6:	d118      	bne.n	8011e1a <_printf_float+0x1c2>
 8011de8:	2900      	cmp	r1, #0
 8011dea:	6863      	ldr	r3, [r4, #4]
 8011dec:	dd0b      	ble.n	8011e06 <_printf_float+0x1ae>
 8011dee:	6121      	str	r1, [r4, #16]
 8011df0:	b913      	cbnz	r3, 8011df8 <_printf_float+0x1a0>
 8011df2:	6822      	ldr	r2, [r4, #0]
 8011df4:	07d0      	lsls	r0, r2, #31
 8011df6:	d502      	bpl.n	8011dfe <_printf_float+0x1a6>
 8011df8:	3301      	adds	r3, #1
 8011dfa:	440b      	add	r3, r1
 8011dfc:	6123      	str	r3, [r4, #16]
 8011dfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011e00:	f04f 0900 	mov.w	r9, #0
 8011e04:	e7de      	b.n	8011dc4 <_printf_float+0x16c>
 8011e06:	b913      	cbnz	r3, 8011e0e <_printf_float+0x1b6>
 8011e08:	6822      	ldr	r2, [r4, #0]
 8011e0a:	07d2      	lsls	r2, r2, #31
 8011e0c:	d501      	bpl.n	8011e12 <_printf_float+0x1ba>
 8011e0e:	3302      	adds	r3, #2
 8011e10:	e7f4      	b.n	8011dfc <_printf_float+0x1a4>
 8011e12:	2301      	movs	r3, #1
 8011e14:	e7f2      	b.n	8011dfc <_printf_float+0x1a4>
 8011e16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e1c:	4299      	cmp	r1, r3
 8011e1e:	db05      	blt.n	8011e2c <_printf_float+0x1d4>
 8011e20:	6823      	ldr	r3, [r4, #0]
 8011e22:	6121      	str	r1, [r4, #16]
 8011e24:	07d8      	lsls	r0, r3, #31
 8011e26:	d5ea      	bpl.n	8011dfe <_printf_float+0x1a6>
 8011e28:	1c4b      	adds	r3, r1, #1
 8011e2a:	e7e7      	b.n	8011dfc <_printf_float+0x1a4>
 8011e2c:	2900      	cmp	r1, #0
 8011e2e:	bfd4      	ite	le
 8011e30:	f1c1 0202 	rsble	r2, r1, #2
 8011e34:	2201      	movgt	r2, #1
 8011e36:	4413      	add	r3, r2
 8011e38:	e7e0      	b.n	8011dfc <_printf_float+0x1a4>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	055a      	lsls	r2, r3, #21
 8011e3e:	d407      	bmi.n	8011e50 <_printf_float+0x1f8>
 8011e40:	6923      	ldr	r3, [r4, #16]
 8011e42:	4642      	mov	r2, r8
 8011e44:	4631      	mov	r1, r6
 8011e46:	4628      	mov	r0, r5
 8011e48:	47b8      	blx	r7
 8011e4a:	3001      	adds	r0, #1
 8011e4c:	d12c      	bne.n	8011ea8 <_printf_float+0x250>
 8011e4e:	e764      	b.n	8011d1a <_printf_float+0xc2>
 8011e50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e54:	f240 80e0 	bls.w	8012018 <_printf_float+0x3c0>
 8011e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	2300      	movs	r3, #0
 8011e60:	f7ee fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d034      	beq.n	8011ed2 <_printf_float+0x27a>
 8011e68:	4a37      	ldr	r2, [pc, #220]	; (8011f48 <_printf_float+0x2f0>)
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	4628      	mov	r0, r5
 8011e70:	47b8      	blx	r7
 8011e72:	3001      	adds	r0, #1
 8011e74:	f43f af51 	beq.w	8011d1a <_printf_float+0xc2>
 8011e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	db02      	blt.n	8011e86 <_printf_float+0x22e>
 8011e80:	6823      	ldr	r3, [r4, #0]
 8011e82:	07d8      	lsls	r0, r3, #31
 8011e84:	d510      	bpl.n	8011ea8 <_printf_float+0x250>
 8011e86:	ee18 3a10 	vmov	r3, s16
 8011e8a:	4652      	mov	r2, sl
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	4628      	mov	r0, r5
 8011e90:	47b8      	blx	r7
 8011e92:	3001      	adds	r0, #1
 8011e94:	f43f af41 	beq.w	8011d1a <_printf_float+0xc2>
 8011e98:	f04f 0800 	mov.w	r8, #0
 8011e9c:	f104 091a 	add.w	r9, r4, #26
 8011ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	4543      	cmp	r3, r8
 8011ea6:	dc09      	bgt.n	8011ebc <_printf_float+0x264>
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	079b      	lsls	r3, r3, #30
 8011eac:	f100 8105 	bmi.w	80120ba <_printf_float+0x462>
 8011eb0:	68e0      	ldr	r0, [r4, #12]
 8011eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011eb4:	4298      	cmp	r0, r3
 8011eb6:	bfb8      	it	lt
 8011eb8:	4618      	movlt	r0, r3
 8011eba:	e730      	b.n	8011d1e <_printf_float+0xc6>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	464a      	mov	r2, r9
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	47b8      	blx	r7
 8011ec6:	3001      	adds	r0, #1
 8011ec8:	f43f af27 	beq.w	8011d1a <_printf_float+0xc2>
 8011ecc:	f108 0801 	add.w	r8, r8, #1
 8011ed0:	e7e6      	b.n	8011ea0 <_printf_float+0x248>
 8011ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	dc39      	bgt.n	8011f4c <_printf_float+0x2f4>
 8011ed8:	4a1b      	ldr	r2, [pc, #108]	; (8011f48 <_printf_float+0x2f0>)
 8011eda:	2301      	movs	r3, #1
 8011edc:	4631      	mov	r1, r6
 8011ede:	4628      	mov	r0, r5
 8011ee0:	47b8      	blx	r7
 8011ee2:	3001      	adds	r0, #1
 8011ee4:	f43f af19 	beq.w	8011d1a <_printf_float+0xc2>
 8011ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011eec:	4313      	orrs	r3, r2
 8011eee:	d102      	bne.n	8011ef6 <_printf_float+0x29e>
 8011ef0:	6823      	ldr	r3, [r4, #0]
 8011ef2:	07d9      	lsls	r1, r3, #31
 8011ef4:	d5d8      	bpl.n	8011ea8 <_printf_float+0x250>
 8011ef6:	ee18 3a10 	vmov	r3, s16
 8011efa:	4652      	mov	r2, sl
 8011efc:	4631      	mov	r1, r6
 8011efe:	4628      	mov	r0, r5
 8011f00:	47b8      	blx	r7
 8011f02:	3001      	adds	r0, #1
 8011f04:	f43f af09 	beq.w	8011d1a <_printf_float+0xc2>
 8011f08:	f04f 0900 	mov.w	r9, #0
 8011f0c:	f104 0a1a 	add.w	sl, r4, #26
 8011f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f12:	425b      	negs	r3, r3
 8011f14:	454b      	cmp	r3, r9
 8011f16:	dc01      	bgt.n	8011f1c <_printf_float+0x2c4>
 8011f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f1a:	e792      	b.n	8011e42 <_printf_float+0x1ea>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	4652      	mov	r2, sl
 8011f20:	4631      	mov	r1, r6
 8011f22:	4628      	mov	r0, r5
 8011f24:	47b8      	blx	r7
 8011f26:	3001      	adds	r0, #1
 8011f28:	f43f aef7 	beq.w	8011d1a <_printf_float+0xc2>
 8011f2c:	f109 0901 	add.w	r9, r9, #1
 8011f30:	e7ee      	b.n	8011f10 <_printf_float+0x2b8>
 8011f32:	bf00      	nop
 8011f34:	7fefffff 	.word	0x7fefffff
 8011f38:	08014e64 	.word	0x08014e64
 8011f3c:	08014e68 	.word	0x08014e68
 8011f40:	08014e70 	.word	0x08014e70
 8011f44:	08014e6c 	.word	0x08014e6c
 8011f48:	08014e74 	.word	0x08014e74
 8011f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f50:	429a      	cmp	r2, r3
 8011f52:	bfa8      	it	ge
 8011f54:	461a      	movge	r2, r3
 8011f56:	2a00      	cmp	r2, #0
 8011f58:	4691      	mov	r9, r2
 8011f5a:	dc37      	bgt.n	8011fcc <_printf_float+0x374>
 8011f5c:	f04f 0b00 	mov.w	fp, #0
 8011f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f64:	f104 021a 	add.w	r2, r4, #26
 8011f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f6a:	9305      	str	r3, [sp, #20]
 8011f6c:	eba3 0309 	sub.w	r3, r3, r9
 8011f70:	455b      	cmp	r3, fp
 8011f72:	dc33      	bgt.n	8011fdc <_printf_float+0x384>
 8011f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	db3b      	blt.n	8011ff4 <_printf_float+0x39c>
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	07da      	lsls	r2, r3, #31
 8011f80:	d438      	bmi.n	8011ff4 <_printf_float+0x39c>
 8011f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f84:	9a05      	ldr	r2, [sp, #20]
 8011f86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f88:	1a9a      	subs	r2, r3, r2
 8011f8a:	eba3 0901 	sub.w	r9, r3, r1
 8011f8e:	4591      	cmp	r9, r2
 8011f90:	bfa8      	it	ge
 8011f92:	4691      	movge	r9, r2
 8011f94:	f1b9 0f00 	cmp.w	r9, #0
 8011f98:	dc35      	bgt.n	8012006 <_printf_float+0x3ae>
 8011f9a:	f04f 0800 	mov.w	r8, #0
 8011f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fa2:	f104 0a1a 	add.w	sl, r4, #26
 8011fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011faa:	1a9b      	subs	r3, r3, r2
 8011fac:	eba3 0309 	sub.w	r3, r3, r9
 8011fb0:	4543      	cmp	r3, r8
 8011fb2:	f77f af79 	ble.w	8011ea8 <_printf_float+0x250>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	4652      	mov	r2, sl
 8011fba:	4631      	mov	r1, r6
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	47b8      	blx	r7
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	f43f aeaa 	beq.w	8011d1a <_printf_float+0xc2>
 8011fc6:	f108 0801 	add.w	r8, r8, #1
 8011fca:	e7ec      	b.n	8011fa6 <_printf_float+0x34e>
 8011fcc:	4613      	mov	r3, r2
 8011fce:	4631      	mov	r1, r6
 8011fd0:	4642      	mov	r2, r8
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	47b8      	blx	r7
 8011fd6:	3001      	adds	r0, #1
 8011fd8:	d1c0      	bne.n	8011f5c <_printf_float+0x304>
 8011fda:	e69e      	b.n	8011d1a <_printf_float+0xc2>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	4631      	mov	r1, r6
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	9205      	str	r2, [sp, #20]
 8011fe4:	47b8      	blx	r7
 8011fe6:	3001      	adds	r0, #1
 8011fe8:	f43f ae97 	beq.w	8011d1a <_printf_float+0xc2>
 8011fec:	9a05      	ldr	r2, [sp, #20]
 8011fee:	f10b 0b01 	add.w	fp, fp, #1
 8011ff2:	e7b9      	b.n	8011f68 <_printf_float+0x310>
 8011ff4:	ee18 3a10 	vmov	r3, s16
 8011ff8:	4652      	mov	r2, sl
 8011ffa:	4631      	mov	r1, r6
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	47b8      	blx	r7
 8012000:	3001      	adds	r0, #1
 8012002:	d1be      	bne.n	8011f82 <_printf_float+0x32a>
 8012004:	e689      	b.n	8011d1a <_printf_float+0xc2>
 8012006:	9a05      	ldr	r2, [sp, #20]
 8012008:	464b      	mov	r3, r9
 801200a:	4442      	add	r2, r8
 801200c:	4631      	mov	r1, r6
 801200e:	4628      	mov	r0, r5
 8012010:	47b8      	blx	r7
 8012012:	3001      	adds	r0, #1
 8012014:	d1c1      	bne.n	8011f9a <_printf_float+0x342>
 8012016:	e680      	b.n	8011d1a <_printf_float+0xc2>
 8012018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801201a:	2a01      	cmp	r2, #1
 801201c:	dc01      	bgt.n	8012022 <_printf_float+0x3ca>
 801201e:	07db      	lsls	r3, r3, #31
 8012020:	d538      	bpl.n	8012094 <_printf_float+0x43c>
 8012022:	2301      	movs	r3, #1
 8012024:	4642      	mov	r2, r8
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	f43f ae74 	beq.w	8011d1a <_printf_float+0xc2>
 8012032:	ee18 3a10 	vmov	r3, s16
 8012036:	4652      	mov	r2, sl
 8012038:	4631      	mov	r1, r6
 801203a:	4628      	mov	r0, r5
 801203c:	47b8      	blx	r7
 801203e:	3001      	adds	r0, #1
 8012040:	f43f ae6b 	beq.w	8011d1a <_printf_float+0xc2>
 8012044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012048:	2200      	movs	r2, #0
 801204a:	2300      	movs	r3, #0
 801204c:	f7ee fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012050:	b9d8      	cbnz	r0, 801208a <_printf_float+0x432>
 8012052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012054:	f108 0201 	add.w	r2, r8, #1
 8012058:	3b01      	subs	r3, #1
 801205a:	4631      	mov	r1, r6
 801205c:	4628      	mov	r0, r5
 801205e:	47b8      	blx	r7
 8012060:	3001      	adds	r0, #1
 8012062:	d10e      	bne.n	8012082 <_printf_float+0x42a>
 8012064:	e659      	b.n	8011d1a <_printf_float+0xc2>
 8012066:	2301      	movs	r3, #1
 8012068:	4652      	mov	r2, sl
 801206a:	4631      	mov	r1, r6
 801206c:	4628      	mov	r0, r5
 801206e:	47b8      	blx	r7
 8012070:	3001      	adds	r0, #1
 8012072:	f43f ae52 	beq.w	8011d1a <_printf_float+0xc2>
 8012076:	f108 0801 	add.w	r8, r8, #1
 801207a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801207c:	3b01      	subs	r3, #1
 801207e:	4543      	cmp	r3, r8
 8012080:	dcf1      	bgt.n	8012066 <_printf_float+0x40e>
 8012082:	464b      	mov	r3, r9
 8012084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012088:	e6dc      	b.n	8011e44 <_printf_float+0x1ec>
 801208a:	f04f 0800 	mov.w	r8, #0
 801208e:	f104 0a1a 	add.w	sl, r4, #26
 8012092:	e7f2      	b.n	801207a <_printf_float+0x422>
 8012094:	2301      	movs	r3, #1
 8012096:	4642      	mov	r2, r8
 8012098:	e7df      	b.n	801205a <_printf_float+0x402>
 801209a:	2301      	movs	r3, #1
 801209c:	464a      	mov	r2, r9
 801209e:	4631      	mov	r1, r6
 80120a0:	4628      	mov	r0, r5
 80120a2:	47b8      	blx	r7
 80120a4:	3001      	adds	r0, #1
 80120a6:	f43f ae38 	beq.w	8011d1a <_printf_float+0xc2>
 80120aa:	f108 0801 	add.w	r8, r8, #1
 80120ae:	68e3      	ldr	r3, [r4, #12]
 80120b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80120b2:	1a5b      	subs	r3, r3, r1
 80120b4:	4543      	cmp	r3, r8
 80120b6:	dcf0      	bgt.n	801209a <_printf_float+0x442>
 80120b8:	e6fa      	b.n	8011eb0 <_printf_float+0x258>
 80120ba:	f04f 0800 	mov.w	r8, #0
 80120be:	f104 0919 	add.w	r9, r4, #25
 80120c2:	e7f4      	b.n	80120ae <_printf_float+0x456>

080120c4 <_printf_common>:
 80120c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c8:	4616      	mov	r6, r2
 80120ca:	4699      	mov	r9, r3
 80120cc:	688a      	ldr	r2, [r1, #8]
 80120ce:	690b      	ldr	r3, [r1, #16]
 80120d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120d4:	4293      	cmp	r3, r2
 80120d6:	bfb8      	it	lt
 80120d8:	4613      	movlt	r3, r2
 80120da:	6033      	str	r3, [r6, #0]
 80120dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120e0:	4607      	mov	r7, r0
 80120e2:	460c      	mov	r4, r1
 80120e4:	b10a      	cbz	r2, 80120ea <_printf_common+0x26>
 80120e6:	3301      	adds	r3, #1
 80120e8:	6033      	str	r3, [r6, #0]
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	0699      	lsls	r1, r3, #26
 80120ee:	bf42      	ittt	mi
 80120f0:	6833      	ldrmi	r3, [r6, #0]
 80120f2:	3302      	addmi	r3, #2
 80120f4:	6033      	strmi	r3, [r6, #0]
 80120f6:	6825      	ldr	r5, [r4, #0]
 80120f8:	f015 0506 	ands.w	r5, r5, #6
 80120fc:	d106      	bne.n	801210c <_printf_common+0x48>
 80120fe:	f104 0a19 	add.w	sl, r4, #25
 8012102:	68e3      	ldr	r3, [r4, #12]
 8012104:	6832      	ldr	r2, [r6, #0]
 8012106:	1a9b      	subs	r3, r3, r2
 8012108:	42ab      	cmp	r3, r5
 801210a:	dc26      	bgt.n	801215a <_printf_common+0x96>
 801210c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012110:	1e13      	subs	r3, r2, #0
 8012112:	6822      	ldr	r2, [r4, #0]
 8012114:	bf18      	it	ne
 8012116:	2301      	movne	r3, #1
 8012118:	0692      	lsls	r2, r2, #26
 801211a:	d42b      	bmi.n	8012174 <_printf_common+0xb0>
 801211c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012120:	4649      	mov	r1, r9
 8012122:	4638      	mov	r0, r7
 8012124:	47c0      	blx	r8
 8012126:	3001      	adds	r0, #1
 8012128:	d01e      	beq.n	8012168 <_printf_common+0xa4>
 801212a:	6823      	ldr	r3, [r4, #0]
 801212c:	68e5      	ldr	r5, [r4, #12]
 801212e:	6832      	ldr	r2, [r6, #0]
 8012130:	f003 0306 	and.w	r3, r3, #6
 8012134:	2b04      	cmp	r3, #4
 8012136:	bf08      	it	eq
 8012138:	1aad      	subeq	r5, r5, r2
 801213a:	68a3      	ldr	r3, [r4, #8]
 801213c:	6922      	ldr	r2, [r4, #16]
 801213e:	bf0c      	ite	eq
 8012140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012144:	2500      	movne	r5, #0
 8012146:	4293      	cmp	r3, r2
 8012148:	bfc4      	itt	gt
 801214a:	1a9b      	subgt	r3, r3, r2
 801214c:	18ed      	addgt	r5, r5, r3
 801214e:	2600      	movs	r6, #0
 8012150:	341a      	adds	r4, #26
 8012152:	42b5      	cmp	r5, r6
 8012154:	d11a      	bne.n	801218c <_printf_common+0xc8>
 8012156:	2000      	movs	r0, #0
 8012158:	e008      	b.n	801216c <_printf_common+0xa8>
 801215a:	2301      	movs	r3, #1
 801215c:	4652      	mov	r2, sl
 801215e:	4649      	mov	r1, r9
 8012160:	4638      	mov	r0, r7
 8012162:	47c0      	blx	r8
 8012164:	3001      	adds	r0, #1
 8012166:	d103      	bne.n	8012170 <_printf_common+0xac>
 8012168:	f04f 30ff 	mov.w	r0, #4294967295
 801216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012170:	3501      	adds	r5, #1
 8012172:	e7c6      	b.n	8012102 <_printf_common+0x3e>
 8012174:	18e1      	adds	r1, r4, r3
 8012176:	1c5a      	adds	r2, r3, #1
 8012178:	2030      	movs	r0, #48	; 0x30
 801217a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801217e:	4422      	add	r2, r4
 8012180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012188:	3302      	adds	r3, #2
 801218a:	e7c7      	b.n	801211c <_printf_common+0x58>
 801218c:	2301      	movs	r3, #1
 801218e:	4622      	mov	r2, r4
 8012190:	4649      	mov	r1, r9
 8012192:	4638      	mov	r0, r7
 8012194:	47c0      	blx	r8
 8012196:	3001      	adds	r0, #1
 8012198:	d0e6      	beq.n	8012168 <_printf_common+0xa4>
 801219a:	3601      	adds	r6, #1
 801219c:	e7d9      	b.n	8012152 <_printf_common+0x8e>
	...

080121a0 <_printf_i>:
 80121a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121a4:	7e0f      	ldrb	r7, [r1, #24]
 80121a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121a8:	2f78      	cmp	r7, #120	; 0x78
 80121aa:	4691      	mov	r9, r2
 80121ac:	4680      	mov	r8, r0
 80121ae:	460c      	mov	r4, r1
 80121b0:	469a      	mov	sl, r3
 80121b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121b6:	d807      	bhi.n	80121c8 <_printf_i+0x28>
 80121b8:	2f62      	cmp	r7, #98	; 0x62
 80121ba:	d80a      	bhi.n	80121d2 <_printf_i+0x32>
 80121bc:	2f00      	cmp	r7, #0
 80121be:	f000 80d8 	beq.w	8012372 <_printf_i+0x1d2>
 80121c2:	2f58      	cmp	r7, #88	; 0x58
 80121c4:	f000 80a3 	beq.w	801230e <_printf_i+0x16e>
 80121c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121d0:	e03a      	b.n	8012248 <_printf_i+0xa8>
 80121d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121d6:	2b15      	cmp	r3, #21
 80121d8:	d8f6      	bhi.n	80121c8 <_printf_i+0x28>
 80121da:	a101      	add	r1, pc, #4	; (adr r1, 80121e0 <_printf_i+0x40>)
 80121dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121e0:	08012239 	.word	0x08012239
 80121e4:	0801224d 	.word	0x0801224d
 80121e8:	080121c9 	.word	0x080121c9
 80121ec:	080121c9 	.word	0x080121c9
 80121f0:	080121c9 	.word	0x080121c9
 80121f4:	080121c9 	.word	0x080121c9
 80121f8:	0801224d 	.word	0x0801224d
 80121fc:	080121c9 	.word	0x080121c9
 8012200:	080121c9 	.word	0x080121c9
 8012204:	080121c9 	.word	0x080121c9
 8012208:	080121c9 	.word	0x080121c9
 801220c:	08012359 	.word	0x08012359
 8012210:	0801227d 	.word	0x0801227d
 8012214:	0801233b 	.word	0x0801233b
 8012218:	080121c9 	.word	0x080121c9
 801221c:	080121c9 	.word	0x080121c9
 8012220:	0801237b 	.word	0x0801237b
 8012224:	080121c9 	.word	0x080121c9
 8012228:	0801227d 	.word	0x0801227d
 801222c:	080121c9 	.word	0x080121c9
 8012230:	080121c9 	.word	0x080121c9
 8012234:	08012343 	.word	0x08012343
 8012238:	682b      	ldr	r3, [r5, #0]
 801223a:	1d1a      	adds	r2, r3, #4
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	602a      	str	r2, [r5, #0]
 8012240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012248:	2301      	movs	r3, #1
 801224a:	e0a3      	b.n	8012394 <_printf_i+0x1f4>
 801224c:	6820      	ldr	r0, [r4, #0]
 801224e:	6829      	ldr	r1, [r5, #0]
 8012250:	0606      	lsls	r6, r0, #24
 8012252:	f101 0304 	add.w	r3, r1, #4
 8012256:	d50a      	bpl.n	801226e <_printf_i+0xce>
 8012258:	680e      	ldr	r6, [r1, #0]
 801225a:	602b      	str	r3, [r5, #0]
 801225c:	2e00      	cmp	r6, #0
 801225e:	da03      	bge.n	8012268 <_printf_i+0xc8>
 8012260:	232d      	movs	r3, #45	; 0x2d
 8012262:	4276      	negs	r6, r6
 8012264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012268:	485e      	ldr	r0, [pc, #376]	; (80123e4 <_printf_i+0x244>)
 801226a:	230a      	movs	r3, #10
 801226c:	e019      	b.n	80122a2 <_printf_i+0x102>
 801226e:	680e      	ldr	r6, [r1, #0]
 8012270:	602b      	str	r3, [r5, #0]
 8012272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012276:	bf18      	it	ne
 8012278:	b236      	sxthne	r6, r6
 801227a:	e7ef      	b.n	801225c <_printf_i+0xbc>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	6820      	ldr	r0, [r4, #0]
 8012280:	1d19      	adds	r1, r3, #4
 8012282:	6029      	str	r1, [r5, #0]
 8012284:	0601      	lsls	r1, r0, #24
 8012286:	d501      	bpl.n	801228c <_printf_i+0xec>
 8012288:	681e      	ldr	r6, [r3, #0]
 801228a:	e002      	b.n	8012292 <_printf_i+0xf2>
 801228c:	0646      	lsls	r6, r0, #25
 801228e:	d5fb      	bpl.n	8012288 <_printf_i+0xe8>
 8012290:	881e      	ldrh	r6, [r3, #0]
 8012292:	4854      	ldr	r0, [pc, #336]	; (80123e4 <_printf_i+0x244>)
 8012294:	2f6f      	cmp	r7, #111	; 0x6f
 8012296:	bf0c      	ite	eq
 8012298:	2308      	moveq	r3, #8
 801229a:	230a      	movne	r3, #10
 801229c:	2100      	movs	r1, #0
 801229e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122a2:	6865      	ldr	r5, [r4, #4]
 80122a4:	60a5      	str	r5, [r4, #8]
 80122a6:	2d00      	cmp	r5, #0
 80122a8:	bfa2      	ittt	ge
 80122aa:	6821      	ldrge	r1, [r4, #0]
 80122ac:	f021 0104 	bicge.w	r1, r1, #4
 80122b0:	6021      	strge	r1, [r4, #0]
 80122b2:	b90e      	cbnz	r6, 80122b8 <_printf_i+0x118>
 80122b4:	2d00      	cmp	r5, #0
 80122b6:	d04d      	beq.n	8012354 <_printf_i+0x1b4>
 80122b8:	4615      	mov	r5, r2
 80122ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80122be:	fb03 6711 	mls	r7, r3, r1, r6
 80122c2:	5dc7      	ldrb	r7, [r0, r7]
 80122c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122c8:	4637      	mov	r7, r6
 80122ca:	42bb      	cmp	r3, r7
 80122cc:	460e      	mov	r6, r1
 80122ce:	d9f4      	bls.n	80122ba <_printf_i+0x11a>
 80122d0:	2b08      	cmp	r3, #8
 80122d2:	d10b      	bne.n	80122ec <_printf_i+0x14c>
 80122d4:	6823      	ldr	r3, [r4, #0]
 80122d6:	07de      	lsls	r6, r3, #31
 80122d8:	d508      	bpl.n	80122ec <_printf_i+0x14c>
 80122da:	6923      	ldr	r3, [r4, #16]
 80122dc:	6861      	ldr	r1, [r4, #4]
 80122de:	4299      	cmp	r1, r3
 80122e0:	bfde      	ittt	le
 80122e2:	2330      	movle	r3, #48	; 0x30
 80122e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80122ec:	1b52      	subs	r2, r2, r5
 80122ee:	6122      	str	r2, [r4, #16]
 80122f0:	f8cd a000 	str.w	sl, [sp]
 80122f4:	464b      	mov	r3, r9
 80122f6:	aa03      	add	r2, sp, #12
 80122f8:	4621      	mov	r1, r4
 80122fa:	4640      	mov	r0, r8
 80122fc:	f7ff fee2 	bl	80120c4 <_printf_common>
 8012300:	3001      	adds	r0, #1
 8012302:	d14c      	bne.n	801239e <_printf_i+0x1fe>
 8012304:	f04f 30ff 	mov.w	r0, #4294967295
 8012308:	b004      	add	sp, #16
 801230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801230e:	4835      	ldr	r0, [pc, #212]	; (80123e4 <_printf_i+0x244>)
 8012310:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012314:	6829      	ldr	r1, [r5, #0]
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	f851 6b04 	ldr.w	r6, [r1], #4
 801231c:	6029      	str	r1, [r5, #0]
 801231e:	061d      	lsls	r5, r3, #24
 8012320:	d514      	bpl.n	801234c <_printf_i+0x1ac>
 8012322:	07df      	lsls	r7, r3, #31
 8012324:	bf44      	itt	mi
 8012326:	f043 0320 	orrmi.w	r3, r3, #32
 801232a:	6023      	strmi	r3, [r4, #0]
 801232c:	b91e      	cbnz	r6, 8012336 <_printf_i+0x196>
 801232e:	6823      	ldr	r3, [r4, #0]
 8012330:	f023 0320 	bic.w	r3, r3, #32
 8012334:	6023      	str	r3, [r4, #0]
 8012336:	2310      	movs	r3, #16
 8012338:	e7b0      	b.n	801229c <_printf_i+0xfc>
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	f043 0320 	orr.w	r3, r3, #32
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	2378      	movs	r3, #120	; 0x78
 8012344:	4828      	ldr	r0, [pc, #160]	; (80123e8 <_printf_i+0x248>)
 8012346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801234a:	e7e3      	b.n	8012314 <_printf_i+0x174>
 801234c:	0659      	lsls	r1, r3, #25
 801234e:	bf48      	it	mi
 8012350:	b2b6      	uxthmi	r6, r6
 8012352:	e7e6      	b.n	8012322 <_printf_i+0x182>
 8012354:	4615      	mov	r5, r2
 8012356:	e7bb      	b.n	80122d0 <_printf_i+0x130>
 8012358:	682b      	ldr	r3, [r5, #0]
 801235a:	6826      	ldr	r6, [r4, #0]
 801235c:	6961      	ldr	r1, [r4, #20]
 801235e:	1d18      	adds	r0, r3, #4
 8012360:	6028      	str	r0, [r5, #0]
 8012362:	0635      	lsls	r5, r6, #24
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	d501      	bpl.n	801236c <_printf_i+0x1cc>
 8012368:	6019      	str	r1, [r3, #0]
 801236a:	e002      	b.n	8012372 <_printf_i+0x1d2>
 801236c:	0670      	lsls	r0, r6, #25
 801236e:	d5fb      	bpl.n	8012368 <_printf_i+0x1c8>
 8012370:	8019      	strh	r1, [r3, #0]
 8012372:	2300      	movs	r3, #0
 8012374:	6123      	str	r3, [r4, #16]
 8012376:	4615      	mov	r5, r2
 8012378:	e7ba      	b.n	80122f0 <_printf_i+0x150>
 801237a:	682b      	ldr	r3, [r5, #0]
 801237c:	1d1a      	adds	r2, r3, #4
 801237e:	602a      	str	r2, [r5, #0]
 8012380:	681d      	ldr	r5, [r3, #0]
 8012382:	6862      	ldr	r2, [r4, #4]
 8012384:	2100      	movs	r1, #0
 8012386:	4628      	mov	r0, r5
 8012388:	f7ed ff2a 	bl	80001e0 <memchr>
 801238c:	b108      	cbz	r0, 8012392 <_printf_i+0x1f2>
 801238e:	1b40      	subs	r0, r0, r5
 8012390:	6060      	str	r0, [r4, #4]
 8012392:	6863      	ldr	r3, [r4, #4]
 8012394:	6123      	str	r3, [r4, #16]
 8012396:	2300      	movs	r3, #0
 8012398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801239c:	e7a8      	b.n	80122f0 <_printf_i+0x150>
 801239e:	6923      	ldr	r3, [r4, #16]
 80123a0:	462a      	mov	r2, r5
 80123a2:	4649      	mov	r1, r9
 80123a4:	4640      	mov	r0, r8
 80123a6:	47d0      	blx	sl
 80123a8:	3001      	adds	r0, #1
 80123aa:	d0ab      	beq.n	8012304 <_printf_i+0x164>
 80123ac:	6823      	ldr	r3, [r4, #0]
 80123ae:	079b      	lsls	r3, r3, #30
 80123b0:	d413      	bmi.n	80123da <_printf_i+0x23a>
 80123b2:	68e0      	ldr	r0, [r4, #12]
 80123b4:	9b03      	ldr	r3, [sp, #12]
 80123b6:	4298      	cmp	r0, r3
 80123b8:	bfb8      	it	lt
 80123ba:	4618      	movlt	r0, r3
 80123bc:	e7a4      	b.n	8012308 <_printf_i+0x168>
 80123be:	2301      	movs	r3, #1
 80123c0:	4632      	mov	r2, r6
 80123c2:	4649      	mov	r1, r9
 80123c4:	4640      	mov	r0, r8
 80123c6:	47d0      	blx	sl
 80123c8:	3001      	adds	r0, #1
 80123ca:	d09b      	beq.n	8012304 <_printf_i+0x164>
 80123cc:	3501      	adds	r5, #1
 80123ce:	68e3      	ldr	r3, [r4, #12]
 80123d0:	9903      	ldr	r1, [sp, #12]
 80123d2:	1a5b      	subs	r3, r3, r1
 80123d4:	42ab      	cmp	r3, r5
 80123d6:	dcf2      	bgt.n	80123be <_printf_i+0x21e>
 80123d8:	e7eb      	b.n	80123b2 <_printf_i+0x212>
 80123da:	2500      	movs	r5, #0
 80123dc:	f104 0619 	add.w	r6, r4, #25
 80123e0:	e7f5      	b.n	80123ce <_printf_i+0x22e>
 80123e2:	bf00      	nop
 80123e4:	08014e76 	.word	0x08014e76
 80123e8:	08014e87 	.word	0x08014e87

080123ec <iprintf>:
 80123ec:	b40f      	push	{r0, r1, r2, r3}
 80123ee:	4b0a      	ldr	r3, [pc, #40]	; (8012418 <iprintf+0x2c>)
 80123f0:	b513      	push	{r0, r1, r4, lr}
 80123f2:	681c      	ldr	r4, [r3, #0]
 80123f4:	b124      	cbz	r4, 8012400 <iprintf+0x14>
 80123f6:	69a3      	ldr	r3, [r4, #24]
 80123f8:	b913      	cbnz	r3, 8012400 <iprintf+0x14>
 80123fa:	4620      	mov	r0, r4
 80123fc:	f001 f9dc 	bl	80137b8 <__sinit>
 8012400:	ab05      	add	r3, sp, #20
 8012402:	9a04      	ldr	r2, [sp, #16]
 8012404:	68a1      	ldr	r1, [r4, #8]
 8012406:	9301      	str	r3, [sp, #4]
 8012408:	4620      	mov	r0, r4
 801240a:	f002 f8e7 	bl	80145dc <_vfiprintf_r>
 801240e:	b002      	add	sp, #8
 8012410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012414:	b004      	add	sp, #16
 8012416:	4770      	bx	lr
 8012418:	2000000c 	.word	0x2000000c

0801241c <putchar>:
 801241c:	4b09      	ldr	r3, [pc, #36]	; (8012444 <putchar+0x28>)
 801241e:	b513      	push	{r0, r1, r4, lr}
 8012420:	681c      	ldr	r4, [r3, #0]
 8012422:	4601      	mov	r1, r0
 8012424:	b134      	cbz	r4, 8012434 <putchar+0x18>
 8012426:	69a3      	ldr	r3, [r4, #24]
 8012428:	b923      	cbnz	r3, 8012434 <putchar+0x18>
 801242a:	9001      	str	r0, [sp, #4]
 801242c:	4620      	mov	r0, r4
 801242e:	f001 f9c3 	bl	80137b8 <__sinit>
 8012432:	9901      	ldr	r1, [sp, #4]
 8012434:	68a2      	ldr	r2, [r4, #8]
 8012436:	4620      	mov	r0, r4
 8012438:	b002      	add	sp, #8
 801243a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801243e:	f002 b9fd 	b.w	801483c <_putc_r>
 8012442:	bf00      	nop
 8012444:	2000000c 	.word	0x2000000c

08012448 <_puts_r>:
 8012448:	b570      	push	{r4, r5, r6, lr}
 801244a:	460e      	mov	r6, r1
 801244c:	4605      	mov	r5, r0
 801244e:	b118      	cbz	r0, 8012458 <_puts_r+0x10>
 8012450:	6983      	ldr	r3, [r0, #24]
 8012452:	b90b      	cbnz	r3, 8012458 <_puts_r+0x10>
 8012454:	f001 f9b0 	bl	80137b8 <__sinit>
 8012458:	69ab      	ldr	r3, [r5, #24]
 801245a:	68ac      	ldr	r4, [r5, #8]
 801245c:	b913      	cbnz	r3, 8012464 <_puts_r+0x1c>
 801245e:	4628      	mov	r0, r5
 8012460:	f001 f9aa 	bl	80137b8 <__sinit>
 8012464:	4b2c      	ldr	r3, [pc, #176]	; (8012518 <_puts_r+0xd0>)
 8012466:	429c      	cmp	r4, r3
 8012468:	d120      	bne.n	80124ac <_puts_r+0x64>
 801246a:	686c      	ldr	r4, [r5, #4]
 801246c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801246e:	07db      	lsls	r3, r3, #31
 8012470:	d405      	bmi.n	801247e <_puts_r+0x36>
 8012472:	89a3      	ldrh	r3, [r4, #12]
 8012474:	0598      	lsls	r0, r3, #22
 8012476:	d402      	bmi.n	801247e <_puts_r+0x36>
 8012478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801247a:	f001 fa40 	bl	80138fe <__retarget_lock_acquire_recursive>
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	0719      	lsls	r1, r3, #28
 8012482:	d51d      	bpl.n	80124c0 <_puts_r+0x78>
 8012484:	6923      	ldr	r3, [r4, #16]
 8012486:	b1db      	cbz	r3, 80124c0 <_puts_r+0x78>
 8012488:	3e01      	subs	r6, #1
 801248a:	68a3      	ldr	r3, [r4, #8]
 801248c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012490:	3b01      	subs	r3, #1
 8012492:	60a3      	str	r3, [r4, #8]
 8012494:	bb39      	cbnz	r1, 80124e6 <_puts_r+0x9e>
 8012496:	2b00      	cmp	r3, #0
 8012498:	da38      	bge.n	801250c <_puts_r+0xc4>
 801249a:	4622      	mov	r2, r4
 801249c:	210a      	movs	r1, #10
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f936 	bl	8012710 <__swbuf_r>
 80124a4:	3001      	adds	r0, #1
 80124a6:	d011      	beq.n	80124cc <_puts_r+0x84>
 80124a8:	250a      	movs	r5, #10
 80124aa:	e011      	b.n	80124d0 <_puts_r+0x88>
 80124ac:	4b1b      	ldr	r3, [pc, #108]	; (801251c <_puts_r+0xd4>)
 80124ae:	429c      	cmp	r4, r3
 80124b0:	d101      	bne.n	80124b6 <_puts_r+0x6e>
 80124b2:	68ac      	ldr	r4, [r5, #8]
 80124b4:	e7da      	b.n	801246c <_puts_r+0x24>
 80124b6:	4b1a      	ldr	r3, [pc, #104]	; (8012520 <_puts_r+0xd8>)
 80124b8:	429c      	cmp	r4, r3
 80124ba:	bf08      	it	eq
 80124bc:	68ec      	ldreq	r4, [r5, #12]
 80124be:	e7d5      	b.n	801246c <_puts_r+0x24>
 80124c0:	4621      	mov	r1, r4
 80124c2:	4628      	mov	r0, r5
 80124c4:	f000 f976 	bl	80127b4 <__swsetup_r>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0dd      	beq.n	8012488 <_puts_r+0x40>
 80124cc:	f04f 35ff 	mov.w	r5, #4294967295
 80124d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124d2:	07da      	lsls	r2, r3, #31
 80124d4:	d405      	bmi.n	80124e2 <_puts_r+0x9a>
 80124d6:	89a3      	ldrh	r3, [r4, #12]
 80124d8:	059b      	lsls	r3, r3, #22
 80124da:	d402      	bmi.n	80124e2 <_puts_r+0x9a>
 80124dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124de:	f001 fa0f 	bl	8013900 <__retarget_lock_release_recursive>
 80124e2:	4628      	mov	r0, r5
 80124e4:	bd70      	pop	{r4, r5, r6, pc}
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	da04      	bge.n	80124f4 <_puts_r+0xac>
 80124ea:	69a2      	ldr	r2, [r4, #24]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	dc06      	bgt.n	80124fe <_puts_r+0xb6>
 80124f0:	290a      	cmp	r1, #10
 80124f2:	d004      	beq.n	80124fe <_puts_r+0xb6>
 80124f4:	6823      	ldr	r3, [r4, #0]
 80124f6:	1c5a      	adds	r2, r3, #1
 80124f8:	6022      	str	r2, [r4, #0]
 80124fa:	7019      	strb	r1, [r3, #0]
 80124fc:	e7c5      	b.n	801248a <_puts_r+0x42>
 80124fe:	4622      	mov	r2, r4
 8012500:	4628      	mov	r0, r5
 8012502:	f000 f905 	bl	8012710 <__swbuf_r>
 8012506:	3001      	adds	r0, #1
 8012508:	d1bf      	bne.n	801248a <_puts_r+0x42>
 801250a:	e7df      	b.n	80124cc <_puts_r+0x84>
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	250a      	movs	r5, #10
 8012510:	1c5a      	adds	r2, r3, #1
 8012512:	6022      	str	r2, [r4, #0]
 8012514:	701d      	strb	r5, [r3, #0]
 8012516:	e7db      	b.n	80124d0 <_puts_r+0x88>
 8012518:	08014f48 	.word	0x08014f48
 801251c:	08014f68 	.word	0x08014f68
 8012520:	08014f28 	.word	0x08014f28

08012524 <puts>:
 8012524:	4b02      	ldr	r3, [pc, #8]	; (8012530 <puts+0xc>)
 8012526:	4601      	mov	r1, r0
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f7ff bf8d 	b.w	8012448 <_puts_r>
 801252e:	bf00      	nop
 8012530:	2000000c 	.word	0x2000000c

08012534 <setbuf>:
 8012534:	2900      	cmp	r1, #0
 8012536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801253a:	bf0c      	ite	eq
 801253c:	2202      	moveq	r2, #2
 801253e:	2200      	movne	r2, #0
 8012540:	f000 b800 	b.w	8012544 <setvbuf>

08012544 <setvbuf>:
 8012544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012548:	461d      	mov	r5, r3
 801254a:	4b5d      	ldr	r3, [pc, #372]	; (80126c0 <setvbuf+0x17c>)
 801254c:	681f      	ldr	r7, [r3, #0]
 801254e:	4604      	mov	r4, r0
 8012550:	460e      	mov	r6, r1
 8012552:	4690      	mov	r8, r2
 8012554:	b127      	cbz	r7, 8012560 <setvbuf+0x1c>
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	b913      	cbnz	r3, 8012560 <setvbuf+0x1c>
 801255a:	4638      	mov	r0, r7
 801255c:	f001 f92c 	bl	80137b8 <__sinit>
 8012560:	4b58      	ldr	r3, [pc, #352]	; (80126c4 <setvbuf+0x180>)
 8012562:	429c      	cmp	r4, r3
 8012564:	d167      	bne.n	8012636 <setvbuf+0xf2>
 8012566:	687c      	ldr	r4, [r7, #4]
 8012568:	f1b8 0f02 	cmp.w	r8, #2
 801256c:	d006      	beq.n	801257c <setvbuf+0x38>
 801256e:	f1b8 0f01 	cmp.w	r8, #1
 8012572:	f200 809f 	bhi.w	80126b4 <setvbuf+0x170>
 8012576:	2d00      	cmp	r5, #0
 8012578:	f2c0 809c 	blt.w	80126b4 <setvbuf+0x170>
 801257c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801257e:	07db      	lsls	r3, r3, #31
 8012580:	d405      	bmi.n	801258e <setvbuf+0x4a>
 8012582:	89a3      	ldrh	r3, [r4, #12]
 8012584:	0598      	lsls	r0, r3, #22
 8012586:	d402      	bmi.n	801258e <setvbuf+0x4a>
 8012588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801258a:	f001 f9b8 	bl	80138fe <__retarget_lock_acquire_recursive>
 801258e:	4621      	mov	r1, r4
 8012590:	4638      	mov	r0, r7
 8012592:	f001 f87d 	bl	8013690 <_fflush_r>
 8012596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012598:	b141      	cbz	r1, 80125ac <setvbuf+0x68>
 801259a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801259e:	4299      	cmp	r1, r3
 80125a0:	d002      	beq.n	80125a8 <setvbuf+0x64>
 80125a2:	4638      	mov	r0, r7
 80125a4:	f001 fdb4 	bl	8014110 <_free_r>
 80125a8:	2300      	movs	r3, #0
 80125aa:	6363      	str	r3, [r4, #52]	; 0x34
 80125ac:	2300      	movs	r3, #0
 80125ae:	61a3      	str	r3, [r4, #24]
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	0619      	lsls	r1, r3, #24
 80125b6:	d503      	bpl.n	80125c0 <setvbuf+0x7c>
 80125b8:	6921      	ldr	r1, [r4, #16]
 80125ba:	4638      	mov	r0, r7
 80125bc:	f001 fda8 	bl	8014110 <_free_r>
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80125c6:	f023 0303 	bic.w	r3, r3, #3
 80125ca:	f1b8 0f02 	cmp.w	r8, #2
 80125ce:	81a3      	strh	r3, [r4, #12]
 80125d0:	d06c      	beq.n	80126ac <setvbuf+0x168>
 80125d2:	ab01      	add	r3, sp, #4
 80125d4:	466a      	mov	r2, sp
 80125d6:	4621      	mov	r1, r4
 80125d8:	4638      	mov	r0, r7
 80125da:	f001 f992 	bl	8013902 <__swhatbuf_r>
 80125de:	89a3      	ldrh	r3, [r4, #12]
 80125e0:	4318      	orrs	r0, r3
 80125e2:	81a0      	strh	r0, [r4, #12]
 80125e4:	2d00      	cmp	r5, #0
 80125e6:	d130      	bne.n	801264a <setvbuf+0x106>
 80125e8:	9d00      	ldr	r5, [sp, #0]
 80125ea:	4628      	mov	r0, r5
 80125ec:	f001 f9ee 	bl	80139cc <malloc>
 80125f0:	4606      	mov	r6, r0
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d155      	bne.n	80126a2 <setvbuf+0x15e>
 80125f6:	f8dd 9000 	ldr.w	r9, [sp]
 80125fa:	45a9      	cmp	r9, r5
 80125fc:	d14a      	bne.n	8012694 <setvbuf+0x150>
 80125fe:	f04f 35ff 	mov.w	r5, #4294967295
 8012602:	2200      	movs	r2, #0
 8012604:	60a2      	str	r2, [r4, #8]
 8012606:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801260a:	6022      	str	r2, [r4, #0]
 801260c:	6122      	str	r2, [r4, #16]
 801260e:	2201      	movs	r2, #1
 8012610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012614:	6162      	str	r2, [r4, #20]
 8012616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012618:	f043 0302 	orr.w	r3, r3, #2
 801261c:	07d2      	lsls	r2, r2, #31
 801261e:	81a3      	strh	r3, [r4, #12]
 8012620:	d405      	bmi.n	801262e <setvbuf+0xea>
 8012622:	f413 7f00 	tst.w	r3, #512	; 0x200
 8012626:	d102      	bne.n	801262e <setvbuf+0xea>
 8012628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801262a:	f001 f969 	bl	8013900 <__retarget_lock_release_recursive>
 801262e:	4628      	mov	r0, r5
 8012630:	b003      	add	sp, #12
 8012632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012636:	4b24      	ldr	r3, [pc, #144]	; (80126c8 <setvbuf+0x184>)
 8012638:	429c      	cmp	r4, r3
 801263a:	d101      	bne.n	8012640 <setvbuf+0xfc>
 801263c:	68bc      	ldr	r4, [r7, #8]
 801263e:	e793      	b.n	8012568 <setvbuf+0x24>
 8012640:	4b22      	ldr	r3, [pc, #136]	; (80126cc <setvbuf+0x188>)
 8012642:	429c      	cmp	r4, r3
 8012644:	bf08      	it	eq
 8012646:	68fc      	ldreq	r4, [r7, #12]
 8012648:	e78e      	b.n	8012568 <setvbuf+0x24>
 801264a:	2e00      	cmp	r6, #0
 801264c:	d0cd      	beq.n	80125ea <setvbuf+0xa6>
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	b913      	cbnz	r3, 8012658 <setvbuf+0x114>
 8012652:	4638      	mov	r0, r7
 8012654:	f001 f8b0 	bl	80137b8 <__sinit>
 8012658:	f1b8 0f01 	cmp.w	r8, #1
 801265c:	bf08      	it	eq
 801265e:	89a3      	ldrheq	r3, [r4, #12]
 8012660:	6026      	str	r6, [r4, #0]
 8012662:	bf04      	itt	eq
 8012664:	f043 0301 	orreq.w	r3, r3, #1
 8012668:	81a3      	strheq	r3, [r4, #12]
 801266a:	89a2      	ldrh	r2, [r4, #12]
 801266c:	f012 0308 	ands.w	r3, r2, #8
 8012670:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8012674:	d01c      	beq.n	80126b0 <setvbuf+0x16c>
 8012676:	07d3      	lsls	r3, r2, #31
 8012678:	bf41      	itttt	mi
 801267a:	2300      	movmi	r3, #0
 801267c:	426d      	negmi	r5, r5
 801267e:	60a3      	strmi	r3, [r4, #8]
 8012680:	61a5      	strmi	r5, [r4, #24]
 8012682:	bf58      	it	pl
 8012684:	60a5      	strpl	r5, [r4, #8]
 8012686:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012688:	f015 0501 	ands.w	r5, r5, #1
 801268c:	d115      	bne.n	80126ba <setvbuf+0x176>
 801268e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8012692:	e7c8      	b.n	8012626 <setvbuf+0xe2>
 8012694:	4648      	mov	r0, r9
 8012696:	f001 f999 	bl	80139cc <malloc>
 801269a:	4606      	mov	r6, r0
 801269c:	2800      	cmp	r0, #0
 801269e:	d0ae      	beq.n	80125fe <setvbuf+0xba>
 80126a0:	464d      	mov	r5, r9
 80126a2:	89a3      	ldrh	r3, [r4, #12]
 80126a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126a8:	81a3      	strh	r3, [r4, #12]
 80126aa:	e7d0      	b.n	801264e <setvbuf+0x10a>
 80126ac:	2500      	movs	r5, #0
 80126ae:	e7a8      	b.n	8012602 <setvbuf+0xbe>
 80126b0:	60a3      	str	r3, [r4, #8]
 80126b2:	e7e8      	b.n	8012686 <setvbuf+0x142>
 80126b4:	f04f 35ff 	mov.w	r5, #4294967295
 80126b8:	e7b9      	b.n	801262e <setvbuf+0xea>
 80126ba:	2500      	movs	r5, #0
 80126bc:	e7b7      	b.n	801262e <setvbuf+0xea>
 80126be:	bf00      	nop
 80126c0:	2000000c 	.word	0x2000000c
 80126c4:	08014f48 	.word	0x08014f48
 80126c8:	08014f68 	.word	0x08014f68
 80126cc:	08014f28 	.word	0x08014f28

080126d0 <siprintf>:
 80126d0:	b40e      	push	{r1, r2, r3}
 80126d2:	b500      	push	{lr}
 80126d4:	b09c      	sub	sp, #112	; 0x70
 80126d6:	ab1d      	add	r3, sp, #116	; 0x74
 80126d8:	9002      	str	r0, [sp, #8]
 80126da:	9006      	str	r0, [sp, #24]
 80126dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80126e0:	4809      	ldr	r0, [pc, #36]	; (8012708 <siprintf+0x38>)
 80126e2:	9107      	str	r1, [sp, #28]
 80126e4:	9104      	str	r1, [sp, #16]
 80126e6:	4909      	ldr	r1, [pc, #36]	; (801270c <siprintf+0x3c>)
 80126e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ec:	9105      	str	r1, [sp, #20]
 80126ee:	6800      	ldr	r0, [r0, #0]
 80126f0:	9301      	str	r3, [sp, #4]
 80126f2:	a902      	add	r1, sp, #8
 80126f4:	f001 fe48 	bl	8014388 <_svfiprintf_r>
 80126f8:	9b02      	ldr	r3, [sp, #8]
 80126fa:	2200      	movs	r2, #0
 80126fc:	701a      	strb	r2, [r3, #0]
 80126fe:	b01c      	add	sp, #112	; 0x70
 8012700:	f85d eb04 	ldr.w	lr, [sp], #4
 8012704:	b003      	add	sp, #12
 8012706:	4770      	bx	lr
 8012708:	2000000c 	.word	0x2000000c
 801270c:	ffff0208 	.word	0xffff0208

08012710 <__swbuf_r>:
 8012710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012712:	460e      	mov	r6, r1
 8012714:	4614      	mov	r4, r2
 8012716:	4605      	mov	r5, r0
 8012718:	b118      	cbz	r0, 8012722 <__swbuf_r+0x12>
 801271a:	6983      	ldr	r3, [r0, #24]
 801271c:	b90b      	cbnz	r3, 8012722 <__swbuf_r+0x12>
 801271e:	f001 f84b 	bl	80137b8 <__sinit>
 8012722:	4b21      	ldr	r3, [pc, #132]	; (80127a8 <__swbuf_r+0x98>)
 8012724:	429c      	cmp	r4, r3
 8012726:	d12b      	bne.n	8012780 <__swbuf_r+0x70>
 8012728:	686c      	ldr	r4, [r5, #4]
 801272a:	69a3      	ldr	r3, [r4, #24]
 801272c:	60a3      	str	r3, [r4, #8]
 801272e:	89a3      	ldrh	r3, [r4, #12]
 8012730:	071a      	lsls	r2, r3, #28
 8012732:	d52f      	bpl.n	8012794 <__swbuf_r+0x84>
 8012734:	6923      	ldr	r3, [r4, #16]
 8012736:	b36b      	cbz	r3, 8012794 <__swbuf_r+0x84>
 8012738:	6923      	ldr	r3, [r4, #16]
 801273a:	6820      	ldr	r0, [r4, #0]
 801273c:	1ac0      	subs	r0, r0, r3
 801273e:	6963      	ldr	r3, [r4, #20]
 8012740:	b2f6      	uxtb	r6, r6
 8012742:	4283      	cmp	r3, r0
 8012744:	4637      	mov	r7, r6
 8012746:	dc04      	bgt.n	8012752 <__swbuf_r+0x42>
 8012748:	4621      	mov	r1, r4
 801274a:	4628      	mov	r0, r5
 801274c:	f000 ffa0 	bl	8013690 <_fflush_r>
 8012750:	bb30      	cbnz	r0, 80127a0 <__swbuf_r+0x90>
 8012752:	68a3      	ldr	r3, [r4, #8]
 8012754:	3b01      	subs	r3, #1
 8012756:	60a3      	str	r3, [r4, #8]
 8012758:	6823      	ldr	r3, [r4, #0]
 801275a:	1c5a      	adds	r2, r3, #1
 801275c:	6022      	str	r2, [r4, #0]
 801275e:	701e      	strb	r6, [r3, #0]
 8012760:	6963      	ldr	r3, [r4, #20]
 8012762:	3001      	adds	r0, #1
 8012764:	4283      	cmp	r3, r0
 8012766:	d004      	beq.n	8012772 <__swbuf_r+0x62>
 8012768:	89a3      	ldrh	r3, [r4, #12]
 801276a:	07db      	lsls	r3, r3, #31
 801276c:	d506      	bpl.n	801277c <__swbuf_r+0x6c>
 801276e:	2e0a      	cmp	r6, #10
 8012770:	d104      	bne.n	801277c <__swbuf_r+0x6c>
 8012772:	4621      	mov	r1, r4
 8012774:	4628      	mov	r0, r5
 8012776:	f000 ff8b 	bl	8013690 <_fflush_r>
 801277a:	b988      	cbnz	r0, 80127a0 <__swbuf_r+0x90>
 801277c:	4638      	mov	r0, r7
 801277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012780:	4b0a      	ldr	r3, [pc, #40]	; (80127ac <__swbuf_r+0x9c>)
 8012782:	429c      	cmp	r4, r3
 8012784:	d101      	bne.n	801278a <__swbuf_r+0x7a>
 8012786:	68ac      	ldr	r4, [r5, #8]
 8012788:	e7cf      	b.n	801272a <__swbuf_r+0x1a>
 801278a:	4b09      	ldr	r3, [pc, #36]	; (80127b0 <__swbuf_r+0xa0>)
 801278c:	429c      	cmp	r4, r3
 801278e:	bf08      	it	eq
 8012790:	68ec      	ldreq	r4, [r5, #12]
 8012792:	e7ca      	b.n	801272a <__swbuf_r+0x1a>
 8012794:	4621      	mov	r1, r4
 8012796:	4628      	mov	r0, r5
 8012798:	f000 f80c 	bl	80127b4 <__swsetup_r>
 801279c:	2800      	cmp	r0, #0
 801279e:	d0cb      	beq.n	8012738 <__swbuf_r+0x28>
 80127a0:	f04f 37ff 	mov.w	r7, #4294967295
 80127a4:	e7ea      	b.n	801277c <__swbuf_r+0x6c>
 80127a6:	bf00      	nop
 80127a8:	08014f48 	.word	0x08014f48
 80127ac:	08014f68 	.word	0x08014f68
 80127b0:	08014f28 	.word	0x08014f28

080127b4 <__swsetup_r>:
 80127b4:	4b32      	ldr	r3, [pc, #200]	; (8012880 <__swsetup_r+0xcc>)
 80127b6:	b570      	push	{r4, r5, r6, lr}
 80127b8:	681d      	ldr	r5, [r3, #0]
 80127ba:	4606      	mov	r6, r0
 80127bc:	460c      	mov	r4, r1
 80127be:	b125      	cbz	r5, 80127ca <__swsetup_r+0x16>
 80127c0:	69ab      	ldr	r3, [r5, #24]
 80127c2:	b913      	cbnz	r3, 80127ca <__swsetup_r+0x16>
 80127c4:	4628      	mov	r0, r5
 80127c6:	f000 fff7 	bl	80137b8 <__sinit>
 80127ca:	4b2e      	ldr	r3, [pc, #184]	; (8012884 <__swsetup_r+0xd0>)
 80127cc:	429c      	cmp	r4, r3
 80127ce:	d10f      	bne.n	80127f0 <__swsetup_r+0x3c>
 80127d0:	686c      	ldr	r4, [r5, #4]
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127d8:	0719      	lsls	r1, r3, #28
 80127da:	d42c      	bmi.n	8012836 <__swsetup_r+0x82>
 80127dc:	06dd      	lsls	r5, r3, #27
 80127de:	d411      	bmi.n	8012804 <__swsetup_r+0x50>
 80127e0:	2309      	movs	r3, #9
 80127e2:	6033      	str	r3, [r6, #0]
 80127e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127e8:	81a3      	strh	r3, [r4, #12]
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295
 80127ee:	e03e      	b.n	801286e <__swsetup_r+0xba>
 80127f0:	4b25      	ldr	r3, [pc, #148]	; (8012888 <__swsetup_r+0xd4>)
 80127f2:	429c      	cmp	r4, r3
 80127f4:	d101      	bne.n	80127fa <__swsetup_r+0x46>
 80127f6:	68ac      	ldr	r4, [r5, #8]
 80127f8:	e7eb      	b.n	80127d2 <__swsetup_r+0x1e>
 80127fa:	4b24      	ldr	r3, [pc, #144]	; (801288c <__swsetup_r+0xd8>)
 80127fc:	429c      	cmp	r4, r3
 80127fe:	bf08      	it	eq
 8012800:	68ec      	ldreq	r4, [r5, #12]
 8012802:	e7e6      	b.n	80127d2 <__swsetup_r+0x1e>
 8012804:	0758      	lsls	r0, r3, #29
 8012806:	d512      	bpl.n	801282e <__swsetup_r+0x7a>
 8012808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801280a:	b141      	cbz	r1, 801281e <__swsetup_r+0x6a>
 801280c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012810:	4299      	cmp	r1, r3
 8012812:	d002      	beq.n	801281a <__swsetup_r+0x66>
 8012814:	4630      	mov	r0, r6
 8012816:	f001 fc7b 	bl	8014110 <_free_r>
 801281a:	2300      	movs	r3, #0
 801281c:	6363      	str	r3, [r4, #52]	; 0x34
 801281e:	89a3      	ldrh	r3, [r4, #12]
 8012820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012824:	81a3      	strh	r3, [r4, #12]
 8012826:	2300      	movs	r3, #0
 8012828:	6063      	str	r3, [r4, #4]
 801282a:	6923      	ldr	r3, [r4, #16]
 801282c:	6023      	str	r3, [r4, #0]
 801282e:	89a3      	ldrh	r3, [r4, #12]
 8012830:	f043 0308 	orr.w	r3, r3, #8
 8012834:	81a3      	strh	r3, [r4, #12]
 8012836:	6923      	ldr	r3, [r4, #16]
 8012838:	b94b      	cbnz	r3, 801284e <__swsetup_r+0x9a>
 801283a:	89a3      	ldrh	r3, [r4, #12]
 801283c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012844:	d003      	beq.n	801284e <__swsetup_r+0x9a>
 8012846:	4621      	mov	r1, r4
 8012848:	4630      	mov	r0, r6
 801284a:	f001 f87f 	bl	801394c <__smakebuf_r>
 801284e:	89a0      	ldrh	r0, [r4, #12]
 8012850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012854:	f010 0301 	ands.w	r3, r0, #1
 8012858:	d00a      	beq.n	8012870 <__swsetup_r+0xbc>
 801285a:	2300      	movs	r3, #0
 801285c:	60a3      	str	r3, [r4, #8]
 801285e:	6963      	ldr	r3, [r4, #20]
 8012860:	425b      	negs	r3, r3
 8012862:	61a3      	str	r3, [r4, #24]
 8012864:	6923      	ldr	r3, [r4, #16]
 8012866:	b943      	cbnz	r3, 801287a <__swsetup_r+0xc6>
 8012868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801286c:	d1ba      	bne.n	80127e4 <__swsetup_r+0x30>
 801286e:	bd70      	pop	{r4, r5, r6, pc}
 8012870:	0781      	lsls	r1, r0, #30
 8012872:	bf58      	it	pl
 8012874:	6963      	ldrpl	r3, [r4, #20]
 8012876:	60a3      	str	r3, [r4, #8]
 8012878:	e7f4      	b.n	8012864 <__swsetup_r+0xb0>
 801287a:	2000      	movs	r0, #0
 801287c:	e7f7      	b.n	801286e <__swsetup_r+0xba>
 801287e:	bf00      	nop
 8012880:	2000000c 	.word	0x2000000c
 8012884:	08014f48 	.word	0x08014f48
 8012888:	08014f68 	.word	0x08014f68
 801288c:	08014f28 	.word	0x08014f28

08012890 <quorem>:
 8012890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	6903      	ldr	r3, [r0, #16]
 8012896:	690c      	ldr	r4, [r1, #16]
 8012898:	42a3      	cmp	r3, r4
 801289a:	4607      	mov	r7, r0
 801289c:	f2c0 8081 	blt.w	80129a2 <quorem+0x112>
 80128a0:	3c01      	subs	r4, #1
 80128a2:	f101 0814 	add.w	r8, r1, #20
 80128a6:	f100 0514 	add.w	r5, r0, #20
 80128aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80128b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128b8:	3301      	adds	r3, #1
 80128ba:	429a      	cmp	r2, r3
 80128bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80128c8:	d331      	bcc.n	801292e <quorem+0x9e>
 80128ca:	f04f 0e00 	mov.w	lr, #0
 80128ce:	4640      	mov	r0, r8
 80128d0:	46ac      	mov	ip, r5
 80128d2:	46f2      	mov	sl, lr
 80128d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80128d8:	b293      	uxth	r3, r2
 80128da:	fb06 e303 	mla	r3, r6, r3, lr
 80128de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	ebaa 0303 	sub.w	r3, sl, r3
 80128e8:	f8dc a000 	ldr.w	sl, [ip]
 80128ec:	0c12      	lsrs	r2, r2, #16
 80128ee:	fa13 f38a 	uxtah	r3, r3, sl
 80128f2:	fb06 e202 	mla	r2, r6, r2, lr
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	9b00      	ldr	r3, [sp, #0]
 80128fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128fe:	b292      	uxth	r2, r2
 8012900:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012908:	f8bd 3000 	ldrh.w	r3, [sp]
 801290c:	4581      	cmp	r9, r0
 801290e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012912:	f84c 3b04 	str.w	r3, [ip], #4
 8012916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801291a:	d2db      	bcs.n	80128d4 <quorem+0x44>
 801291c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012920:	b92b      	cbnz	r3, 801292e <quorem+0x9e>
 8012922:	9b01      	ldr	r3, [sp, #4]
 8012924:	3b04      	subs	r3, #4
 8012926:	429d      	cmp	r5, r3
 8012928:	461a      	mov	r2, r3
 801292a:	d32e      	bcc.n	801298a <quorem+0xfa>
 801292c:	613c      	str	r4, [r7, #16]
 801292e:	4638      	mov	r0, r7
 8012930:	f001 fad6 	bl	8013ee0 <__mcmp>
 8012934:	2800      	cmp	r0, #0
 8012936:	db24      	blt.n	8012982 <quorem+0xf2>
 8012938:	3601      	adds	r6, #1
 801293a:	4628      	mov	r0, r5
 801293c:	f04f 0c00 	mov.w	ip, #0
 8012940:	f858 2b04 	ldr.w	r2, [r8], #4
 8012944:	f8d0 e000 	ldr.w	lr, [r0]
 8012948:	b293      	uxth	r3, r2
 801294a:	ebac 0303 	sub.w	r3, ip, r3
 801294e:	0c12      	lsrs	r2, r2, #16
 8012950:	fa13 f38e 	uxtah	r3, r3, lr
 8012954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801295c:	b29b      	uxth	r3, r3
 801295e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012962:	45c1      	cmp	r9, r8
 8012964:	f840 3b04 	str.w	r3, [r0], #4
 8012968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801296c:	d2e8      	bcs.n	8012940 <quorem+0xb0>
 801296e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012976:	b922      	cbnz	r2, 8012982 <quorem+0xf2>
 8012978:	3b04      	subs	r3, #4
 801297a:	429d      	cmp	r5, r3
 801297c:	461a      	mov	r2, r3
 801297e:	d30a      	bcc.n	8012996 <quorem+0x106>
 8012980:	613c      	str	r4, [r7, #16]
 8012982:	4630      	mov	r0, r6
 8012984:	b003      	add	sp, #12
 8012986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298a:	6812      	ldr	r2, [r2, #0]
 801298c:	3b04      	subs	r3, #4
 801298e:	2a00      	cmp	r2, #0
 8012990:	d1cc      	bne.n	801292c <quorem+0x9c>
 8012992:	3c01      	subs	r4, #1
 8012994:	e7c7      	b.n	8012926 <quorem+0x96>
 8012996:	6812      	ldr	r2, [r2, #0]
 8012998:	3b04      	subs	r3, #4
 801299a:	2a00      	cmp	r2, #0
 801299c:	d1f0      	bne.n	8012980 <quorem+0xf0>
 801299e:	3c01      	subs	r4, #1
 80129a0:	e7eb      	b.n	801297a <quorem+0xea>
 80129a2:	2000      	movs	r0, #0
 80129a4:	e7ee      	b.n	8012984 <quorem+0xf4>
	...

080129a8 <_dtoa_r>:
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	ed2d 8b04 	vpush	{d8-d9}
 80129b0:	ec57 6b10 	vmov	r6, r7, d0
 80129b4:	b093      	sub	sp, #76	; 0x4c
 80129b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80129bc:	9106      	str	r1, [sp, #24]
 80129be:	ee10 aa10 	vmov	sl, s0
 80129c2:	4604      	mov	r4, r0
 80129c4:	9209      	str	r2, [sp, #36]	; 0x24
 80129c6:	930c      	str	r3, [sp, #48]	; 0x30
 80129c8:	46bb      	mov	fp, r7
 80129ca:	b975      	cbnz	r5, 80129ea <_dtoa_r+0x42>
 80129cc:	2010      	movs	r0, #16
 80129ce:	f000 fffd 	bl	80139cc <malloc>
 80129d2:	4602      	mov	r2, r0
 80129d4:	6260      	str	r0, [r4, #36]	; 0x24
 80129d6:	b920      	cbnz	r0, 80129e2 <_dtoa_r+0x3a>
 80129d8:	4ba7      	ldr	r3, [pc, #668]	; (8012c78 <_dtoa_r+0x2d0>)
 80129da:	21ea      	movs	r1, #234	; 0xea
 80129dc:	48a7      	ldr	r0, [pc, #668]	; (8012c7c <_dtoa_r+0x2d4>)
 80129de:	f001 ffdb 	bl	8014998 <__assert_func>
 80129e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129e6:	6005      	str	r5, [r0, #0]
 80129e8:	60c5      	str	r5, [r0, #12]
 80129ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129ec:	6819      	ldr	r1, [r3, #0]
 80129ee:	b151      	cbz	r1, 8012a06 <_dtoa_r+0x5e>
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	604a      	str	r2, [r1, #4]
 80129f4:	2301      	movs	r3, #1
 80129f6:	4093      	lsls	r3, r2
 80129f8:	608b      	str	r3, [r1, #8]
 80129fa:	4620      	mov	r0, r4
 80129fc:	f001 f82e 	bl	8013a5c <_Bfree>
 8012a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a02:	2200      	movs	r2, #0
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	1e3b      	subs	r3, r7, #0
 8012a08:	bfaa      	itet	ge
 8012a0a:	2300      	movge	r3, #0
 8012a0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012a10:	f8c8 3000 	strge.w	r3, [r8]
 8012a14:	4b9a      	ldr	r3, [pc, #616]	; (8012c80 <_dtoa_r+0x2d8>)
 8012a16:	bfbc      	itt	lt
 8012a18:	2201      	movlt	r2, #1
 8012a1a:	f8c8 2000 	strlt.w	r2, [r8]
 8012a1e:	ea33 030b 	bics.w	r3, r3, fp
 8012a22:	d11b      	bne.n	8012a5c <_dtoa_r+0xb4>
 8012a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a26:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a2a:	6013      	str	r3, [r2, #0]
 8012a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a30:	4333      	orrs	r3, r6
 8012a32:	f000 8592 	beq.w	801355a <_dtoa_r+0xbb2>
 8012a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a38:	b963      	cbnz	r3, 8012a54 <_dtoa_r+0xac>
 8012a3a:	4b92      	ldr	r3, [pc, #584]	; (8012c84 <_dtoa_r+0x2dc>)
 8012a3c:	e022      	b.n	8012a84 <_dtoa_r+0xdc>
 8012a3e:	4b92      	ldr	r3, [pc, #584]	; (8012c88 <_dtoa_r+0x2e0>)
 8012a40:	9301      	str	r3, [sp, #4]
 8012a42:	3308      	adds	r3, #8
 8012a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a46:	6013      	str	r3, [r2, #0]
 8012a48:	9801      	ldr	r0, [sp, #4]
 8012a4a:	b013      	add	sp, #76	; 0x4c
 8012a4c:	ecbd 8b04 	vpop	{d8-d9}
 8012a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a54:	4b8b      	ldr	r3, [pc, #556]	; (8012c84 <_dtoa_r+0x2dc>)
 8012a56:	9301      	str	r3, [sp, #4]
 8012a58:	3303      	adds	r3, #3
 8012a5a:	e7f3      	b.n	8012a44 <_dtoa_r+0x9c>
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	2300      	movs	r3, #0
 8012a60:	4650      	mov	r0, sl
 8012a62:	4659      	mov	r1, fp
 8012a64:	f7ee f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a68:	ec4b ab19 	vmov	d9, sl, fp
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	b158      	cbz	r0, 8012a88 <_dtoa_r+0xe0>
 8012a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a72:	2301      	movs	r3, #1
 8012a74:	6013      	str	r3, [r2, #0]
 8012a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 856b 	beq.w	8013554 <_dtoa_r+0xbac>
 8012a7e:	4883      	ldr	r0, [pc, #524]	; (8012c8c <_dtoa_r+0x2e4>)
 8012a80:	6018      	str	r0, [r3, #0]
 8012a82:	1e43      	subs	r3, r0, #1
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	e7df      	b.n	8012a48 <_dtoa_r+0xa0>
 8012a88:	ec4b ab10 	vmov	d0, sl, fp
 8012a8c:	aa10      	add	r2, sp, #64	; 0x40
 8012a8e:	a911      	add	r1, sp, #68	; 0x44
 8012a90:	4620      	mov	r0, r4
 8012a92:	f001 facb 	bl	801402c <__d2b>
 8012a96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012a9a:	ee08 0a10 	vmov	s16, r0
 8012a9e:	2d00      	cmp	r5, #0
 8012aa0:	f000 8084 	beq.w	8012bac <_dtoa_r+0x204>
 8012aa4:	ee19 3a90 	vmov	r3, s19
 8012aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012aac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ab0:	4656      	mov	r6, sl
 8012ab2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012aba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012abe:	4b74      	ldr	r3, [pc, #464]	; (8012c90 <_dtoa_r+0x2e8>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	4639      	mov	r1, r7
 8012ac6:	f7ed fbdf 	bl	8000288 <__aeabi_dsub>
 8012aca:	a365      	add	r3, pc, #404	; (adr r3, 8012c60 <_dtoa_r+0x2b8>)
 8012acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad0:	f7ed fd92 	bl	80005f8 <__aeabi_dmul>
 8012ad4:	a364      	add	r3, pc, #400	; (adr r3, 8012c68 <_dtoa_r+0x2c0>)
 8012ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ada:	f7ed fbd7 	bl	800028c <__adddf3>
 8012ade:	4606      	mov	r6, r0
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	460f      	mov	r7, r1
 8012ae4:	f7ed fd1e 	bl	8000524 <__aeabi_i2d>
 8012ae8:	a361      	add	r3, pc, #388	; (adr r3, 8012c70 <_dtoa_r+0x2c8>)
 8012aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aee:	f7ed fd83 	bl	80005f8 <__aeabi_dmul>
 8012af2:	4602      	mov	r2, r0
 8012af4:	460b      	mov	r3, r1
 8012af6:	4630      	mov	r0, r6
 8012af8:	4639      	mov	r1, r7
 8012afa:	f7ed fbc7 	bl	800028c <__adddf3>
 8012afe:	4606      	mov	r6, r0
 8012b00:	460f      	mov	r7, r1
 8012b02:	f7ee f829 	bl	8000b58 <__aeabi_d2iz>
 8012b06:	2200      	movs	r2, #0
 8012b08:	9000      	str	r0, [sp, #0]
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	4639      	mov	r1, r7
 8012b10:	f7ed ffe4 	bl	8000adc <__aeabi_dcmplt>
 8012b14:	b150      	cbz	r0, 8012b2c <_dtoa_r+0x184>
 8012b16:	9800      	ldr	r0, [sp, #0]
 8012b18:	f7ed fd04 	bl	8000524 <__aeabi_i2d>
 8012b1c:	4632      	mov	r2, r6
 8012b1e:	463b      	mov	r3, r7
 8012b20:	f7ed ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b24:	b910      	cbnz	r0, 8012b2c <_dtoa_r+0x184>
 8012b26:	9b00      	ldr	r3, [sp, #0]
 8012b28:	3b01      	subs	r3, #1
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	9b00      	ldr	r3, [sp, #0]
 8012b2e:	2b16      	cmp	r3, #22
 8012b30:	d85a      	bhi.n	8012be8 <_dtoa_r+0x240>
 8012b32:	9a00      	ldr	r2, [sp, #0]
 8012b34:	4b57      	ldr	r3, [pc, #348]	; (8012c94 <_dtoa_r+0x2ec>)
 8012b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3e:	ec51 0b19 	vmov	r0, r1, d9
 8012b42:	f7ed ffcb 	bl	8000adc <__aeabi_dcmplt>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d050      	beq.n	8012bec <_dtoa_r+0x244>
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	2300      	movs	r3, #0
 8012b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b56:	1b5d      	subs	r5, r3, r5
 8012b58:	1e6b      	subs	r3, r5, #1
 8012b5a:	9305      	str	r3, [sp, #20]
 8012b5c:	bf45      	ittet	mi
 8012b5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012b62:	9304      	strmi	r3, [sp, #16]
 8012b64:	2300      	movpl	r3, #0
 8012b66:	2300      	movmi	r3, #0
 8012b68:	bf4c      	ite	mi
 8012b6a:	9305      	strmi	r3, [sp, #20]
 8012b6c:	9304      	strpl	r3, [sp, #16]
 8012b6e:	9b00      	ldr	r3, [sp, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	db3d      	blt.n	8012bf0 <_dtoa_r+0x248>
 8012b74:	9b05      	ldr	r3, [sp, #20]
 8012b76:	9a00      	ldr	r2, [sp, #0]
 8012b78:	920a      	str	r2, [sp, #40]	; 0x28
 8012b7a:	4413      	add	r3, r2
 8012b7c:	9305      	str	r3, [sp, #20]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	9307      	str	r3, [sp, #28]
 8012b82:	9b06      	ldr	r3, [sp, #24]
 8012b84:	2b09      	cmp	r3, #9
 8012b86:	f200 8089 	bhi.w	8012c9c <_dtoa_r+0x2f4>
 8012b8a:	2b05      	cmp	r3, #5
 8012b8c:	bfc4      	itt	gt
 8012b8e:	3b04      	subgt	r3, #4
 8012b90:	9306      	strgt	r3, [sp, #24]
 8012b92:	9b06      	ldr	r3, [sp, #24]
 8012b94:	f1a3 0302 	sub.w	r3, r3, #2
 8012b98:	bfcc      	ite	gt
 8012b9a:	2500      	movgt	r5, #0
 8012b9c:	2501      	movle	r5, #1
 8012b9e:	2b03      	cmp	r3, #3
 8012ba0:	f200 8087 	bhi.w	8012cb2 <_dtoa_r+0x30a>
 8012ba4:	e8df f003 	tbb	[pc, r3]
 8012ba8:	59383a2d 	.word	0x59383a2d
 8012bac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012bb0:	441d      	add	r5, r3
 8012bb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012bb6:	2b20      	cmp	r3, #32
 8012bb8:	bfc1      	itttt	gt
 8012bba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012bbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012bc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8012bc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012bca:	bfda      	itte	le
 8012bcc:	f1c3 0320 	rsble	r3, r3, #32
 8012bd0:	fa06 f003 	lslle.w	r0, r6, r3
 8012bd4:	4318      	orrgt	r0, r3
 8012bd6:	f7ed fc95 	bl	8000504 <__aeabi_ui2d>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	4606      	mov	r6, r0
 8012bde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012be2:	3d01      	subs	r5, #1
 8012be4:	930e      	str	r3, [sp, #56]	; 0x38
 8012be6:	e76a      	b.n	8012abe <_dtoa_r+0x116>
 8012be8:	2301      	movs	r3, #1
 8012bea:	e7b2      	b.n	8012b52 <_dtoa_r+0x1aa>
 8012bec:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bee:	e7b1      	b.n	8012b54 <_dtoa_r+0x1ac>
 8012bf0:	9b04      	ldr	r3, [sp, #16]
 8012bf2:	9a00      	ldr	r2, [sp, #0]
 8012bf4:	1a9b      	subs	r3, r3, r2
 8012bf6:	9304      	str	r3, [sp, #16]
 8012bf8:	4253      	negs	r3, r2
 8012bfa:	9307      	str	r3, [sp, #28]
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8012c00:	e7bf      	b.n	8012b82 <_dtoa_r+0x1da>
 8012c02:	2300      	movs	r3, #0
 8012c04:	9308      	str	r3, [sp, #32]
 8012c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dc55      	bgt.n	8012cb8 <_dtoa_r+0x310>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012c12:	461a      	mov	r2, r3
 8012c14:	9209      	str	r2, [sp, #36]	; 0x24
 8012c16:	e00c      	b.n	8012c32 <_dtoa_r+0x28a>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e7f3      	b.n	8012c04 <_dtoa_r+0x25c>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c20:	9308      	str	r3, [sp, #32]
 8012c22:	9b00      	ldr	r3, [sp, #0]
 8012c24:	4413      	add	r3, r2
 8012c26:	9302      	str	r3, [sp, #8]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	9303      	str	r3, [sp, #12]
 8012c2e:	bfb8      	it	lt
 8012c30:	2301      	movlt	r3, #1
 8012c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c34:	2200      	movs	r2, #0
 8012c36:	6042      	str	r2, [r0, #4]
 8012c38:	2204      	movs	r2, #4
 8012c3a:	f102 0614 	add.w	r6, r2, #20
 8012c3e:	429e      	cmp	r6, r3
 8012c40:	6841      	ldr	r1, [r0, #4]
 8012c42:	d93d      	bls.n	8012cc0 <_dtoa_r+0x318>
 8012c44:	4620      	mov	r0, r4
 8012c46:	f000 fec9 	bl	80139dc <_Balloc>
 8012c4a:	9001      	str	r0, [sp, #4]
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d13b      	bne.n	8012cc8 <_dtoa_r+0x320>
 8012c50:	4b11      	ldr	r3, [pc, #68]	; (8012c98 <_dtoa_r+0x2f0>)
 8012c52:	4602      	mov	r2, r0
 8012c54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c58:	e6c0      	b.n	80129dc <_dtoa_r+0x34>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	e7df      	b.n	8012c1e <_dtoa_r+0x276>
 8012c5e:	bf00      	nop
 8012c60:	636f4361 	.word	0x636f4361
 8012c64:	3fd287a7 	.word	0x3fd287a7
 8012c68:	8b60c8b3 	.word	0x8b60c8b3
 8012c6c:	3fc68a28 	.word	0x3fc68a28
 8012c70:	509f79fb 	.word	0x509f79fb
 8012c74:	3fd34413 	.word	0x3fd34413
 8012c78:	08014ea5 	.word	0x08014ea5
 8012c7c:	08014ebc 	.word	0x08014ebc
 8012c80:	7ff00000 	.word	0x7ff00000
 8012c84:	08014ea1 	.word	0x08014ea1
 8012c88:	08014e98 	.word	0x08014e98
 8012c8c:	08014e75 	.word	0x08014e75
 8012c90:	3ff80000 	.word	0x3ff80000
 8012c94:	08015010 	.word	0x08015010
 8012c98:	08014f17 	.word	0x08014f17
 8012c9c:	2501      	movs	r5, #1
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	9306      	str	r3, [sp, #24]
 8012ca2:	9508      	str	r5, [sp, #32]
 8012ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012cac:	2200      	movs	r2, #0
 8012cae:	2312      	movs	r3, #18
 8012cb0:	e7b0      	b.n	8012c14 <_dtoa_r+0x26c>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	9308      	str	r3, [sp, #32]
 8012cb6:	e7f5      	b.n	8012ca4 <_dtoa_r+0x2fc>
 8012cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012cbe:	e7b8      	b.n	8012c32 <_dtoa_r+0x28a>
 8012cc0:	3101      	adds	r1, #1
 8012cc2:	6041      	str	r1, [r0, #4]
 8012cc4:	0052      	lsls	r2, r2, #1
 8012cc6:	e7b8      	b.n	8012c3a <_dtoa_r+0x292>
 8012cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cca:	9a01      	ldr	r2, [sp, #4]
 8012ccc:	601a      	str	r2, [r3, #0]
 8012cce:	9b03      	ldr	r3, [sp, #12]
 8012cd0:	2b0e      	cmp	r3, #14
 8012cd2:	f200 809d 	bhi.w	8012e10 <_dtoa_r+0x468>
 8012cd6:	2d00      	cmp	r5, #0
 8012cd8:	f000 809a 	beq.w	8012e10 <_dtoa_r+0x468>
 8012cdc:	9b00      	ldr	r3, [sp, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	dd32      	ble.n	8012d48 <_dtoa_r+0x3a0>
 8012ce2:	4ab7      	ldr	r2, [pc, #732]	; (8012fc0 <_dtoa_r+0x618>)
 8012ce4:	f003 030f 	and.w	r3, r3, #15
 8012ce8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012cec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cf0:	9b00      	ldr	r3, [sp, #0]
 8012cf2:	05d8      	lsls	r0, r3, #23
 8012cf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012cf8:	d516      	bpl.n	8012d28 <_dtoa_r+0x380>
 8012cfa:	4bb2      	ldr	r3, [pc, #712]	; (8012fc4 <_dtoa_r+0x61c>)
 8012cfc:	ec51 0b19 	vmov	r0, r1, d9
 8012d00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d04:	f7ed fda2 	bl	800084c <__aeabi_ddiv>
 8012d08:	f007 070f 	and.w	r7, r7, #15
 8012d0c:	4682      	mov	sl, r0
 8012d0e:	468b      	mov	fp, r1
 8012d10:	2503      	movs	r5, #3
 8012d12:	4eac      	ldr	r6, [pc, #688]	; (8012fc4 <_dtoa_r+0x61c>)
 8012d14:	b957      	cbnz	r7, 8012d2c <_dtoa_r+0x384>
 8012d16:	4642      	mov	r2, r8
 8012d18:	464b      	mov	r3, r9
 8012d1a:	4650      	mov	r0, sl
 8012d1c:	4659      	mov	r1, fp
 8012d1e:	f7ed fd95 	bl	800084c <__aeabi_ddiv>
 8012d22:	4682      	mov	sl, r0
 8012d24:	468b      	mov	fp, r1
 8012d26:	e028      	b.n	8012d7a <_dtoa_r+0x3d2>
 8012d28:	2502      	movs	r5, #2
 8012d2a:	e7f2      	b.n	8012d12 <_dtoa_r+0x36a>
 8012d2c:	07f9      	lsls	r1, r7, #31
 8012d2e:	d508      	bpl.n	8012d42 <_dtoa_r+0x39a>
 8012d30:	4640      	mov	r0, r8
 8012d32:	4649      	mov	r1, r9
 8012d34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d38:	f7ed fc5e 	bl	80005f8 <__aeabi_dmul>
 8012d3c:	3501      	adds	r5, #1
 8012d3e:	4680      	mov	r8, r0
 8012d40:	4689      	mov	r9, r1
 8012d42:	107f      	asrs	r7, r7, #1
 8012d44:	3608      	adds	r6, #8
 8012d46:	e7e5      	b.n	8012d14 <_dtoa_r+0x36c>
 8012d48:	f000 809b 	beq.w	8012e82 <_dtoa_r+0x4da>
 8012d4c:	9b00      	ldr	r3, [sp, #0]
 8012d4e:	4f9d      	ldr	r7, [pc, #628]	; (8012fc4 <_dtoa_r+0x61c>)
 8012d50:	425e      	negs	r6, r3
 8012d52:	4b9b      	ldr	r3, [pc, #620]	; (8012fc0 <_dtoa_r+0x618>)
 8012d54:	f006 020f 	and.w	r2, r6, #15
 8012d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d60:	ec51 0b19 	vmov	r0, r1, d9
 8012d64:	f7ed fc48 	bl	80005f8 <__aeabi_dmul>
 8012d68:	1136      	asrs	r6, r6, #4
 8012d6a:	4682      	mov	sl, r0
 8012d6c:	468b      	mov	fp, r1
 8012d6e:	2300      	movs	r3, #0
 8012d70:	2502      	movs	r5, #2
 8012d72:	2e00      	cmp	r6, #0
 8012d74:	d17a      	bne.n	8012e6c <_dtoa_r+0x4c4>
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d1d3      	bne.n	8012d22 <_dtoa_r+0x37a>
 8012d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	f000 8082 	beq.w	8012e86 <_dtoa_r+0x4de>
 8012d82:	4b91      	ldr	r3, [pc, #580]	; (8012fc8 <_dtoa_r+0x620>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	4650      	mov	r0, sl
 8012d88:	4659      	mov	r1, fp
 8012d8a:	f7ed fea7 	bl	8000adc <__aeabi_dcmplt>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	d079      	beq.n	8012e86 <_dtoa_r+0x4de>
 8012d92:	9b03      	ldr	r3, [sp, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d076      	beq.n	8012e86 <_dtoa_r+0x4de>
 8012d98:	9b02      	ldr	r3, [sp, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	dd36      	ble.n	8012e0c <_dtoa_r+0x464>
 8012d9e:	9b00      	ldr	r3, [sp, #0]
 8012da0:	4650      	mov	r0, sl
 8012da2:	4659      	mov	r1, fp
 8012da4:	1e5f      	subs	r7, r3, #1
 8012da6:	2200      	movs	r2, #0
 8012da8:	4b88      	ldr	r3, [pc, #544]	; (8012fcc <_dtoa_r+0x624>)
 8012daa:	f7ed fc25 	bl	80005f8 <__aeabi_dmul>
 8012dae:	9e02      	ldr	r6, [sp, #8]
 8012db0:	4682      	mov	sl, r0
 8012db2:	468b      	mov	fp, r1
 8012db4:	3501      	adds	r5, #1
 8012db6:	4628      	mov	r0, r5
 8012db8:	f7ed fbb4 	bl	8000524 <__aeabi_i2d>
 8012dbc:	4652      	mov	r2, sl
 8012dbe:	465b      	mov	r3, fp
 8012dc0:	f7ed fc1a 	bl	80005f8 <__aeabi_dmul>
 8012dc4:	4b82      	ldr	r3, [pc, #520]	; (8012fd0 <_dtoa_r+0x628>)
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	f7ed fa60 	bl	800028c <__adddf3>
 8012dcc:	46d0      	mov	r8, sl
 8012dce:	46d9      	mov	r9, fp
 8012dd0:	4682      	mov	sl, r0
 8012dd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012dd6:	2e00      	cmp	r6, #0
 8012dd8:	d158      	bne.n	8012e8c <_dtoa_r+0x4e4>
 8012dda:	4b7e      	ldr	r3, [pc, #504]	; (8012fd4 <_dtoa_r+0x62c>)
 8012ddc:	2200      	movs	r2, #0
 8012dde:	4640      	mov	r0, r8
 8012de0:	4649      	mov	r1, r9
 8012de2:	f7ed fa51 	bl	8000288 <__aeabi_dsub>
 8012de6:	4652      	mov	r2, sl
 8012de8:	465b      	mov	r3, fp
 8012dea:	4680      	mov	r8, r0
 8012dec:	4689      	mov	r9, r1
 8012dee:	f7ed fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	f040 8295 	bne.w	8013322 <_dtoa_r+0x97a>
 8012df8:	4652      	mov	r2, sl
 8012dfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012dfe:	4640      	mov	r0, r8
 8012e00:	4649      	mov	r1, r9
 8012e02:	f7ed fe6b 	bl	8000adc <__aeabi_dcmplt>
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f040 8289 	bne.w	801331e <_dtoa_r+0x976>
 8012e0c:	ec5b ab19 	vmov	sl, fp, d9
 8012e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f2c0 8148 	blt.w	80130a8 <_dtoa_r+0x700>
 8012e18:	9a00      	ldr	r2, [sp, #0]
 8012e1a:	2a0e      	cmp	r2, #14
 8012e1c:	f300 8144 	bgt.w	80130a8 <_dtoa_r+0x700>
 8012e20:	4b67      	ldr	r3, [pc, #412]	; (8012fc0 <_dtoa_r+0x618>)
 8012e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f280 80d5 	bge.w	8012fdc <_dtoa_r+0x634>
 8012e32:	9b03      	ldr	r3, [sp, #12]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	f300 80d1 	bgt.w	8012fdc <_dtoa_r+0x634>
 8012e3a:	f040 826f 	bne.w	801331c <_dtoa_r+0x974>
 8012e3e:	4b65      	ldr	r3, [pc, #404]	; (8012fd4 <_dtoa_r+0x62c>)
 8012e40:	2200      	movs	r2, #0
 8012e42:	4640      	mov	r0, r8
 8012e44:	4649      	mov	r1, r9
 8012e46:	f7ed fbd7 	bl	80005f8 <__aeabi_dmul>
 8012e4a:	4652      	mov	r2, sl
 8012e4c:	465b      	mov	r3, fp
 8012e4e:	f7ed fe59 	bl	8000b04 <__aeabi_dcmpge>
 8012e52:	9e03      	ldr	r6, [sp, #12]
 8012e54:	4637      	mov	r7, r6
 8012e56:	2800      	cmp	r0, #0
 8012e58:	f040 8245 	bne.w	80132e6 <_dtoa_r+0x93e>
 8012e5c:	9d01      	ldr	r5, [sp, #4]
 8012e5e:	2331      	movs	r3, #49	; 0x31
 8012e60:	f805 3b01 	strb.w	r3, [r5], #1
 8012e64:	9b00      	ldr	r3, [sp, #0]
 8012e66:	3301      	adds	r3, #1
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	e240      	b.n	80132ee <_dtoa_r+0x946>
 8012e6c:	07f2      	lsls	r2, r6, #31
 8012e6e:	d505      	bpl.n	8012e7c <_dtoa_r+0x4d4>
 8012e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e74:	f7ed fbc0 	bl	80005f8 <__aeabi_dmul>
 8012e78:	3501      	adds	r5, #1
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	1076      	asrs	r6, r6, #1
 8012e7e:	3708      	adds	r7, #8
 8012e80:	e777      	b.n	8012d72 <_dtoa_r+0x3ca>
 8012e82:	2502      	movs	r5, #2
 8012e84:	e779      	b.n	8012d7a <_dtoa_r+0x3d2>
 8012e86:	9f00      	ldr	r7, [sp, #0]
 8012e88:	9e03      	ldr	r6, [sp, #12]
 8012e8a:	e794      	b.n	8012db6 <_dtoa_r+0x40e>
 8012e8c:	9901      	ldr	r1, [sp, #4]
 8012e8e:	4b4c      	ldr	r3, [pc, #304]	; (8012fc0 <_dtoa_r+0x618>)
 8012e90:	4431      	add	r1, r6
 8012e92:	910d      	str	r1, [sp, #52]	; 0x34
 8012e94:	9908      	ldr	r1, [sp, #32]
 8012e96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e9e:	2900      	cmp	r1, #0
 8012ea0:	d043      	beq.n	8012f2a <_dtoa_r+0x582>
 8012ea2:	494d      	ldr	r1, [pc, #308]	; (8012fd8 <_dtoa_r+0x630>)
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	f7ed fcd1 	bl	800084c <__aeabi_ddiv>
 8012eaa:	4652      	mov	r2, sl
 8012eac:	465b      	mov	r3, fp
 8012eae:	f7ed f9eb 	bl	8000288 <__aeabi_dsub>
 8012eb2:	9d01      	ldr	r5, [sp, #4]
 8012eb4:	4682      	mov	sl, r0
 8012eb6:	468b      	mov	fp, r1
 8012eb8:	4649      	mov	r1, r9
 8012eba:	4640      	mov	r0, r8
 8012ebc:	f7ed fe4c 	bl	8000b58 <__aeabi_d2iz>
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	f7ed fb2f 	bl	8000524 <__aeabi_i2d>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4640      	mov	r0, r8
 8012ecc:	4649      	mov	r1, r9
 8012ece:	f7ed f9db 	bl	8000288 <__aeabi_dsub>
 8012ed2:	3630      	adds	r6, #48	; 0x30
 8012ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8012ed8:	4652      	mov	r2, sl
 8012eda:	465b      	mov	r3, fp
 8012edc:	4680      	mov	r8, r0
 8012ede:	4689      	mov	r9, r1
 8012ee0:	f7ed fdfc 	bl	8000adc <__aeabi_dcmplt>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d163      	bne.n	8012fb0 <_dtoa_r+0x608>
 8012ee8:	4642      	mov	r2, r8
 8012eea:	464b      	mov	r3, r9
 8012eec:	4936      	ldr	r1, [pc, #216]	; (8012fc8 <_dtoa_r+0x620>)
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f7ed f9ca 	bl	8000288 <__aeabi_dsub>
 8012ef4:	4652      	mov	r2, sl
 8012ef6:	465b      	mov	r3, fp
 8012ef8:	f7ed fdf0 	bl	8000adc <__aeabi_dcmplt>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	f040 80b5 	bne.w	801306c <_dtoa_r+0x6c4>
 8012f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f04:	429d      	cmp	r5, r3
 8012f06:	d081      	beq.n	8012e0c <_dtoa_r+0x464>
 8012f08:	4b30      	ldr	r3, [pc, #192]	; (8012fcc <_dtoa_r+0x624>)
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	4650      	mov	r0, sl
 8012f0e:	4659      	mov	r1, fp
 8012f10:	f7ed fb72 	bl	80005f8 <__aeabi_dmul>
 8012f14:	4b2d      	ldr	r3, [pc, #180]	; (8012fcc <_dtoa_r+0x624>)
 8012f16:	4682      	mov	sl, r0
 8012f18:	468b      	mov	fp, r1
 8012f1a:	4640      	mov	r0, r8
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f7ed fb6a 	bl	80005f8 <__aeabi_dmul>
 8012f24:	4680      	mov	r8, r0
 8012f26:	4689      	mov	r9, r1
 8012f28:	e7c6      	b.n	8012eb8 <_dtoa_r+0x510>
 8012f2a:	4650      	mov	r0, sl
 8012f2c:	4659      	mov	r1, fp
 8012f2e:	f7ed fb63 	bl	80005f8 <__aeabi_dmul>
 8012f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f34:	9d01      	ldr	r5, [sp, #4]
 8012f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f38:	4682      	mov	sl, r0
 8012f3a:	468b      	mov	fp, r1
 8012f3c:	4649      	mov	r1, r9
 8012f3e:	4640      	mov	r0, r8
 8012f40:	f7ed fe0a 	bl	8000b58 <__aeabi_d2iz>
 8012f44:	4606      	mov	r6, r0
 8012f46:	f7ed faed 	bl	8000524 <__aeabi_i2d>
 8012f4a:	3630      	adds	r6, #48	; 0x30
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	460b      	mov	r3, r1
 8012f50:	4640      	mov	r0, r8
 8012f52:	4649      	mov	r1, r9
 8012f54:	f7ed f998 	bl	8000288 <__aeabi_dsub>
 8012f58:	f805 6b01 	strb.w	r6, [r5], #1
 8012f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f5e:	429d      	cmp	r5, r3
 8012f60:	4680      	mov	r8, r0
 8012f62:	4689      	mov	r9, r1
 8012f64:	f04f 0200 	mov.w	r2, #0
 8012f68:	d124      	bne.n	8012fb4 <_dtoa_r+0x60c>
 8012f6a:	4b1b      	ldr	r3, [pc, #108]	; (8012fd8 <_dtoa_r+0x630>)
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	4659      	mov	r1, fp
 8012f70:	f7ed f98c 	bl	800028c <__adddf3>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4640      	mov	r0, r8
 8012f7a:	4649      	mov	r1, r9
 8012f7c:	f7ed fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d173      	bne.n	801306c <_dtoa_r+0x6c4>
 8012f84:	4652      	mov	r2, sl
 8012f86:	465b      	mov	r3, fp
 8012f88:	4913      	ldr	r1, [pc, #76]	; (8012fd8 <_dtoa_r+0x630>)
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f7ed f97c 	bl	8000288 <__aeabi_dsub>
 8012f90:	4602      	mov	r2, r0
 8012f92:	460b      	mov	r3, r1
 8012f94:	4640      	mov	r0, r8
 8012f96:	4649      	mov	r1, r9
 8012f98:	f7ed fda0 	bl	8000adc <__aeabi_dcmplt>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	f43f af35 	beq.w	8012e0c <_dtoa_r+0x464>
 8012fa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012fa4:	1e6b      	subs	r3, r5, #1
 8012fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fac:	2b30      	cmp	r3, #48	; 0x30
 8012fae:	d0f8      	beq.n	8012fa2 <_dtoa_r+0x5fa>
 8012fb0:	9700      	str	r7, [sp, #0]
 8012fb2:	e049      	b.n	8013048 <_dtoa_r+0x6a0>
 8012fb4:	4b05      	ldr	r3, [pc, #20]	; (8012fcc <_dtoa_r+0x624>)
 8012fb6:	f7ed fb1f 	bl	80005f8 <__aeabi_dmul>
 8012fba:	4680      	mov	r8, r0
 8012fbc:	4689      	mov	r9, r1
 8012fbe:	e7bd      	b.n	8012f3c <_dtoa_r+0x594>
 8012fc0:	08015010 	.word	0x08015010
 8012fc4:	08014fe8 	.word	0x08014fe8
 8012fc8:	3ff00000 	.word	0x3ff00000
 8012fcc:	40240000 	.word	0x40240000
 8012fd0:	401c0000 	.word	0x401c0000
 8012fd4:	40140000 	.word	0x40140000
 8012fd8:	3fe00000 	.word	0x3fe00000
 8012fdc:	9d01      	ldr	r5, [sp, #4]
 8012fde:	4656      	mov	r6, sl
 8012fe0:	465f      	mov	r7, fp
 8012fe2:	4642      	mov	r2, r8
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	4639      	mov	r1, r7
 8012fea:	f7ed fc2f 	bl	800084c <__aeabi_ddiv>
 8012fee:	f7ed fdb3 	bl	8000b58 <__aeabi_d2iz>
 8012ff2:	4682      	mov	sl, r0
 8012ff4:	f7ed fa96 	bl	8000524 <__aeabi_i2d>
 8012ff8:	4642      	mov	r2, r8
 8012ffa:	464b      	mov	r3, r9
 8012ffc:	f7ed fafc 	bl	80005f8 <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4630      	mov	r0, r6
 8013006:	4639      	mov	r1, r7
 8013008:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801300c:	f7ed f93c 	bl	8000288 <__aeabi_dsub>
 8013010:	f805 6b01 	strb.w	r6, [r5], #1
 8013014:	9e01      	ldr	r6, [sp, #4]
 8013016:	9f03      	ldr	r7, [sp, #12]
 8013018:	1bae      	subs	r6, r5, r6
 801301a:	42b7      	cmp	r7, r6
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	d135      	bne.n	801308e <_dtoa_r+0x6e6>
 8013022:	f7ed f933 	bl	800028c <__adddf3>
 8013026:	4642      	mov	r2, r8
 8013028:	464b      	mov	r3, r9
 801302a:	4606      	mov	r6, r0
 801302c:	460f      	mov	r7, r1
 801302e:	f7ed fd73 	bl	8000b18 <__aeabi_dcmpgt>
 8013032:	b9d0      	cbnz	r0, 801306a <_dtoa_r+0x6c2>
 8013034:	4642      	mov	r2, r8
 8013036:	464b      	mov	r3, r9
 8013038:	4630      	mov	r0, r6
 801303a:	4639      	mov	r1, r7
 801303c:	f7ed fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8013040:	b110      	cbz	r0, 8013048 <_dtoa_r+0x6a0>
 8013042:	f01a 0f01 	tst.w	sl, #1
 8013046:	d110      	bne.n	801306a <_dtoa_r+0x6c2>
 8013048:	4620      	mov	r0, r4
 801304a:	ee18 1a10 	vmov	r1, s16
 801304e:	f000 fd05 	bl	8013a5c <_Bfree>
 8013052:	2300      	movs	r3, #0
 8013054:	9800      	ldr	r0, [sp, #0]
 8013056:	702b      	strb	r3, [r5, #0]
 8013058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801305a:	3001      	adds	r0, #1
 801305c:	6018      	str	r0, [r3, #0]
 801305e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013060:	2b00      	cmp	r3, #0
 8013062:	f43f acf1 	beq.w	8012a48 <_dtoa_r+0xa0>
 8013066:	601d      	str	r5, [r3, #0]
 8013068:	e4ee      	b.n	8012a48 <_dtoa_r+0xa0>
 801306a:	9f00      	ldr	r7, [sp, #0]
 801306c:	462b      	mov	r3, r5
 801306e:	461d      	mov	r5, r3
 8013070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013074:	2a39      	cmp	r2, #57	; 0x39
 8013076:	d106      	bne.n	8013086 <_dtoa_r+0x6de>
 8013078:	9a01      	ldr	r2, [sp, #4]
 801307a:	429a      	cmp	r2, r3
 801307c:	d1f7      	bne.n	801306e <_dtoa_r+0x6c6>
 801307e:	9901      	ldr	r1, [sp, #4]
 8013080:	2230      	movs	r2, #48	; 0x30
 8013082:	3701      	adds	r7, #1
 8013084:	700a      	strb	r2, [r1, #0]
 8013086:	781a      	ldrb	r2, [r3, #0]
 8013088:	3201      	adds	r2, #1
 801308a:	701a      	strb	r2, [r3, #0]
 801308c:	e790      	b.n	8012fb0 <_dtoa_r+0x608>
 801308e:	4ba6      	ldr	r3, [pc, #664]	; (8013328 <_dtoa_r+0x980>)
 8013090:	2200      	movs	r2, #0
 8013092:	f7ed fab1 	bl	80005f8 <__aeabi_dmul>
 8013096:	2200      	movs	r2, #0
 8013098:	2300      	movs	r3, #0
 801309a:	4606      	mov	r6, r0
 801309c:	460f      	mov	r7, r1
 801309e:	f7ed fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d09d      	beq.n	8012fe2 <_dtoa_r+0x63a>
 80130a6:	e7cf      	b.n	8013048 <_dtoa_r+0x6a0>
 80130a8:	9a08      	ldr	r2, [sp, #32]
 80130aa:	2a00      	cmp	r2, #0
 80130ac:	f000 80d7 	beq.w	801325e <_dtoa_r+0x8b6>
 80130b0:	9a06      	ldr	r2, [sp, #24]
 80130b2:	2a01      	cmp	r2, #1
 80130b4:	f300 80ba 	bgt.w	801322c <_dtoa_r+0x884>
 80130b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130ba:	2a00      	cmp	r2, #0
 80130bc:	f000 80b2 	beq.w	8013224 <_dtoa_r+0x87c>
 80130c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130c4:	9e07      	ldr	r6, [sp, #28]
 80130c6:	9d04      	ldr	r5, [sp, #16]
 80130c8:	9a04      	ldr	r2, [sp, #16]
 80130ca:	441a      	add	r2, r3
 80130cc:	9204      	str	r2, [sp, #16]
 80130ce:	9a05      	ldr	r2, [sp, #20]
 80130d0:	2101      	movs	r1, #1
 80130d2:	441a      	add	r2, r3
 80130d4:	4620      	mov	r0, r4
 80130d6:	9205      	str	r2, [sp, #20]
 80130d8:	f000 fd78 	bl	8013bcc <__i2b>
 80130dc:	4607      	mov	r7, r0
 80130de:	2d00      	cmp	r5, #0
 80130e0:	dd0c      	ble.n	80130fc <_dtoa_r+0x754>
 80130e2:	9b05      	ldr	r3, [sp, #20]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dd09      	ble.n	80130fc <_dtoa_r+0x754>
 80130e8:	42ab      	cmp	r3, r5
 80130ea:	9a04      	ldr	r2, [sp, #16]
 80130ec:	bfa8      	it	ge
 80130ee:	462b      	movge	r3, r5
 80130f0:	1ad2      	subs	r2, r2, r3
 80130f2:	9204      	str	r2, [sp, #16]
 80130f4:	9a05      	ldr	r2, [sp, #20]
 80130f6:	1aed      	subs	r5, r5, r3
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	9305      	str	r3, [sp, #20]
 80130fc:	9b07      	ldr	r3, [sp, #28]
 80130fe:	b31b      	cbz	r3, 8013148 <_dtoa_r+0x7a0>
 8013100:	9b08      	ldr	r3, [sp, #32]
 8013102:	2b00      	cmp	r3, #0
 8013104:	f000 80af 	beq.w	8013266 <_dtoa_r+0x8be>
 8013108:	2e00      	cmp	r6, #0
 801310a:	dd13      	ble.n	8013134 <_dtoa_r+0x78c>
 801310c:	4639      	mov	r1, r7
 801310e:	4632      	mov	r2, r6
 8013110:	4620      	mov	r0, r4
 8013112:	f000 fe1b 	bl	8013d4c <__pow5mult>
 8013116:	ee18 2a10 	vmov	r2, s16
 801311a:	4601      	mov	r1, r0
 801311c:	4607      	mov	r7, r0
 801311e:	4620      	mov	r0, r4
 8013120:	f000 fd6a 	bl	8013bf8 <__multiply>
 8013124:	ee18 1a10 	vmov	r1, s16
 8013128:	4680      	mov	r8, r0
 801312a:	4620      	mov	r0, r4
 801312c:	f000 fc96 	bl	8013a5c <_Bfree>
 8013130:	ee08 8a10 	vmov	s16, r8
 8013134:	9b07      	ldr	r3, [sp, #28]
 8013136:	1b9a      	subs	r2, r3, r6
 8013138:	d006      	beq.n	8013148 <_dtoa_r+0x7a0>
 801313a:	ee18 1a10 	vmov	r1, s16
 801313e:	4620      	mov	r0, r4
 8013140:	f000 fe04 	bl	8013d4c <__pow5mult>
 8013144:	ee08 0a10 	vmov	s16, r0
 8013148:	2101      	movs	r1, #1
 801314a:	4620      	mov	r0, r4
 801314c:	f000 fd3e 	bl	8013bcc <__i2b>
 8013150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013152:	2b00      	cmp	r3, #0
 8013154:	4606      	mov	r6, r0
 8013156:	f340 8088 	ble.w	801326a <_dtoa_r+0x8c2>
 801315a:	461a      	mov	r2, r3
 801315c:	4601      	mov	r1, r0
 801315e:	4620      	mov	r0, r4
 8013160:	f000 fdf4 	bl	8013d4c <__pow5mult>
 8013164:	9b06      	ldr	r3, [sp, #24]
 8013166:	2b01      	cmp	r3, #1
 8013168:	4606      	mov	r6, r0
 801316a:	f340 8081 	ble.w	8013270 <_dtoa_r+0x8c8>
 801316e:	f04f 0800 	mov.w	r8, #0
 8013172:	6933      	ldr	r3, [r6, #16]
 8013174:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013178:	6918      	ldr	r0, [r3, #16]
 801317a:	f000 fcd7 	bl	8013b2c <__hi0bits>
 801317e:	f1c0 0020 	rsb	r0, r0, #32
 8013182:	9b05      	ldr	r3, [sp, #20]
 8013184:	4418      	add	r0, r3
 8013186:	f010 001f 	ands.w	r0, r0, #31
 801318a:	f000 8092 	beq.w	80132b2 <_dtoa_r+0x90a>
 801318e:	f1c0 0320 	rsb	r3, r0, #32
 8013192:	2b04      	cmp	r3, #4
 8013194:	f340 808a 	ble.w	80132ac <_dtoa_r+0x904>
 8013198:	f1c0 001c 	rsb	r0, r0, #28
 801319c:	9b04      	ldr	r3, [sp, #16]
 801319e:	4403      	add	r3, r0
 80131a0:	9304      	str	r3, [sp, #16]
 80131a2:	9b05      	ldr	r3, [sp, #20]
 80131a4:	4403      	add	r3, r0
 80131a6:	4405      	add	r5, r0
 80131a8:	9305      	str	r3, [sp, #20]
 80131aa:	9b04      	ldr	r3, [sp, #16]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	dd07      	ble.n	80131c0 <_dtoa_r+0x818>
 80131b0:	ee18 1a10 	vmov	r1, s16
 80131b4:	461a      	mov	r2, r3
 80131b6:	4620      	mov	r0, r4
 80131b8:	f000 fe22 	bl	8013e00 <__lshift>
 80131bc:	ee08 0a10 	vmov	s16, r0
 80131c0:	9b05      	ldr	r3, [sp, #20]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	dd05      	ble.n	80131d2 <_dtoa_r+0x82a>
 80131c6:	4631      	mov	r1, r6
 80131c8:	461a      	mov	r2, r3
 80131ca:	4620      	mov	r0, r4
 80131cc:	f000 fe18 	bl	8013e00 <__lshift>
 80131d0:	4606      	mov	r6, r0
 80131d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d06e      	beq.n	80132b6 <_dtoa_r+0x90e>
 80131d8:	ee18 0a10 	vmov	r0, s16
 80131dc:	4631      	mov	r1, r6
 80131de:	f000 fe7f 	bl	8013ee0 <__mcmp>
 80131e2:	2800      	cmp	r0, #0
 80131e4:	da67      	bge.n	80132b6 <_dtoa_r+0x90e>
 80131e6:	9b00      	ldr	r3, [sp, #0]
 80131e8:	3b01      	subs	r3, #1
 80131ea:	ee18 1a10 	vmov	r1, s16
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	220a      	movs	r2, #10
 80131f2:	2300      	movs	r3, #0
 80131f4:	4620      	mov	r0, r4
 80131f6:	f000 fc53 	bl	8013aa0 <__multadd>
 80131fa:	9b08      	ldr	r3, [sp, #32]
 80131fc:	ee08 0a10 	vmov	s16, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 81b1 	beq.w	8013568 <_dtoa_r+0xbc0>
 8013206:	2300      	movs	r3, #0
 8013208:	4639      	mov	r1, r7
 801320a:	220a      	movs	r2, #10
 801320c:	4620      	mov	r0, r4
 801320e:	f000 fc47 	bl	8013aa0 <__multadd>
 8013212:	9b02      	ldr	r3, [sp, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	4607      	mov	r7, r0
 8013218:	f300 808e 	bgt.w	8013338 <_dtoa_r+0x990>
 801321c:	9b06      	ldr	r3, [sp, #24]
 801321e:	2b02      	cmp	r3, #2
 8013220:	dc51      	bgt.n	80132c6 <_dtoa_r+0x91e>
 8013222:	e089      	b.n	8013338 <_dtoa_r+0x990>
 8013224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801322a:	e74b      	b.n	80130c4 <_dtoa_r+0x71c>
 801322c:	9b03      	ldr	r3, [sp, #12]
 801322e:	1e5e      	subs	r6, r3, #1
 8013230:	9b07      	ldr	r3, [sp, #28]
 8013232:	42b3      	cmp	r3, r6
 8013234:	bfbf      	itttt	lt
 8013236:	9b07      	ldrlt	r3, [sp, #28]
 8013238:	9607      	strlt	r6, [sp, #28]
 801323a:	1af2      	sublt	r2, r6, r3
 801323c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801323e:	bfb6      	itet	lt
 8013240:	189b      	addlt	r3, r3, r2
 8013242:	1b9e      	subge	r6, r3, r6
 8013244:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013246:	9b03      	ldr	r3, [sp, #12]
 8013248:	bfb8      	it	lt
 801324a:	2600      	movlt	r6, #0
 801324c:	2b00      	cmp	r3, #0
 801324e:	bfb7      	itett	lt
 8013250:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013254:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013258:	1a9d      	sublt	r5, r3, r2
 801325a:	2300      	movlt	r3, #0
 801325c:	e734      	b.n	80130c8 <_dtoa_r+0x720>
 801325e:	9e07      	ldr	r6, [sp, #28]
 8013260:	9d04      	ldr	r5, [sp, #16]
 8013262:	9f08      	ldr	r7, [sp, #32]
 8013264:	e73b      	b.n	80130de <_dtoa_r+0x736>
 8013266:	9a07      	ldr	r2, [sp, #28]
 8013268:	e767      	b.n	801313a <_dtoa_r+0x792>
 801326a:	9b06      	ldr	r3, [sp, #24]
 801326c:	2b01      	cmp	r3, #1
 801326e:	dc18      	bgt.n	80132a2 <_dtoa_r+0x8fa>
 8013270:	f1ba 0f00 	cmp.w	sl, #0
 8013274:	d115      	bne.n	80132a2 <_dtoa_r+0x8fa>
 8013276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801327a:	b993      	cbnz	r3, 80132a2 <_dtoa_r+0x8fa>
 801327c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013280:	0d1b      	lsrs	r3, r3, #20
 8013282:	051b      	lsls	r3, r3, #20
 8013284:	b183      	cbz	r3, 80132a8 <_dtoa_r+0x900>
 8013286:	9b04      	ldr	r3, [sp, #16]
 8013288:	3301      	adds	r3, #1
 801328a:	9304      	str	r3, [sp, #16]
 801328c:	9b05      	ldr	r3, [sp, #20]
 801328e:	3301      	adds	r3, #1
 8013290:	9305      	str	r3, [sp, #20]
 8013292:	f04f 0801 	mov.w	r8, #1
 8013296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013298:	2b00      	cmp	r3, #0
 801329a:	f47f af6a 	bne.w	8013172 <_dtoa_r+0x7ca>
 801329e:	2001      	movs	r0, #1
 80132a0:	e76f      	b.n	8013182 <_dtoa_r+0x7da>
 80132a2:	f04f 0800 	mov.w	r8, #0
 80132a6:	e7f6      	b.n	8013296 <_dtoa_r+0x8ee>
 80132a8:	4698      	mov	r8, r3
 80132aa:	e7f4      	b.n	8013296 <_dtoa_r+0x8ee>
 80132ac:	f43f af7d 	beq.w	80131aa <_dtoa_r+0x802>
 80132b0:	4618      	mov	r0, r3
 80132b2:	301c      	adds	r0, #28
 80132b4:	e772      	b.n	801319c <_dtoa_r+0x7f4>
 80132b6:	9b03      	ldr	r3, [sp, #12]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	dc37      	bgt.n	801332c <_dtoa_r+0x984>
 80132bc:	9b06      	ldr	r3, [sp, #24]
 80132be:	2b02      	cmp	r3, #2
 80132c0:	dd34      	ble.n	801332c <_dtoa_r+0x984>
 80132c2:	9b03      	ldr	r3, [sp, #12]
 80132c4:	9302      	str	r3, [sp, #8]
 80132c6:	9b02      	ldr	r3, [sp, #8]
 80132c8:	b96b      	cbnz	r3, 80132e6 <_dtoa_r+0x93e>
 80132ca:	4631      	mov	r1, r6
 80132cc:	2205      	movs	r2, #5
 80132ce:	4620      	mov	r0, r4
 80132d0:	f000 fbe6 	bl	8013aa0 <__multadd>
 80132d4:	4601      	mov	r1, r0
 80132d6:	4606      	mov	r6, r0
 80132d8:	ee18 0a10 	vmov	r0, s16
 80132dc:	f000 fe00 	bl	8013ee0 <__mcmp>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	f73f adbb 	bgt.w	8012e5c <_dtoa_r+0x4b4>
 80132e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e8:	9d01      	ldr	r5, [sp, #4]
 80132ea:	43db      	mvns	r3, r3
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	f04f 0800 	mov.w	r8, #0
 80132f2:	4631      	mov	r1, r6
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 fbb1 	bl	8013a5c <_Bfree>
 80132fa:	2f00      	cmp	r7, #0
 80132fc:	f43f aea4 	beq.w	8013048 <_dtoa_r+0x6a0>
 8013300:	f1b8 0f00 	cmp.w	r8, #0
 8013304:	d005      	beq.n	8013312 <_dtoa_r+0x96a>
 8013306:	45b8      	cmp	r8, r7
 8013308:	d003      	beq.n	8013312 <_dtoa_r+0x96a>
 801330a:	4641      	mov	r1, r8
 801330c:	4620      	mov	r0, r4
 801330e:	f000 fba5 	bl	8013a5c <_Bfree>
 8013312:	4639      	mov	r1, r7
 8013314:	4620      	mov	r0, r4
 8013316:	f000 fba1 	bl	8013a5c <_Bfree>
 801331a:	e695      	b.n	8013048 <_dtoa_r+0x6a0>
 801331c:	2600      	movs	r6, #0
 801331e:	4637      	mov	r7, r6
 8013320:	e7e1      	b.n	80132e6 <_dtoa_r+0x93e>
 8013322:	9700      	str	r7, [sp, #0]
 8013324:	4637      	mov	r7, r6
 8013326:	e599      	b.n	8012e5c <_dtoa_r+0x4b4>
 8013328:	40240000 	.word	0x40240000
 801332c:	9b08      	ldr	r3, [sp, #32]
 801332e:	2b00      	cmp	r3, #0
 8013330:	f000 80ca 	beq.w	80134c8 <_dtoa_r+0xb20>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	9302      	str	r3, [sp, #8]
 8013338:	2d00      	cmp	r5, #0
 801333a:	dd05      	ble.n	8013348 <_dtoa_r+0x9a0>
 801333c:	4639      	mov	r1, r7
 801333e:	462a      	mov	r2, r5
 8013340:	4620      	mov	r0, r4
 8013342:	f000 fd5d 	bl	8013e00 <__lshift>
 8013346:	4607      	mov	r7, r0
 8013348:	f1b8 0f00 	cmp.w	r8, #0
 801334c:	d05b      	beq.n	8013406 <_dtoa_r+0xa5e>
 801334e:	6879      	ldr	r1, [r7, #4]
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fb43 	bl	80139dc <_Balloc>
 8013356:	4605      	mov	r5, r0
 8013358:	b928      	cbnz	r0, 8013366 <_dtoa_r+0x9be>
 801335a:	4b87      	ldr	r3, [pc, #540]	; (8013578 <_dtoa_r+0xbd0>)
 801335c:	4602      	mov	r2, r0
 801335e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013362:	f7ff bb3b 	b.w	80129dc <_dtoa_r+0x34>
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	3202      	adds	r2, #2
 801336a:	0092      	lsls	r2, r2, #2
 801336c:	f107 010c 	add.w	r1, r7, #12
 8013370:	300c      	adds	r0, #12
 8013372:	f7fe fbbb 	bl	8011aec <memcpy>
 8013376:	2201      	movs	r2, #1
 8013378:	4629      	mov	r1, r5
 801337a:	4620      	mov	r0, r4
 801337c:	f000 fd40 	bl	8013e00 <__lshift>
 8013380:	9b01      	ldr	r3, [sp, #4]
 8013382:	f103 0901 	add.w	r9, r3, #1
 8013386:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801338a:	4413      	add	r3, r2
 801338c:	9305      	str	r3, [sp, #20]
 801338e:	f00a 0301 	and.w	r3, sl, #1
 8013392:	46b8      	mov	r8, r7
 8013394:	9304      	str	r3, [sp, #16]
 8013396:	4607      	mov	r7, r0
 8013398:	4631      	mov	r1, r6
 801339a:	ee18 0a10 	vmov	r0, s16
 801339e:	f7ff fa77 	bl	8012890 <quorem>
 80133a2:	4641      	mov	r1, r8
 80133a4:	9002      	str	r0, [sp, #8]
 80133a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80133aa:	ee18 0a10 	vmov	r0, s16
 80133ae:	f000 fd97 	bl	8013ee0 <__mcmp>
 80133b2:	463a      	mov	r2, r7
 80133b4:	9003      	str	r0, [sp, #12]
 80133b6:	4631      	mov	r1, r6
 80133b8:	4620      	mov	r0, r4
 80133ba:	f000 fdad 	bl	8013f18 <__mdiff>
 80133be:	68c2      	ldr	r2, [r0, #12]
 80133c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80133c4:	4605      	mov	r5, r0
 80133c6:	bb02      	cbnz	r2, 801340a <_dtoa_r+0xa62>
 80133c8:	4601      	mov	r1, r0
 80133ca:	ee18 0a10 	vmov	r0, s16
 80133ce:	f000 fd87 	bl	8013ee0 <__mcmp>
 80133d2:	4602      	mov	r2, r0
 80133d4:	4629      	mov	r1, r5
 80133d6:	4620      	mov	r0, r4
 80133d8:	9207      	str	r2, [sp, #28]
 80133da:	f000 fb3f 	bl	8013a5c <_Bfree>
 80133de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80133e2:	ea43 0102 	orr.w	r1, r3, r2
 80133e6:	9b04      	ldr	r3, [sp, #16]
 80133e8:	430b      	orrs	r3, r1
 80133ea:	464d      	mov	r5, r9
 80133ec:	d10f      	bne.n	801340e <_dtoa_r+0xa66>
 80133ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80133f2:	d02a      	beq.n	801344a <_dtoa_r+0xaa2>
 80133f4:	9b03      	ldr	r3, [sp, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	dd02      	ble.n	8013400 <_dtoa_r+0xa58>
 80133fa:	9b02      	ldr	r3, [sp, #8]
 80133fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013400:	f88b a000 	strb.w	sl, [fp]
 8013404:	e775      	b.n	80132f2 <_dtoa_r+0x94a>
 8013406:	4638      	mov	r0, r7
 8013408:	e7ba      	b.n	8013380 <_dtoa_r+0x9d8>
 801340a:	2201      	movs	r2, #1
 801340c:	e7e2      	b.n	80133d4 <_dtoa_r+0xa2c>
 801340e:	9b03      	ldr	r3, [sp, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	db04      	blt.n	801341e <_dtoa_r+0xa76>
 8013414:	9906      	ldr	r1, [sp, #24]
 8013416:	430b      	orrs	r3, r1
 8013418:	9904      	ldr	r1, [sp, #16]
 801341a:	430b      	orrs	r3, r1
 801341c:	d122      	bne.n	8013464 <_dtoa_r+0xabc>
 801341e:	2a00      	cmp	r2, #0
 8013420:	ddee      	ble.n	8013400 <_dtoa_r+0xa58>
 8013422:	ee18 1a10 	vmov	r1, s16
 8013426:	2201      	movs	r2, #1
 8013428:	4620      	mov	r0, r4
 801342a:	f000 fce9 	bl	8013e00 <__lshift>
 801342e:	4631      	mov	r1, r6
 8013430:	ee08 0a10 	vmov	s16, r0
 8013434:	f000 fd54 	bl	8013ee0 <__mcmp>
 8013438:	2800      	cmp	r0, #0
 801343a:	dc03      	bgt.n	8013444 <_dtoa_r+0xa9c>
 801343c:	d1e0      	bne.n	8013400 <_dtoa_r+0xa58>
 801343e:	f01a 0f01 	tst.w	sl, #1
 8013442:	d0dd      	beq.n	8013400 <_dtoa_r+0xa58>
 8013444:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013448:	d1d7      	bne.n	80133fa <_dtoa_r+0xa52>
 801344a:	2339      	movs	r3, #57	; 0x39
 801344c:	f88b 3000 	strb.w	r3, [fp]
 8013450:	462b      	mov	r3, r5
 8013452:	461d      	mov	r5, r3
 8013454:	3b01      	subs	r3, #1
 8013456:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801345a:	2a39      	cmp	r2, #57	; 0x39
 801345c:	d071      	beq.n	8013542 <_dtoa_r+0xb9a>
 801345e:	3201      	adds	r2, #1
 8013460:	701a      	strb	r2, [r3, #0]
 8013462:	e746      	b.n	80132f2 <_dtoa_r+0x94a>
 8013464:	2a00      	cmp	r2, #0
 8013466:	dd07      	ble.n	8013478 <_dtoa_r+0xad0>
 8013468:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801346c:	d0ed      	beq.n	801344a <_dtoa_r+0xaa2>
 801346e:	f10a 0301 	add.w	r3, sl, #1
 8013472:	f88b 3000 	strb.w	r3, [fp]
 8013476:	e73c      	b.n	80132f2 <_dtoa_r+0x94a>
 8013478:	9b05      	ldr	r3, [sp, #20]
 801347a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801347e:	4599      	cmp	r9, r3
 8013480:	d047      	beq.n	8013512 <_dtoa_r+0xb6a>
 8013482:	ee18 1a10 	vmov	r1, s16
 8013486:	2300      	movs	r3, #0
 8013488:	220a      	movs	r2, #10
 801348a:	4620      	mov	r0, r4
 801348c:	f000 fb08 	bl	8013aa0 <__multadd>
 8013490:	45b8      	cmp	r8, r7
 8013492:	ee08 0a10 	vmov	s16, r0
 8013496:	f04f 0300 	mov.w	r3, #0
 801349a:	f04f 020a 	mov.w	r2, #10
 801349e:	4641      	mov	r1, r8
 80134a0:	4620      	mov	r0, r4
 80134a2:	d106      	bne.n	80134b2 <_dtoa_r+0xb0a>
 80134a4:	f000 fafc 	bl	8013aa0 <__multadd>
 80134a8:	4680      	mov	r8, r0
 80134aa:	4607      	mov	r7, r0
 80134ac:	f109 0901 	add.w	r9, r9, #1
 80134b0:	e772      	b.n	8013398 <_dtoa_r+0x9f0>
 80134b2:	f000 faf5 	bl	8013aa0 <__multadd>
 80134b6:	4639      	mov	r1, r7
 80134b8:	4680      	mov	r8, r0
 80134ba:	2300      	movs	r3, #0
 80134bc:	220a      	movs	r2, #10
 80134be:	4620      	mov	r0, r4
 80134c0:	f000 faee 	bl	8013aa0 <__multadd>
 80134c4:	4607      	mov	r7, r0
 80134c6:	e7f1      	b.n	80134ac <_dtoa_r+0xb04>
 80134c8:	9b03      	ldr	r3, [sp, #12]
 80134ca:	9302      	str	r3, [sp, #8]
 80134cc:	9d01      	ldr	r5, [sp, #4]
 80134ce:	ee18 0a10 	vmov	r0, s16
 80134d2:	4631      	mov	r1, r6
 80134d4:	f7ff f9dc 	bl	8012890 <quorem>
 80134d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80134dc:	9b01      	ldr	r3, [sp, #4]
 80134de:	f805 ab01 	strb.w	sl, [r5], #1
 80134e2:	1aea      	subs	r2, r5, r3
 80134e4:	9b02      	ldr	r3, [sp, #8]
 80134e6:	4293      	cmp	r3, r2
 80134e8:	dd09      	ble.n	80134fe <_dtoa_r+0xb56>
 80134ea:	ee18 1a10 	vmov	r1, s16
 80134ee:	2300      	movs	r3, #0
 80134f0:	220a      	movs	r2, #10
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 fad4 	bl	8013aa0 <__multadd>
 80134f8:	ee08 0a10 	vmov	s16, r0
 80134fc:	e7e7      	b.n	80134ce <_dtoa_r+0xb26>
 80134fe:	9b02      	ldr	r3, [sp, #8]
 8013500:	2b00      	cmp	r3, #0
 8013502:	bfc8      	it	gt
 8013504:	461d      	movgt	r5, r3
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	bfd8      	it	le
 801350a:	2501      	movle	r5, #1
 801350c:	441d      	add	r5, r3
 801350e:	f04f 0800 	mov.w	r8, #0
 8013512:	ee18 1a10 	vmov	r1, s16
 8013516:	2201      	movs	r2, #1
 8013518:	4620      	mov	r0, r4
 801351a:	f000 fc71 	bl	8013e00 <__lshift>
 801351e:	4631      	mov	r1, r6
 8013520:	ee08 0a10 	vmov	s16, r0
 8013524:	f000 fcdc 	bl	8013ee0 <__mcmp>
 8013528:	2800      	cmp	r0, #0
 801352a:	dc91      	bgt.n	8013450 <_dtoa_r+0xaa8>
 801352c:	d102      	bne.n	8013534 <_dtoa_r+0xb8c>
 801352e:	f01a 0f01 	tst.w	sl, #1
 8013532:	d18d      	bne.n	8013450 <_dtoa_r+0xaa8>
 8013534:	462b      	mov	r3, r5
 8013536:	461d      	mov	r5, r3
 8013538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801353c:	2a30      	cmp	r2, #48	; 0x30
 801353e:	d0fa      	beq.n	8013536 <_dtoa_r+0xb8e>
 8013540:	e6d7      	b.n	80132f2 <_dtoa_r+0x94a>
 8013542:	9a01      	ldr	r2, [sp, #4]
 8013544:	429a      	cmp	r2, r3
 8013546:	d184      	bne.n	8013452 <_dtoa_r+0xaaa>
 8013548:	9b00      	ldr	r3, [sp, #0]
 801354a:	3301      	adds	r3, #1
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	2331      	movs	r3, #49	; 0x31
 8013550:	7013      	strb	r3, [r2, #0]
 8013552:	e6ce      	b.n	80132f2 <_dtoa_r+0x94a>
 8013554:	4b09      	ldr	r3, [pc, #36]	; (801357c <_dtoa_r+0xbd4>)
 8013556:	f7ff ba95 	b.w	8012a84 <_dtoa_r+0xdc>
 801355a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801355c:	2b00      	cmp	r3, #0
 801355e:	f47f aa6e 	bne.w	8012a3e <_dtoa_r+0x96>
 8013562:	4b07      	ldr	r3, [pc, #28]	; (8013580 <_dtoa_r+0xbd8>)
 8013564:	f7ff ba8e 	b.w	8012a84 <_dtoa_r+0xdc>
 8013568:	9b02      	ldr	r3, [sp, #8]
 801356a:	2b00      	cmp	r3, #0
 801356c:	dcae      	bgt.n	80134cc <_dtoa_r+0xb24>
 801356e:	9b06      	ldr	r3, [sp, #24]
 8013570:	2b02      	cmp	r3, #2
 8013572:	f73f aea8 	bgt.w	80132c6 <_dtoa_r+0x91e>
 8013576:	e7a9      	b.n	80134cc <_dtoa_r+0xb24>
 8013578:	08014f17 	.word	0x08014f17
 801357c:	08014e74 	.word	0x08014e74
 8013580:	08014e98 	.word	0x08014e98

08013584 <__sflush_r>:
 8013584:	898a      	ldrh	r2, [r1, #12]
 8013586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801358a:	4605      	mov	r5, r0
 801358c:	0710      	lsls	r0, r2, #28
 801358e:	460c      	mov	r4, r1
 8013590:	d458      	bmi.n	8013644 <__sflush_r+0xc0>
 8013592:	684b      	ldr	r3, [r1, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	dc05      	bgt.n	80135a4 <__sflush_r+0x20>
 8013598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801359a:	2b00      	cmp	r3, #0
 801359c:	dc02      	bgt.n	80135a4 <__sflush_r+0x20>
 801359e:	2000      	movs	r0, #0
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135a6:	2e00      	cmp	r6, #0
 80135a8:	d0f9      	beq.n	801359e <__sflush_r+0x1a>
 80135aa:	2300      	movs	r3, #0
 80135ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80135b0:	682f      	ldr	r7, [r5, #0]
 80135b2:	602b      	str	r3, [r5, #0]
 80135b4:	d032      	beq.n	801361c <__sflush_r+0x98>
 80135b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135b8:	89a3      	ldrh	r3, [r4, #12]
 80135ba:	075a      	lsls	r2, r3, #29
 80135bc:	d505      	bpl.n	80135ca <__sflush_r+0x46>
 80135be:	6863      	ldr	r3, [r4, #4]
 80135c0:	1ac0      	subs	r0, r0, r3
 80135c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135c4:	b10b      	cbz	r3, 80135ca <__sflush_r+0x46>
 80135c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135c8:	1ac0      	subs	r0, r0, r3
 80135ca:	2300      	movs	r3, #0
 80135cc:	4602      	mov	r2, r0
 80135ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135d0:	6a21      	ldr	r1, [r4, #32]
 80135d2:	4628      	mov	r0, r5
 80135d4:	47b0      	blx	r6
 80135d6:	1c43      	adds	r3, r0, #1
 80135d8:	89a3      	ldrh	r3, [r4, #12]
 80135da:	d106      	bne.n	80135ea <__sflush_r+0x66>
 80135dc:	6829      	ldr	r1, [r5, #0]
 80135de:	291d      	cmp	r1, #29
 80135e0:	d82c      	bhi.n	801363c <__sflush_r+0xb8>
 80135e2:	4a2a      	ldr	r2, [pc, #168]	; (801368c <__sflush_r+0x108>)
 80135e4:	40ca      	lsrs	r2, r1
 80135e6:	07d6      	lsls	r6, r2, #31
 80135e8:	d528      	bpl.n	801363c <__sflush_r+0xb8>
 80135ea:	2200      	movs	r2, #0
 80135ec:	6062      	str	r2, [r4, #4]
 80135ee:	04d9      	lsls	r1, r3, #19
 80135f0:	6922      	ldr	r2, [r4, #16]
 80135f2:	6022      	str	r2, [r4, #0]
 80135f4:	d504      	bpl.n	8013600 <__sflush_r+0x7c>
 80135f6:	1c42      	adds	r2, r0, #1
 80135f8:	d101      	bne.n	80135fe <__sflush_r+0x7a>
 80135fa:	682b      	ldr	r3, [r5, #0]
 80135fc:	b903      	cbnz	r3, 8013600 <__sflush_r+0x7c>
 80135fe:	6560      	str	r0, [r4, #84]	; 0x54
 8013600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013602:	602f      	str	r7, [r5, #0]
 8013604:	2900      	cmp	r1, #0
 8013606:	d0ca      	beq.n	801359e <__sflush_r+0x1a>
 8013608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801360c:	4299      	cmp	r1, r3
 801360e:	d002      	beq.n	8013616 <__sflush_r+0x92>
 8013610:	4628      	mov	r0, r5
 8013612:	f000 fd7d 	bl	8014110 <_free_r>
 8013616:	2000      	movs	r0, #0
 8013618:	6360      	str	r0, [r4, #52]	; 0x34
 801361a:	e7c1      	b.n	80135a0 <__sflush_r+0x1c>
 801361c:	6a21      	ldr	r1, [r4, #32]
 801361e:	2301      	movs	r3, #1
 8013620:	4628      	mov	r0, r5
 8013622:	47b0      	blx	r6
 8013624:	1c41      	adds	r1, r0, #1
 8013626:	d1c7      	bne.n	80135b8 <__sflush_r+0x34>
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d0c4      	beq.n	80135b8 <__sflush_r+0x34>
 801362e:	2b1d      	cmp	r3, #29
 8013630:	d001      	beq.n	8013636 <__sflush_r+0xb2>
 8013632:	2b16      	cmp	r3, #22
 8013634:	d101      	bne.n	801363a <__sflush_r+0xb6>
 8013636:	602f      	str	r7, [r5, #0]
 8013638:	e7b1      	b.n	801359e <__sflush_r+0x1a>
 801363a:	89a3      	ldrh	r3, [r4, #12]
 801363c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013640:	81a3      	strh	r3, [r4, #12]
 8013642:	e7ad      	b.n	80135a0 <__sflush_r+0x1c>
 8013644:	690f      	ldr	r7, [r1, #16]
 8013646:	2f00      	cmp	r7, #0
 8013648:	d0a9      	beq.n	801359e <__sflush_r+0x1a>
 801364a:	0793      	lsls	r3, r2, #30
 801364c:	680e      	ldr	r6, [r1, #0]
 801364e:	bf08      	it	eq
 8013650:	694b      	ldreq	r3, [r1, #20]
 8013652:	600f      	str	r7, [r1, #0]
 8013654:	bf18      	it	ne
 8013656:	2300      	movne	r3, #0
 8013658:	eba6 0807 	sub.w	r8, r6, r7
 801365c:	608b      	str	r3, [r1, #8]
 801365e:	f1b8 0f00 	cmp.w	r8, #0
 8013662:	dd9c      	ble.n	801359e <__sflush_r+0x1a>
 8013664:	6a21      	ldr	r1, [r4, #32]
 8013666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013668:	4643      	mov	r3, r8
 801366a:	463a      	mov	r2, r7
 801366c:	4628      	mov	r0, r5
 801366e:	47b0      	blx	r6
 8013670:	2800      	cmp	r0, #0
 8013672:	dc06      	bgt.n	8013682 <__sflush_r+0xfe>
 8013674:	89a3      	ldrh	r3, [r4, #12]
 8013676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801367a:	81a3      	strh	r3, [r4, #12]
 801367c:	f04f 30ff 	mov.w	r0, #4294967295
 8013680:	e78e      	b.n	80135a0 <__sflush_r+0x1c>
 8013682:	4407      	add	r7, r0
 8013684:	eba8 0800 	sub.w	r8, r8, r0
 8013688:	e7e9      	b.n	801365e <__sflush_r+0xda>
 801368a:	bf00      	nop
 801368c:	20400001 	.word	0x20400001

08013690 <_fflush_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	690b      	ldr	r3, [r1, #16]
 8013694:	4605      	mov	r5, r0
 8013696:	460c      	mov	r4, r1
 8013698:	b913      	cbnz	r3, 80136a0 <_fflush_r+0x10>
 801369a:	2500      	movs	r5, #0
 801369c:	4628      	mov	r0, r5
 801369e:	bd38      	pop	{r3, r4, r5, pc}
 80136a0:	b118      	cbz	r0, 80136aa <_fflush_r+0x1a>
 80136a2:	6983      	ldr	r3, [r0, #24]
 80136a4:	b90b      	cbnz	r3, 80136aa <_fflush_r+0x1a>
 80136a6:	f000 f887 	bl	80137b8 <__sinit>
 80136aa:	4b14      	ldr	r3, [pc, #80]	; (80136fc <_fflush_r+0x6c>)
 80136ac:	429c      	cmp	r4, r3
 80136ae:	d11b      	bne.n	80136e8 <_fflush_r+0x58>
 80136b0:	686c      	ldr	r4, [r5, #4]
 80136b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d0ef      	beq.n	801369a <_fflush_r+0xa>
 80136ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80136bc:	07d0      	lsls	r0, r2, #31
 80136be:	d404      	bmi.n	80136ca <_fflush_r+0x3a>
 80136c0:	0599      	lsls	r1, r3, #22
 80136c2:	d402      	bmi.n	80136ca <_fflush_r+0x3a>
 80136c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136c6:	f000 f91a 	bl	80138fe <__retarget_lock_acquire_recursive>
 80136ca:	4628      	mov	r0, r5
 80136cc:	4621      	mov	r1, r4
 80136ce:	f7ff ff59 	bl	8013584 <__sflush_r>
 80136d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136d4:	07da      	lsls	r2, r3, #31
 80136d6:	4605      	mov	r5, r0
 80136d8:	d4e0      	bmi.n	801369c <_fflush_r+0xc>
 80136da:	89a3      	ldrh	r3, [r4, #12]
 80136dc:	059b      	lsls	r3, r3, #22
 80136de:	d4dd      	bmi.n	801369c <_fflush_r+0xc>
 80136e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136e2:	f000 f90d 	bl	8013900 <__retarget_lock_release_recursive>
 80136e6:	e7d9      	b.n	801369c <_fflush_r+0xc>
 80136e8:	4b05      	ldr	r3, [pc, #20]	; (8013700 <_fflush_r+0x70>)
 80136ea:	429c      	cmp	r4, r3
 80136ec:	d101      	bne.n	80136f2 <_fflush_r+0x62>
 80136ee:	68ac      	ldr	r4, [r5, #8]
 80136f0:	e7df      	b.n	80136b2 <_fflush_r+0x22>
 80136f2:	4b04      	ldr	r3, [pc, #16]	; (8013704 <_fflush_r+0x74>)
 80136f4:	429c      	cmp	r4, r3
 80136f6:	bf08      	it	eq
 80136f8:	68ec      	ldreq	r4, [r5, #12]
 80136fa:	e7da      	b.n	80136b2 <_fflush_r+0x22>
 80136fc:	08014f48 	.word	0x08014f48
 8013700:	08014f68 	.word	0x08014f68
 8013704:	08014f28 	.word	0x08014f28

08013708 <std>:
 8013708:	2300      	movs	r3, #0
 801370a:	b510      	push	{r4, lr}
 801370c:	4604      	mov	r4, r0
 801370e:	e9c0 3300 	strd	r3, r3, [r0]
 8013712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013716:	6083      	str	r3, [r0, #8]
 8013718:	8181      	strh	r1, [r0, #12]
 801371a:	6643      	str	r3, [r0, #100]	; 0x64
 801371c:	81c2      	strh	r2, [r0, #14]
 801371e:	6183      	str	r3, [r0, #24]
 8013720:	4619      	mov	r1, r3
 8013722:	2208      	movs	r2, #8
 8013724:	305c      	adds	r0, #92	; 0x5c
 8013726:	f7fe f9ef 	bl	8011b08 <memset>
 801372a:	4b05      	ldr	r3, [pc, #20]	; (8013740 <std+0x38>)
 801372c:	6263      	str	r3, [r4, #36]	; 0x24
 801372e:	4b05      	ldr	r3, [pc, #20]	; (8013744 <std+0x3c>)
 8013730:	62a3      	str	r3, [r4, #40]	; 0x28
 8013732:	4b05      	ldr	r3, [pc, #20]	; (8013748 <std+0x40>)
 8013734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013736:	4b05      	ldr	r3, [pc, #20]	; (801374c <std+0x44>)
 8013738:	6224      	str	r4, [r4, #32]
 801373a:	6323      	str	r3, [r4, #48]	; 0x30
 801373c:	bd10      	pop	{r4, pc}
 801373e:	bf00      	nop
 8013740:	080148ed 	.word	0x080148ed
 8013744:	0801490f 	.word	0x0801490f
 8013748:	08014947 	.word	0x08014947
 801374c:	0801496b 	.word	0x0801496b

08013750 <_cleanup_r>:
 8013750:	4901      	ldr	r1, [pc, #4]	; (8013758 <_cleanup_r+0x8>)
 8013752:	f000 b8af 	b.w	80138b4 <_fwalk_reent>
 8013756:	bf00      	nop
 8013758:	08013691 	.word	0x08013691

0801375c <__sfmoreglue>:
 801375c:	b570      	push	{r4, r5, r6, lr}
 801375e:	2268      	movs	r2, #104	; 0x68
 8013760:	1e4d      	subs	r5, r1, #1
 8013762:	4355      	muls	r5, r2
 8013764:	460e      	mov	r6, r1
 8013766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801376a:	f000 fd3d 	bl	80141e8 <_malloc_r>
 801376e:	4604      	mov	r4, r0
 8013770:	b140      	cbz	r0, 8013784 <__sfmoreglue+0x28>
 8013772:	2100      	movs	r1, #0
 8013774:	e9c0 1600 	strd	r1, r6, [r0]
 8013778:	300c      	adds	r0, #12
 801377a:	60a0      	str	r0, [r4, #8]
 801377c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013780:	f7fe f9c2 	bl	8011b08 <memset>
 8013784:	4620      	mov	r0, r4
 8013786:	bd70      	pop	{r4, r5, r6, pc}

08013788 <__sfp_lock_acquire>:
 8013788:	4801      	ldr	r0, [pc, #4]	; (8013790 <__sfp_lock_acquire+0x8>)
 801378a:	f000 b8b8 	b.w	80138fe <__retarget_lock_acquire_recursive>
 801378e:	bf00      	nop
 8013790:	2000cfb5 	.word	0x2000cfb5

08013794 <__sfp_lock_release>:
 8013794:	4801      	ldr	r0, [pc, #4]	; (801379c <__sfp_lock_release+0x8>)
 8013796:	f000 b8b3 	b.w	8013900 <__retarget_lock_release_recursive>
 801379a:	bf00      	nop
 801379c:	2000cfb5 	.word	0x2000cfb5

080137a0 <__sinit_lock_acquire>:
 80137a0:	4801      	ldr	r0, [pc, #4]	; (80137a8 <__sinit_lock_acquire+0x8>)
 80137a2:	f000 b8ac 	b.w	80138fe <__retarget_lock_acquire_recursive>
 80137a6:	bf00      	nop
 80137a8:	2000cfb6 	.word	0x2000cfb6

080137ac <__sinit_lock_release>:
 80137ac:	4801      	ldr	r0, [pc, #4]	; (80137b4 <__sinit_lock_release+0x8>)
 80137ae:	f000 b8a7 	b.w	8013900 <__retarget_lock_release_recursive>
 80137b2:	bf00      	nop
 80137b4:	2000cfb6 	.word	0x2000cfb6

080137b8 <__sinit>:
 80137b8:	b510      	push	{r4, lr}
 80137ba:	4604      	mov	r4, r0
 80137bc:	f7ff fff0 	bl	80137a0 <__sinit_lock_acquire>
 80137c0:	69a3      	ldr	r3, [r4, #24]
 80137c2:	b11b      	cbz	r3, 80137cc <__sinit+0x14>
 80137c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137c8:	f7ff bff0 	b.w	80137ac <__sinit_lock_release>
 80137cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80137d0:	6523      	str	r3, [r4, #80]	; 0x50
 80137d2:	4b13      	ldr	r3, [pc, #76]	; (8013820 <__sinit+0x68>)
 80137d4:	4a13      	ldr	r2, [pc, #76]	; (8013824 <__sinit+0x6c>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80137da:	42a3      	cmp	r3, r4
 80137dc:	bf04      	itt	eq
 80137de:	2301      	moveq	r3, #1
 80137e0:	61a3      	streq	r3, [r4, #24]
 80137e2:	4620      	mov	r0, r4
 80137e4:	f000 f820 	bl	8013828 <__sfp>
 80137e8:	6060      	str	r0, [r4, #4]
 80137ea:	4620      	mov	r0, r4
 80137ec:	f000 f81c 	bl	8013828 <__sfp>
 80137f0:	60a0      	str	r0, [r4, #8]
 80137f2:	4620      	mov	r0, r4
 80137f4:	f000 f818 	bl	8013828 <__sfp>
 80137f8:	2200      	movs	r2, #0
 80137fa:	60e0      	str	r0, [r4, #12]
 80137fc:	2104      	movs	r1, #4
 80137fe:	6860      	ldr	r0, [r4, #4]
 8013800:	f7ff ff82 	bl	8013708 <std>
 8013804:	68a0      	ldr	r0, [r4, #8]
 8013806:	2201      	movs	r2, #1
 8013808:	2109      	movs	r1, #9
 801380a:	f7ff ff7d 	bl	8013708 <std>
 801380e:	68e0      	ldr	r0, [r4, #12]
 8013810:	2202      	movs	r2, #2
 8013812:	2112      	movs	r1, #18
 8013814:	f7ff ff78 	bl	8013708 <std>
 8013818:	2301      	movs	r3, #1
 801381a:	61a3      	str	r3, [r4, #24]
 801381c:	e7d2      	b.n	80137c4 <__sinit+0xc>
 801381e:	bf00      	nop
 8013820:	08014e60 	.word	0x08014e60
 8013824:	08013751 	.word	0x08013751

08013828 <__sfp>:
 8013828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801382a:	4607      	mov	r7, r0
 801382c:	f7ff ffac 	bl	8013788 <__sfp_lock_acquire>
 8013830:	4b1e      	ldr	r3, [pc, #120]	; (80138ac <__sfp+0x84>)
 8013832:	681e      	ldr	r6, [r3, #0]
 8013834:	69b3      	ldr	r3, [r6, #24]
 8013836:	b913      	cbnz	r3, 801383e <__sfp+0x16>
 8013838:	4630      	mov	r0, r6
 801383a:	f7ff ffbd 	bl	80137b8 <__sinit>
 801383e:	3648      	adds	r6, #72	; 0x48
 8013840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013844:	3b01      	subs	r3, #1
 8013846:	d503      	bpl.n	8013850 <__sfp+0x28>
 8013848:	6833      	ldr	r3, [r6, #0]
 801384a:	b30b      	cbz	r3, 8013890 <__sfp+0x68>
 801384c:	6836      	ldr	r6, [r6, #0]
 801384e:	e7f7      	b.n	8013840 <__sfp+0x18>
 8013850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013854:	b9d5      	cbnz	r5, 801388c <__sfp+0x64>
 8013856:	4b16      	ldr	r3, [pc, #88]	; (80138b0 <__sfp+0x88>)
 8013858:	60e3      	str	r3, [r4, #12]
 801385a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801385e:	6665      	str	r5, [r4, #100]	; 0x64
 8013860:	f000 f84c 	bl	80138fc <__retarget_lock_init_recursive>
 8013864:	f7ff ff96 	bl	8013794 <__sfp_lock_release>
 8013868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801386c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013870:	6025      	str	r5, [r4, #0]
 8013872:	61a5      	str	r5, [r4, #24]
 8013874:	2208      	movs	r2, #8
 8013876:	4629      	mov	r1, r5
 8013878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801387c:	f7fe f944 	bl	8011b08 <memset>
 8013880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013888:	4620      	mov	r0, r4
 801388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801388c:	3468      	adds	r4, #104	; 0x68
 801388e:	e7d9      	b.n	8013844 <__sfp+0x1c>
 8013890:	2104      	movs	r1, #4
 8013892:	4638      	mov	r0, r7
 8013894:	f7ff ff62 	bl	801375c <__sfmoreglue>
 8013898:	4604      	mov	r4, r0
 801389a:	6030      	str	r0, [r6, #0]
 801389c:	2800      	cmp	r0, #0
 801389e:	d1d5      	bne.n	801384c <__sfp+0x24>
 80138a0:	f7ff ff78 	bl	8013794 <__sfp_lock_release>
 80138a4:	230c      	movs	r3, #12
 80138a6:	603b      	str	r3, [r7, #0]
 80138a8:	e7ee      	b.n	8013888 <__sfp+0x60>
 80138aa:	bf00      	nop
 80138ac:	08014e60 	.word	0x08014e60
 80138b0:	ffff0001 	.word	0xffff0001

080138b4 <_fwalk_reent>:
 80138b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138b8:	4606      	mov	r6, r0
 80138ba:	4688      	mov	r8, r1
 80138bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80138c0:	2700      	movs	r7, #0
 80138c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138c6:	f1b9 0901 	subs.w	r9, r9, #1
 80138ca:	d505      	bpl.n	80138d8 <_fwalk_reent+0x24>
 80138cc:	6824      	ldr	r4, [r4, #0]
 80138ce:	2c00      	cmp	r4, #0
 80138d0:	d1f7      	bne.n	80138c2 <_fwalk_reent+0xe>
 80138d2:	4638      	mov	r0, r7
 80138d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d8:	89ab      	ldrh	r3, [r5, #12]
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d907      	bls.n	80138ee <_fwalk_reent+0x3a>
 80138de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138e2:	3301      	adds	r3, #1
 80138e4:	d003      	beq.n	80138ee <_fwalk_reent+0x3a>
 80138e6:	4629      	mov	r1, r5
 80138e8:	4630      	mov	r0, r6
 80138ea:	47c0      	blx	r8
 80138ec:	4307      	orrs	r7, r0
 80138ee:	3568      	adds	r5, #104	; 0x68
 80138f0:	e7e9      	b.n	80138c6 <_fwalk_reent+0x12>
	...

080138f4 <_localeconv_r>:
 80138f4:	4800      	ldr	r0, [pc, #0]	; (80138f8 <_localeconv_r+0x4>)
 80138f6:	4770      	bx	lr
 80138f8:	20000160 	.word	0x20000160

080138fc <__retarget_lock_init_recursive>:
 80138fc:	4770      	bx	lr

080138fe <__retarget_lock_acquire_recursive>:
 80138fe:	4770      	bx	lr

08013900 <__retarget_lock_release_recursive>:
 8013900:	4770      	bx	lr

08013902 <__swhatbuf_r>:
 8013902:	b570      	push	{r4, r5, r6, lr}
 8013904:	460e      	mov	r6, r1
 8013906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801390a:	2900      	cmp	r1, #0
 801390c:	b096      	sub	sp, #88	; 0x58
 801390e:	4614      	mov	r4, r2
 8013910:	461d      	mov	r5, r3
 8013912:	da08      	bge.n	8013926 <__swhatbuf_r+0x24>
 8013914:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013918:	2200      	movs	r2, #0
 801391a:	602a      	str	r2, [r5, #0]
 801391c:	061a      	lsls	r2, r3, #24
 801391e:	d410      	bmi.n	8013942 <__swhatbuf_r+0x40>
 8013920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013924:	e00e      	b.n	8013944 <__swhatbuf_r+0x42>
 8013926:	466a      	mov	r2, sp
 8013928:	f001 f876 	bl	8014a18 <_fstat_r>
 801392c:	2800      	cmp	r0, #0
 801392e:	dbf1      	blt.n	8013914 <__swhatbuf_r+0x12>
 8013930:	9a01      	ldr	r2, [sp, #4]
 8013932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801393a:	425a      	negs	r2, r3
 801393c:	415a      	adcs	r2, r3
 801393e:	602a      	str	r2, [r5, #0]
 8013940:	e7ee      	b.n	8013920 <__swhatbuf_r+0x1e>
 8013942:	2340      	movs	r3, #64	; 0x40
 8013944:	2000      	movs	r0, #0
 8013946:	6023      	str	r3, [r4, #0]
 8013948:	b016      	add	sp, #88	; 0x58
 801394a:	bd70      	pop	{r4, r5, r6, pc}

0801394c <__smakebuf_r>:
 801394c:	898b      	ldrh	r3, [r1, #12]
 801394e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013950:	079d      	lsls	r5, r3, #30
 8013952:	4606      	mov	r6, r0
 8013954:	460c      	mov	r4, r1
 8013956:	d507      	bpl.n	8013968 <__smakebuf_r+0x1c>
 8013958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	6123      	str	r3, [r4, #16]
 8013960:	2301      	movs	r3, #1
 8013962:	6163      	str	r3, [r4, #20]
 8013964:	b002      	add	sp, #8
 8013966:	bd70      	pop	{r4, r5, r6, pc}
 8013968:	ab01      	add	r3, sp, #4
 801396a:	466a      	mov	r2, sp
 801396c:	f7ff ffc9 	bl	8013902 <__swhatbuf_r>
 8013970:	9900      	ldr	r1, [sp, #0]
 8013972:	4605      	mov	r5, r0
 8013974:	4630      	mov	r0, r6
 8013976:	f000 fc37 	bl	80141e8 <_malloc_r>
 801397a:	b948      	cbnz	r0, 8013990 <__smakebuf_r+0x44>
 801397c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013980:	059a      	lsls	r2, r3, #22
 8013982:	d4ef      	bmi.n	8013964 <__smakebuf_r+0x18>
 8013984:	f023 0303 	bic.w	r3, r3, #3
 8013988:	f043 0302 	orr.w	r3, r3, #2
 801398c:	81a3      	strh	r3, [r4, #12]
 801398e:	e7e3      	b.n	8013958 <__smakebuf_r+0xc>
 8013990:	4b0d      	ldr	r3, [pc, #52]	; (80139c8 <__smakebuf_r+0x7c>)
 8013992:	62b3      	str	r3, [r6, #40]	; 0x28
 8013994:	89a3      	ldrh	r3, [r4, #12]
 8013996:	6020      	str	r0, [r4, #0]
 8013998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801399c:	81a3      	strh	r3, [r4, #12]
 801399e:	9b00      	ldr	r3, [sp, #0]
 80139a0:	6163      	str	r3, [r4, #20]
 80139a2:	9b01      	ldr	r3, [sp, #4]
 80139a4:	6120      	str	r0, [r4, #16]
 80139a6:	b15b      	cbz	r3, 80139c0 <__smakebuf_r+0x74>
 80139a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139ac:	4630      	mov	r0, r6
 80139ae:	f001 f845 	bl	8014a3c <_isatty_r>
 80139b2:	b128      	cbz	r0, 80139c0 <__smakebuf_r+0x74>
 80139b4:	89a3      	ldrh	r3, [r4, #12]
 80139b6:	f023 0303 	bic.w	r3, r3, #3
 80139ba:	f043 0301 	orr.w	r3, r3, #1
 80139be:	81a3      	strh	r3, [r4, #12]
 80139c0:	89a0      	ldrh	r0, [r4, #12]
 80139c2:	4305      	orrs	r5, r0
 80139c4:	81a5      	strh	r5, [r4, #12]
 80139c6:	e7cd      	b.n	8013964 <__smakebuf_r+0x18>
 80139c8:	08013751 	.word	0x08013751

080139cc <malloc>:
 80139cc:	4b02      	ldr	r3, [pc, #8]	; (80139d8 <malloc+0xc>)
 80139ce:	4601      	mov	r1, r0
 80139d0:	6818      	ldr	r0, [r3, #0]
 80139d2:	f000 bc09 	b.w	80141e8 <_malloc_r>
 80139d6:	bf00      	nop
 80139d8:	2000000c 	.word	0x2000000c

080139dc <_Balloc>:
 80139dc:	b570      	push	{r4, r5, r6, lr}
 80139de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80139e0:	4604      	mov	r4, r0
 80139e2:	460d      	mov	r5, r1
 80139e4:	b976      	cbnz	r6, 8013a04 <_Balloc+0x28>
 80139e6:	2010      	movs	r0, #16
 80139e8:	f7ff fff0 	bl	80139cc <malloc>
 80139ec:	4602      	mov	r2, r0
 80139ee:	6260      	str	r0, [r4, #36]	; 0x24
 80139f0:	b920      	cbnz	r0, 80139fc <_Balloc+0x20>
 80139f2:	4b18      	ldr	r3, [pc, #96]	; (8013a54 <_Balloc+0x78>)
 80139f4:	4818      	ldr	r0, [pc, #96]	; (8013a58 <_Balloc+0x7c>)
 80139f6:	2166      	movs	r1, #102	; 0x66
 80139f8:	f000 ffce 	bl	8014998 <__assert_func>
 80139fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a00:	6006      	str	r6, [r0, #0]
 8013a02:	60c6      	str	r6, [r0, #12]
 8013a04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013a06:	68f3      	ldr	r3, [r6, #12]
 8013a08:	b183      	cbz	r3, 8013a2c <_Balloc+0x50>
 8013a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a12:	b9b8      	cbnz	r0, 8013a44 <_Balloc+0x68>
 8013a14:	2101      	movs	r1, #1
 8013a16:	fa01 f605 	lsl.w	r6, r1, r5
 8013a1a:	1d72      	adds	r2, r6, #5
 8013a1c:	0092      	lsls	r2, r2, #2
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f000 fb60 	bl	80140e4 <_calloc_r>
 8013a24:	b160      	cbz	r0, 8013a40 <_Balloc+0x64>
 8013a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a2a:	e00e      	b.n	8013a4a <_Balloc+0x6e>
 8013a2c:	2221      	movs	r2, #33	; 0x21
 8013a2e:	2104      	movs	r1, #4
 8013a30:	4620      	mov	r0, r4
 8013a32:	f000 fb57 	bl	80140e4 <_calloc_r>
 8013a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a38:	60f0      	str	r0, [r6, #12]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1e4      	bne.n	8013a0a <_Balloc+0x2e>
 8013a40:	2000      	movs	r0, #0
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	6802      	ldr	r2, [r0, #0]
 8013a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a50:	e7f7      	b.n	8013a42 <_Balloc+0x66>
 8013a52:	bf00      	nop
 8013a54:	08014ea5 	.word	0x08014ea5
 8013a58:	08014f88 	.word	0x08014f88

08013a5c <_Bfree>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a60:	4605      	mov	r5, r0
 8013a62:	460c      	mov	r4, r1
 8013a64:	b976      	cbnz	r6, 8013a84 <_Bfree+0x28>
 8013a66:	2010      	movs	r0, #16
 8013a68:	f7ff ffb0 	bl	80139cc <malloc>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	6268      	str	r0, [r5, #36]	; 0x24
 8013a70:	b920      	cbnz	r0, 8013a7c <_Bfree+0x20>
 8013a72:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <_Bfree+0x3c>)
 8013a74:	4809      	ldr	r0, [pc, #36]	; (8013a9c <_Bfree+0x40>)
 8013a76:	218a      	movs	r1, #138	; 0x8a
 8013a78:	f000 ff8e 	bl	8014998 <__assert_func>
 8013a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a80:	6006      	str	r6, [r0, #0]
 8013a82:	60c6      	str	r6, [r0, #12]
 8013a84:	b13c      	cbz	r4, 8013a96 <_Bfree+0x3a>
 8013a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013a88:	6862      	ldr	r2, [r4, #4]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a90:	6021      	str	r1, [r4, #0]
 8013a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	08014ea5 	.word	0x08014ea5
 8013a9c:	08014f88 	.word	0x08014f88

08013aa0 <__multadd>:
 8013aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa4:	690d      	ldr	r5, [r1, #16]
 8013aa6:	4607      	mov	r7, r0
 8013aa8:	460c      	mov	r4, r1
 8013aaa:	461e      	mov	r6, r3
 8013aac:	f101 0c14 	add.w	ip, r1, #20
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ab6:	b299      	uxth	r1, r3
 8013ab8:	fb02 6101 	mla	r1, r2, r1, r6
 8013abc:	0c1e      	lsrs	r6, r3, #16
 8013abe:	0c0b      	lsrs	r3, r1, #16
 8013ac0:	fb02 3306 	mla	r3, r2, r6, r3
 8013ac4:	b289      	uxth	r1, r1
 8013ac6:	3001      	adds	r0, #1
 8013ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013acc:	4285      	cmp	r5, r0
 8013ace:	f84c 1b04 	str.w	r1, [ip], #4
 8013ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ad6:	dcec      	bgt.n	8013ab2 <__multadd+0x12>
 8013ad8:	b30e      	cbz	r6, 8013b1e <__multadd+0x7e>
 8013ada:	68a3      	ldr	r3, [r4, #8]
 8013adc:	42ab      	cmp	r3, r5
 8013ade:	dc19      	bgt.n	8013b14 <__multadd+0x74>
 8013ae0:	6861      	ldr	r1, [r4, #4]
 8013ae2:	4638      	mov	r0, r7
 8013ae4:	3101      	adds	r1, #1
 8013ae6:	f7ff ff79 	bl	80139dc <_Balloc>
 8013aea:	4680      	mov	r8, r0
 8013aec:	b928      	cbnz	r0, 8013afa <__multadd+0x5a>
 8013aee:	4602      	mov	r2, r0
 8013af0:	4b0c      	ldr	r3, [pc, #48]	; (8013b24 <__multadd+0x84>)
 8013af2:	480d      	ldr	r0, [pc, #52]	; (8013b28 <__multadd+0x88>)
 8013af4:	21b5      	movs	r1, #181	; 0xb5
 8013af6:	f000 ff4f 	bl	8014998 <__assert_func>
 8013afa:	6922      	ldr	r2, [r4, #16]
 8013afc:	3202      	adds	r2, #2
 8013afe:	f104 010c 	add.w	r1, r4, #12
 8013b02:	0092      	lsls	r2, r2, #2
 8013b04:	300c      	adds	r0, #12
 8013b06:	f7fd fff1 	bl	8011aec <memcpy>
 8013b0a:	4621      	mov	r1, r4
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f7ff ffa5 	bl	8013a5c <_Bfree>
 8013b12:	4644      	mov	r4, r8
 8013b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b18:	3501      	adds	r5, #1
 8013b1a:	615e      	str	r6, [r3, #20]
 8013b1c:	6125      	str	r5, [r4, #16]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b24:	08014f17 	.word	0x08014f17
 8013b28:	08014f88 	.word	0x08014f88

08013b2c <__hi0bits>:
 8013b2c:	0c03      	lsrs	r3, r0, #16
 8013b2e:	041b      	lsls	r3, r3, #16
 8013b30:	b9d3      	cbnz	r3, 8013b68 <__hi0bits+0x3c>
 8013b32:	0400      	lsls	r0, r0, #16
 8013b34:	2310      	movs	r3, #16
 8013b36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013b3a:	bf04      	itt	eq
 8013b3c:	0200      	lsleq	r0, r0, #8
 8013b3e:	3308      	addeq	r3, #8
 8013b40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013b44:	bf04      	itt	eq
 8013b46:	0100      	lsleq	r0, r0, #4
 8013b48:	3304      	addeq	r3, #4
 8013b4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013b4e:	bf04      	itt	eq
 8013b50:	0080      	lsleq	r0, r0, #2
 8013b52:	3302      	addeq	r3, #2
 8013b54:	2800      	cmp	r0, #0
 8013b56:	db05      	blt.n	8013b64 <__hi0bits+0x38>
 8013b58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013b5c:	f103 0301 	add.w	r3, r3, #1
 8013b60:	bf08      	it	eq
 8013b62:	2320      	moveq	r3, #32
 8013b64:	4618      	mov	r0, r3
 8013b66:	4770      	bx	lr
 8013b68:	2300      	movs	r3, #0
 8013b6a:	e7e4      	b.n	8013b36 <__hi0bits+0xa>

08013b6c <__lo0bits>:
 8013b6c:	6803      	ldr	r3, [r0, #0]
 8013b6e:	f013 0207 	ands.w	r2, r3, #7
 8013b72:	4601      	mov	r1, r0
 8013b74:	d00b      	beq.n	8013b8e <__lo0bits+0x22>
 8013b76:	07da      	lsls	r2, r3, #31
 8013b78:	d423      	bmi.n	8013bc2 <__lo0bits+0x56>
 8013b7a:	0798      	lsls	r0, r3, #30
 8013b7c:	bf49      	itett	mi
 8013b7e:	085b      	lsrmi	r3, r3, #1
 8013b80:	089b      	lsrpl	r3, r3, #2
 8013b82:	2001      	movmi	r0, #1
 8013b84:	600b      	strmi	r3, [r1, #0]
 8013b86:	bf5c      	itt	pl
 8013b88:	600b      	strpl	r3, [r1, #0]
 8013b8a:	2002      	movpl	r0, #2
 8013b8c:	4770      	bx	lr
 8013b8e:	b298      	uxth	r0, r3
 8013b90:	b9a8      	cbnz	r0, 8013bbe <__lo0bits+0x52>
 8013b92:	0c1b      	lsrs	r3, r3, #16
 8013b94:	2010      	movs	r0, #16
 8013b96:	b2da      	uxtb	r2, r3
 8013b98:	b90a      	cbnz	r2, 8013b9e <__lo0bits+0x32>
 8013b9a:	3008      	adds	r0, #8
 8013b9c:	0a1b      	lsrs	r3, r3, #8
 8013b9e:	071a      	lsls	r2, r3, #28
 8013ba0:	bf04      	itt	eq
 8013ba2:	091b      	lsreq	r3, r3, #4
 8013ba4:	3004      	addeq	r0, #4
 8013ba6:	079a      	lsls	r2, r3, #30
 8013ba8:	bf04      	itt	eq
 8013baa:	089b      	lsreq	r3, r3, #2
 8013bac:	3002      	addeq	r0, #2
 8013bae:	07da      	lsls	r2, r3, #31
 8013bb0:	d403      	bmi.n	8013bba <__lo0bits+0x4e>
 8013bb2:	085b      	lsrs	r3, r3, #1
 8013bb4:	f100 0001 	add.w	r0, r0, #1
 8013bb8:	d005      	beq.n	8013bc6 <__lo0bits+0x5a>
 8013bba:	600b      	str	r3, [r1, #0]
 8013bbc:	4770      	bx	lr
 8013bbe:	4610      	mov	r0, r2
 8013bc0:	e7e9      	b.n	8013b96 <__lo0bits+0x2a>
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	4770      	bx	lr
 8013bc6:	2020      	movs	r0, #32
 8013bc8:	4770      	bx	lr
	...

08013bcc <__i2b>:
 8013bcc:	b510      	push	{r4, lr}
 8013bce:	460c      	mov	r4, r1
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	f7ff ff03 	bl	80139dc <_Balloc>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	b928      	cbnz	r0, 8013be6 <__i2b+0x1a>
 8013bda:	4b05      	ldr	r3, [pc, #20]	; (8013bf0 <__i2b+0x24>)
 8013bdc:	4805      	ldr	r0, [pc, #20]	; (8013bf4 <__i2b+0x28>)
 8013bde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013be2:	f000 fed9 	bl	8014998 <__assert_func>
 8013be6:	2301      	movs	r3, #1
 8013be8:	6144      	str	r4, [r0, #20]
 8013bea:	6103      	str	r3, [r0, #16]
 8013bec:	bd10      	pop	{r4, pc}
 8013bee:	bf00      	nop
 8013bf0:	08014f17 	.word	0x08014f17
 8013bf4:	08014f88 	.word	0x08014f88

08013bf8 <__multiply>:
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	4691      	mov	r9, r2
 8013bfe:	690a      	ldr	r2, [r1, #16]
 8013c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	bfb8      	it	lt
 8013c08:	460b      	movlt	r3, r1
 8013c0a:	460c      	mov	r4, r1
 8013c0c:	bfbc      	itt	lt
 8013c0e:	464c      	movlt	r4, r9
 8013c10:	4699      	movlt	r9, r3
 8013c12:	6927      	ldr	r7, [r4, #16]
 8013c14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013c18:	68a3      	ldr	r3, [r4, #8]
 8013c1a:	6861      	ldr	r1, [r4, #4]
 8013c1c:	eb07 060a 	add.w	r6, r7, sl
 8013c20:	42b3      	cmp	r3, r6
 8013c22:	b085      	sub	sp, #20
 8013c24:	bfb8      	it	lt
 8013c26:	3101      	addlt	r1, #1
 8013c28:	f7ff fed8 	bl	80139dc <_Balloc>
 8013c2c:	b930      	cbnz	r0, 8013c3c <__multiply+0x44>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	4b44      	ldr	r3, [pc, #272]	; (8013d44 <__multiply+0x14c>)
 8013c32:	4845      	ldr	r0, [pc, #276]	; (8013d48 <__multiply+0x150>)
 8013c34:	f240 115d 	movw	r1, #349	; 0x15d
 8013c38:	f000 feae 	bl	8014998 <__assert_func>
 8013c3c:	f100 0514 	add.w	r5, r0, #20
 8013c40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c44:	462b      	mov	r3, r5
 8013c46:	2200      	movs	r2, #0
 8013c48:	4543      	cmp	r3, r8
 8013c4a:	d321      	bcc.n	8013c90 <__multiply+0x98>
 8013c4c:	f104 0314 	add.w	r3, r4, #20
 8013c50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013c54:	f109 0314 	add.w	r3, r9, #20
 8013c58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013c5c:	9202      	str	r2, [sp, #8]
 8013c5e:	1b3a      	subs	r2, r7, r4
 8013c60:	3a15      	subs	r2, #21
 8013c62:	f022 0203 	bic.w	r2, r2, #3
 8013c66:	3204      	adds	r2, #4
 8013c68:	f104 0115 	add.w	r1, r4, #21
 8013c6c:	428f      	cmp	r7, r1
 8013c6e:	bf38      	it	cc
 8013c70:	2204      	movcc	r2, #4
 8013c72:	9201      	str	r2, [sp, #4]
 8013c74:	9a02      	ldr	r2, [sp, #8]
 8013c76:	9303      	str	r3, [sp, #12]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d80c      	bhi.n	8013c96 <__multiply+0x9e>
 8013c7c:	2e00      	cmp	r6, #0
 8013c7e:	dd03      	ble.n	8013c88 <__multiply+0x90>
 8013c80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d05a      	beq.n	8013d3e <__multiply+0x146>
 8013c88:	6106      	str	r6, [r0, #16]
 8013c8a:	b005      	add	sp, #20
 8013c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c90:	f843 2b04 	str.w	r2, [r3], #4
 8013c94:	e7d8      	b.n	8013c48 <__multiply+0x50>
 8013c96:	f8b3 a000 	ldrh.w	sl, [r3]
 8013c9a:	f1ba 0f00 	cmp.w	sl, #0
 8013c9e:	d024      	beq.n	8013cea <__multiply+0xf2>
 8013ca0:	f104 0e14 	add.w	lr, r4, #20
 8013ca4:	46a9      	mov	r9, r5
 8013ca6:	f04f 0c00 	mov.w	ip, #0
 8013caa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013cae:	f8d9 1000 	ldr.w	r1, [r9]
 8013cb2:	fa1f fb82 	uxth.w	fp, r2
 8013cb6:	b289      	uxth	r1, r1
 8013cb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8013cbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8013cc4:	4461      	add	r1, ip
 8013cc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013cca:	fb0a c20b 	mla	r2, sl, fp, ip
 8013cce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013cd2:	b289      	uxth	r1, r1
 8013cd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013cd8:	4577      	cmp	r7, lr
 8013cda:	f849 1b04 	str.w	r1, [r9], #4
 8013cde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013ce2:	d8e2      	bhi.n	8013caa <__multiply+0xb2>
 8013ce4:	9a01      	ldr	r2, [sp, #4]
 8013ce6:	f845 c002 	str.w	ip, [r5, r2]
 8013cea:	9a03      	ldr	r2, [sp, #12]
 8013cec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	f1b9 0f00 	cmp.w	r9, #0
 8013cf6:	d020      	beq.n	8013d3a <__multiply+0x142>
 8013cf8:	6829      	ldr	r1, [r5, #0]
 8013cfa:	f104 0c14 	add.w	ip, r4, #20
 8013cfe:	46ae      	mov	lr, r5
 8013d00:	f04f 0a00 	mov.w	sl, #0
 8013d04:	f8bc b000 	ldrh.w	fp, [ip]
 8013d08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013d0c:	fb09 220b 	mla	r2, r9, fp, r2
 8013d10:	4492      	add	sl, r2
 8013d12:	b289      	uxth	r1, r1
 8013d14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013d18:	f84e 1b04 	str.w	r1, [lr], #4
 8013d1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013d20:	f8be 1000 	ldrh.w	r1, [lr]
 8013d24:	0c12      	lsrs	r2, r2, #16
 8013d26:	fb09 1102 	mla	r1, r9, r2, r1
 8013d2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013d2e:	4567      	cmp	r7, ip
 8013d30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013d34:	d8e6      	bhi.n	8013d04 <__multiply+0x10c>
 8013d36:	9a01      	ldr	r2, [sp, #4]
 8013d38:	50a9      	str	r1, [r5, r2]
 8013d3a:	3504      	adds	r5, #4
 8013d3c:	e79a      	b.n	8013c74 <__multiply+0x7c>
 8013d3e:	3e01      	subs	r6, #1
 8013d40:	e79c      	b.n	8013c7c <__multiply+0x84>
 8013d42:	bf00      	nop
 8013d44:	08014f17 	.word	0x08014f17
 8013d48:	08014f88 	.word	0x08014f88

08013d4c <__pow5mult>:
 8013d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d50:	4615      	mov	r5, r2
 8013d52:	f012 0203 	ands.w	r2, r2, #3
 8013d56:	4606      	mov	r6, r0
 8013d58:	460f      	mov	r7, r1
 8013d5a:	d007      	beq.n	8013d6c <__pow5mult+0x20>
 8013d5c:	4c25      	ldr	r4, [pc, #148]	; (8013df4 <__pow5mult+0xa8>)
 8013d5e:	3a01      	subs	r2, #1
 8013d60:	2300      	movs	r3, #0
 8013d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d66:	f7ff fe9b 	bl	8013aa0 <__multadd>
 8013d6a:	4607      	mov	r7, r0
 8013d6c:	10ad      	asrs	r5, r5, #2
 8013d6e:	d03d      	beq.n	8013dec <__pow5mult+0xa0>
 8013d70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013d72:	b97c      	cbnz	r4, 8013d94 <__pow5mult+0x48>
 8013d74:	2010      	movs	r0, #16
 8013d76:	f7ff fe29 	bl	80139cc <malloc>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	6270      	str	r0, [r6, #36]	; 0x24
 8013d7e:	b928      	cbnz	r0, 8013d8c <__pow5mult+0x40>
 8013d80:	4b1d      	ldr	r3, [pc, #116]	; (8013df8 <__pow5mult+0xac>)
 8013d82:	481e      	ldr	r0, [pc, #120]	; (8013dfc <__pow5mult+0xb0>)
 8013d84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013d88:	f000 fe06 	bl	8014998 <__assert_func>
 8013d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d90:	6004      	str	r4, [r0, #0]
 8013d92:	60c4      	str	r4, [r0, #12]
 8013d94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d9c:	b94c      	cbnz	r4, 8013db2 <__pow5mult+0x66>
 8013d9e:	f240 2171 	movw	r1, #625	; 0x271
 8013da2:	4630      	mov	r0, r6
 8013da4:	f7ff ff12 	bl	8013bcc <__i2b>
 8013da8:	2300      	movs	r3, #0
 8013daa:	f8c8 0008 	str.w	r0, [r8, #8]
 8013dae:	4604      	mov	r4, r0
 8013db0:	6003      	str	r3, [r0, #0]
 8013db2:	f04f 0900 	mov.w	r9, #0
 8013db6:	07eb      	lsls	r3, r5, #31
 8013db8:	d50a      	bpl.n	8013dd0 <__pow5mult+0x84>
 8013dba:	4639      	mov	r1, r7
 8013dbc:	4622      	mov	r2, r4
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f7ff ff1a 	bl	8013bf8 <__multiply>
 8013dc4:	4639      	mov	r1, r7
 8013dc6:	4680      	mov	r8, r0
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f7ff fe47 	bl	8013a5c <_Bfree>
 8013dce:	4647      	mov	r7, r8
 8013dd0:	106d      	asrs	r5, r5, #1
 8013dd2:	d00b      	beq.n	8013dec <__pow5mult+0xa0>
 8013dd4:	6820      	ldr	r0, [r4, #0]
 8013dd6:	b938      	cbnz	r0, 8013de8 <__pow5mult+0x9c>
 8013dd8:	4622      	mov	r2, r4
 8013dda:	4621      	mov	r1, r4
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f7ff ff0b 	bl	8013bf8 <__multiply>
 8013de2:	6020      	str	r0, [r4, #0]
 8013de4:	f8c0 9000 	str.w	r9, [r0]
 8013de8:	4604      	mov	r4, r0
 8013dea:	e7e4      	b.n	8013db6 <__pow5mult+0x6a>
 8013dec:	4638      	mov	r0, r7
 8013dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013df2:	bf00      	nop
 8013df4:	080150d8 	.word	0x080150d8
 8013df8:	08014ea5 	.word	0x08014ea5
 8013dfc:	08014f88 	.word	0x08014f88

08013e00 <__lshift>:
 8013e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e04:	460c      	mov	r4, r1
 8013e06:	6849      	ldr	r1, [r1, #4]
 8013e08:	6923      	ldr	r3, [r4, #16]
 8013e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e0e:	68a3      	ldr	r3, [r4, #8]
 8013e10:	4607      	mov	r7, r0
 8013e12:	4691      	mov	r9, r2
 8013e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e18:	f108 0601 	add.w	r6, r8, #1
 8013e1c:	42b3      	cmp	r3, r6
 8013e1e:	db0b      	blt.n	8013e38 <__lshift+0x38>
 8013e20:	4638      	mov	r0, r7
 8013e22:	f7ff fddb 	bl	80139dc <_Balloc>
 8013e26:	4605      	mov	r5, r0
 8013e28:	b948      	cbnz	r0, 8013e3e <__lshift+0x3e>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	4b2a      	ldr	r3, [pc, #168]	; (8013ed8 <__lshift+0xd8>)
 8013e2e:	482b      	ldr	r0, [pc, #172]	; (8013edc <__lshift+0xdc>)
 8013e30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013e34:	f000 fdb0 	bl	8014998 <__assert_func>
 8013e38:	3101      	adds	r1, #1
 8013e3a:	005b      	lsls	r3, r3, #1
 8013e3c:	e7ee      	b.n	8013e1c <__lshift+0x1c>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	f100 0114 	add.w	r1, r0, #20
 8013e44:	f100 0210 	add.w	r2, r0, #16
 8013e48:	4618      	mov	r0, r3
 8013e4a:	4553      	cmp	r3, sl
 8013e4c:	db37      	blt.n	8013ebe <__lshift+0xbe>
 8013e4e:	6920      	ldr	r0, [r4, #16]
 8013e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e54:	f104 0314 	add.w	r3, r4, #20
 8013e58:	f019 091f 	ands.w	r9, r9, #31
 8013e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013e64:	d02f      	beq.n	8013ec6 <__lshift+0xc6>
 8013e66:	f1c9 0e20 	rsb	lr, r9, #32
 8013e6a:	468a      	mov	sl, r1
 8013e6c:	f04f 0c00 	mov.w	ip, #0
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	fa02 f209 	lsl.w	r2, r2, r9
 8013e76:	ea42 020c 	orr.w	r2, r2, ip
 8013e7a:	f84a 2b04 	str.w	r2, [sl], #4
 8013e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e82:	4298      	cmp	r0, r3
 8013e84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013e88:	d8f2      	bhi.n	8013e70 <__lshift+0x70>
 8013e8a:	1b03      	subs	r3, r0, r4
 8013e8c:	3b15      	subs	r3, #21
 8013e8e:	f023 0303 	bic.w	r3, r3, #3
 8013e92:	3304      	adds	r3, #4
 8013e94:	f104 0215 	add.w	r2, r4, #21
 8013e98:	4290      	cmp	r0, r2
 8013e9a:	bf38      	it	cc
 8013e9c:	2304      	movcc	r3, #4
 8013e9e:	f841 c003 	str.w	ip, [r1, r3]
 8013ea2:	f1bc 0f00 	cmp.w	ip, #0
 8013ea6:	d001      	beq.n	8013eac <__lshift+0xac>
 8013ea8:	f108 0602 	add.w	r6, r8, #2
 8013eac:	3e01      	subs	r6, #1
 8013eae:	4638      	mov	r0, r7
 8013eb0:	612e      	str	r6, [r5, #16]
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	f7ff fdd2 	bl	8013a5c <_Bfree>
 8013eb8:	4628      	mov	r0, r5
 8013eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	e7c1      	b.n	8013e4a <__lshift+0x4a>
 8013ec6:	3904      	subs	r1, #4
 8013ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ed0:	4298      	cmp	r0, r3
 8013ed2:	d8f9      	bhi.n	8013ec8 <__lshift+0xc8>
 8013ed4:	e7ea      	b.n	8013eac <__lshift+0xac>
 8013ed6:	bf00      	nop
 8013ed8:	08014f17 	.word	0x08014f17
 8013edc:	08014f88 	.word	0x08014f88

08013ee0 <__mcmp>:
 8013ee0:	b530      	push	{r4, r5, lr}
 8013ee2:	6902      	ldr	r2, [r0, #16]
 8013ee4:	690c      	ldr	r4, [r1, #16]
 8013ee6:	1b12      	subs	r2, r2, r4
 8013ee8:	d10e      	bne.n	8013f08 <__mcmp+0x28>
 8013eea:	f100 0314 	add.w	r3, r0, #20
 8013eee:	3114      	adds	r1, #20
 8013ef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013efc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013f00:	42a5      	cmp	r5, r4
 8013f02:	d003      	beq.n	8013f0c <__mcmp+0x2c>
 8013f04:	d305      	bcc.n	8013f12 <__mcmp+0x32>
 8013f06:	2201      	movs	r2, #1
 8013f08:	4610      	mov	r0, r2
 8013f0a:	bd30      	pop	{r4, r5, pc}
 8013f0c:	4283      	cmp	r3, r0
 8013f0e:	d3f3      	bcc.n	8013ef8 <__mcmp+0x18>
 8013f10:	e7fa      	b.n	8013f08 <__mcmp+0x28>
 8013f12:	f04f 32ff 	mov.w	r2, #4294967295
 8013f16:	e7f7      	b.n	8013f08 <__mcmp+0x28>

08013f18 <__mdiff>:
 8013f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	4606      	mov	r6, r0
 8013f20:	4611      	mov	r1, r2
 8013f22:	4620      	mov	r0, r4
 8013f24:	4690      	mov	r8, r2
 8013f26:	f7ff ffdb 	bl	8013ee0 <__mcmp>
 8013f2a:	1e05      	subs	r5, r0, #0
 8013f2c:	d110      	bne.n	8013f50 <__mdiff+0x38>
 8013f2e:	4629      	mov	r1, r5
 8013f30:	4630      	mov	r0, r6
 8013f32:	f7ff fd53 	bl	80139dc <_Balloc>
 8013f36:	b930      	cbnz	r0, 8013f46 <__mdiff+0x2e>
 8013f38:	4b3a      	ldr	r3, [pc, #232]	; (8014024 <__mdiff+0x10c>)
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	f240 2132 	movw	r1, #562	; 0x232
 8013f40:	4839      	ldr	r0, [pc, #228]	; (8014028 <__mdiff+0x110>)
 8013f42:	f000 fd29 	bl	8014998 <__assert_func>
 8013f46:	2301      	movs	r3, #1
 8013f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f50:	bfa4      	itt	ge
 8013f52:	4643      	movge	r3, r8
 8013f54:	46a0      	movge	r8, r4
 8013f56:	4630      	mov	r0, r6
 8013f58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013f5c:	bfa6      	itte	ge
 8013f5e:	461c      	movge	r4, r3
 8013f60:	2500      	movge	r5, #0
 8013f62:	2501      	movlt	r5, #1
 8013f64:	f7ff fd3a 	bl	80139dc <_Balloc>
 8013f68:	b920      	cbnz	r0, 8013f74 <__mdiff+0x5c>
 8013f6a:	4b2e      	ldr	r3, [pc, #184]	; (8014024 <__mdiff+0x10c>)
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013f72:	e7e5      	b.n	8013f40 <__mdiff+0x28>
 8013f74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013f78:	6926      	ldr	r6, [r4, #16]
 8013f7a:	60c5      	str	r5, [r0, #12]
 8013f7c:	f104 0914 	add.w	r9, r4, #20
 8013f80:	f108 0514 	add.w	r5, r8, #20
 8013f84:	f100 0e14 	add.w	lr, r0, #20
 8013f88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013f90:	f108 0210 	add.w	r2, r8, #16
 8013f94:	46f2      	mov	sl, lr
 8013f96:	2100      	movs	r1, #0
 8013f98:	f859 3b04 	ldr.w	r3, [r9], #4
 8013f9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013fa0:	fa1f f883 	uxth.w	r8, r3
 8013fa4:	fa11 f18b 	uxtah	r1, r1, fp
 8013fa8:	0c1b      	lsrs	r3, r3, #16
 8013faa:	eba1 0808 	sub.w	r8, r1, r8
 8013fae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013fb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013fb6:	fa1f f888 	uxth.w	r8, r8
 8013fba:	1419      	asrs	r1, r3, #16
 8013fbc:	454e      	cmp	r6, r9
 8013fbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013fc2:	f84a 3b04 	str.w	r3, [sl], #4
 8013fc6:	d8e7      	bhi.n	8013f98 <__mdiff+0x80>
 8013fc8:	1b33      	subs	r3, r6, r4
 8013fca:	3b15      	subs	r3, #21
 8013fcc:	f023 0303 	bic.w	r3, r3, #3
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	3415      	adds	r4, #21
 8013fd4:	42a6      	cmp	r6, r4
 8013fd6:	bf38      	it	cc
 8013fd8:	2304      	movcc	r3, #4
 8013fda:	441d      	add	r5, r3
 8013fdc:	4473      	add	r3, lr
 8013fde:	469e      	mov	lr, r3
 8013fe0:	462e      	mov	r6, r5
 8013fe2:	4566      	cmp	r6, ip
 8013fe4:	d30e      	bcc.n	8014004 <__mdiff+0xec>
 8013fe6:	f10c 0203 	add.w	r2, ip, #3
 8013fea:	1b52      	subs	r2, r2, r5
 8013fec:	f022 0203 	bic.w	r2, r2, #3
 8013ff0:	3d03      	subs	r5, #3
 8013ff2:	45ac      	cmp	ip, r5
 8013ff4:	bf38      	it	cc
 8013ff6:	2200      	movcc	r2, #0
 8013ff8:	441a      	add	r2, r3
 8013ffa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ffe:	b17b      	cbz	r3, 8014020 <__mdiff+0x108>
 8014000:	6107      	str	r7, [r0, #16]
 8014002:	e7a3      	b.n	8013f4c <__mdiff+0x34>
 8014004:	f856 8b04 	ldr.w	r8, [r6], #4
 8014008:	fa11 f288 	uxtah	r2, r1, r8
 801400c:	1414      	asrs	r4, r2, #16
 801400e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014012:	b292      	uxth	r2, r2
 8014014:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014018:	f84e 2b04 	str.w	r2, [lr], #4
 801401c:	1421      	asrs	r1, r4, #16
 801401e:	e7e0      	b.n	8013fe2 <__mdiff+0xca>
 8014020:	3f01      	subs	r7, #1
 8014022:	e7ea      	b.n	8013ffa <__mdiff+0xe2>
 8014024:	08014f17 	.word	0x08014f17
 8014028:	08014f88 	.word	0x08014f88

0801402c <__d2b>:
 801402c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014030:	4689      	mov	r9, r1
 8014032:	2101      	movs	r1, #1
 8014034:	ec57 6b10 	vmov	r6, r7, d0
 8014038:	4690      	mov	r8, r2
 801403a:	f7ff fccf 	bl	80139dc <_Balloc>
 801403e:	4604      	mov	r4, r0
 8014040:	b930      	cbnz	r0, 8014050 <__d2b+0x24>
 8014042:	4602      	mov	r2, r0
 8014044:	4b25      	ldr	r3, [pc, #148]	; (80140dc <__d2b+0xb0>)
 8014046:	4826      	ldr	r0, [pc, #152]	; (80140e0 <__d2b+0xb4>)
 8014048:	f240 310a 	movw	r1, #778	; 0x30a
 801404c:	f000 fca4 	bl	8014998 <__assert_func>
 8014050:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014054:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014058:	bb35      	cbnz	r5, 80140a8 <__d2b+0x7c>
 801405a:	2e00      	cmp	r6, #0
 801405c:	9301      	str	r3, [sp, #4]
 801405e:	d028      	beq.n	80140b2 <__d2b+0x86>
 8014060:	4668      	mov	r0, sp
 8014062:	9600      	str	r6, [sp, #0]
 8014064:	f7ff fd82 	bl	8013b6c <__lo0bits>
 8014068:	9900      	ldr	r1, [sp, #0]
 801406a:	b300      	cbz	r0, 80140ae <__d2b+0x82>
 801406c:	9a01      	ldr	r2, [sp, #4]
 801406e:	f1c0 0320 	rsb	r3, r0, #32
 8014072:	fa02 f303 	lsl.w	r3, r2, r3
 8014076:	430b      	orrs	r3, r1
 8014078:	40c2      	lsrs	r2, r0
 801407a:	6163      	str	r3, [r4, #20]
 801407c:	9201      	str	r2, [sp, #4]
 801407e:	9b01      	ldr	r3, [sp, #4]
 8014080:	61a3      	str	r3, [r4, #24]
 8014082:	2b00      	cmp	r3, #0
 8014084:	bf14      	ite	ne
 8014086:	2202      	movne	r2, #2
 8014088:	2201      	moveq	r2, #1
 801408a:	6122      	str	r2, [r4, #16]
 801408c:	b1d5      	cbz	r5, 80140c4 <__d2b+0x98>
 801408e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014092:	4405      	add	r5, r0
 8014094:	f8c9 5000 	str.w	r5, [r9]
 8014098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801409c:	f8c8 0000 	str.w	r0, [r8]
 80140a0:	4620      	mov	r0, r4
 80140a2:	b003      	add	sp, #12
 80140a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80140ac:	e7d5      	b.n	801405a <__d2b+0x2e>
 80140ae:	6161      	str	r1, [r4, #20]
 80140b0:	e7e5      	b.n	801407e <__d2b+0x52>
 80140b2:	a801      	add	r0, sp, #4
 80140b4:	f7ff fd5a 	bl	8013b6c <__lo0bits>
 80140b8:	9b01      	ldr	r3, [sp, #4]
 80140ba:	6163      	str	r3, [r4, #20]
 80140bc:	2201      	movs	r2, #1
 80140be:	6122      	str	r2, [r4, #16]
 80140c0:	3020      	adds	r0, #32
 80140c2:	e7e3      	b.n	801408c <__d2b+0x60>
 80140c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80140cc:	f8c9 0000 	str.w	r0, [r9]
 80140d0:	6918      	ldr	r0, [r3, #16]
 80140d2:	f7ff fd2b 	bl	8013b2c <__hi0bits>
 80140d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140da:	e7df      	b.n	801409c <__d2b+0x70>
 80140dc:	08014f17 	.word	0x08014f17
 80140e0:	08014f88 	.word	0x08014f88

080140e4 <_calloc_r>:
 80140e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140e6:	fba1 2402 	umull	r2, r4, r1, r2
 80140ea:	b94c      	cbnz	r4, 8014100 <_calloc_r+0x1c>
 80140ec:	4611      	mov	r1, r2
 80140ee:	9201      	str	r2, [sp, #4]
 80140f0:	f000 f87a 	bl	80141e8 <_malloc_r>
 80140f4:	9a01      	ldr	r2, [sp, #4]
 80140f6:	4605      	mov	r5, r0
 80140f8:	b930      	cbnz	r0, 8014108 <_calloc_r+0x24>
 80140fa:	4628      	mov	r0, r5
 80140fc:	b003      	add	sp, #12
 80140fe:	bd30      	pop	{r4, r5, pc}
 8014100:	220c      	movs	r2, #12
 8014102:	6002      	str	r2, [r0, #0]
 8014104:	2500      	movs	r5, #0
 8014106:	e7f8      	b.n	80140fa <_calloc_r+0x16>
 8014108:	4621      	mov	r1, r4
 801410a:	f7fd fcfd 	bl	8011b08 <memset>
 801410e:	e7f4      	b.n	80140fa <_calloc_r+0x16>

08014110 <_free_r>:
 8014110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014112:	2900      	cmp	r1, #0
 8014114:	d044      	beq.n	80141a0 <_free_r+0x90>
 8014116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801411a:	9001      	str	r0, [sp, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	f1a1 0404 	sub.w	r4, r1, #4
 8014122:	bfb8      	it	lt
 8014124:	18e4      	addlt	r4, r4, r3
 8014126:	f000 fcd7 	bl	8014ad8 <__malloc_lock>
 801412a:	4a1e      	ldr	r2, [pc, #120]	; (80141a4 <_free_r+0x94>)
 801412c:	9801      	ldr	r0, [sp, #4]
 801412e:	6813      	ldr	r3, [r2, #0]
 8014130:	b933      	cbnz	r3, 8014140 <_free_r+0x30>
 8014132:	6063      	str	r3, [r4, #4]
 8014134:	6014      	str	r4, [r2, #0]
 8014136:	b003      	add	sp, #12
 8014138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801413c:	f000 bcd2 	b.w	8014ae4 <__malloc_unlock>
 8014140:	42a3      	cmp	r3, r4
 8014142:	d908      	bls.n	8014156 <_free_r+0x46>
 8014144:	6825      	ldr	r5, [r4, #0]
 8014146:	1961      	adds	r1, r4, r5
 8014148:	428b      	cmp	r3, r1
 801414a:	bf01      	itttt	eq
 801414c:	6819      	ldreq	r1, [r3, #0]
 801414e:	685b      	ldreq	r3, [r3, #4]
 8014150:	1949      	addeq	r1, r1, r5
 8014152:	6021      	streq	r1, [r4, #0]
 8014154:	e7ed      	b.n	8014132 <_free_r+0x22>
 8014156:	461a      	mov	r2, r3
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	b10b      	cbz	r3, 8014160 <_free_r+0x50>
 801415c:	42a3      	cmp	r3, r4
 801415e:	d9fa      	bls.n	8014156 <_free_r+0x46>
 8014160:	6811      	ldr	r1, [r2, #0]
 8014162:	1855      	adds	r5, r2, r1
 8014164:	42a5      	cmp	r5, r4
 8014166:	d10b      	bne.n	8014180 <_free_r+0x70>
 8014168:	6824      	ldr	r4, [r4, #0]
 801416a:	4421      	add	r1, r4
 801416c:	1854      	adds	r4, r2, r1
 801416e:	42a3      	cmp	r3, r4
 8014170:	6011      	str	r1, [r2, #0]
 8014172:	d1e0      	bne.n	8014136 <_free_r+0x26>
 8014174:	681c      	ldr	r4, [r3, #0]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	6053      	str	r3, [r2, #4]
 801417a:	4421      	add	r1, r4
 801417c:	6011      	str	r1, [r2, #0]
 801417e:	e7da      	b.n	8014136 <_free_r+0x26>
 8014180:	d902      	bls.n	8014188 <_free_r+0x78>
 8014182:	230c      	movs	r3, #12
 8014184:	6003      	str	r3, [r0, #0]
 8014186:	e7d6      	b.n	8014136 <_free_r+0x26>
 8014188:	6825      	ldr	r5, [r4, #0]
 801418a:	1961      	adds	r1, r4, r5
 801418c:	428b      	cmp	r3, r1
 801418e:	bf04      	itt	eq
 8014190:	6819      	ldreq	r1, [r3, #0]
 8014192:	685b      	ldreq	r3, [r3, #4]
 8014194:	6063      	str	r3, [r4, #4]
 8014196:	bf04      	itt	eq
 8014198:	1949      	addeq	r1, r1, r5
 801419a:	6021      	streq	r1, [r4, #0]
 801419c:	6054      	str	r4, [r2, #4]
 801419e:	e7ca      	b.n	8014136 <_free_r+0x26>
 80141a0:	b003      	add	sp, #12
 80141a2:	bd30      	pop	{r4, r5, pc}
 80141a4:	2000cfb8 	.word	0x2000cfb8

080141a8 <sbrk_aligned>:
 80141a8:	b570      	push	{r4, r5, r6, lr}
 80141aa:	4e0e      	ldr	r6, [pc, #56]	; (80141e4 <sbrk_aligned+0x3c>)
 80141ac:	460c      	mov	r4, r1
 80141ae:	6831      	ldr	r1, [r6, #0]
 80141b0:	4605      	mov	r5, r0
 80141b2:	b911      	cbnz	r1, 80141ba <sbrk_aligned+0x12>
 80141b4:	f000 fb8a 	bl	80148cc <_sbrk_r>
 80141b8:	6030      	str	r0, [r6, #0]
 80141ba:	4621      	mov	r1, r4
 80141bc:	4628      	mov	r0, r5
 80141be:	f000 fb85 	bl	80148cc <_sbrk_r>
 80141c2:	1c43      	adds	r3, r0, #1
 80141c4:	d00a      	beq.n	80141dc <sbrk_aligned+0x34>
 80141c6:	1cc4      	adds	r4, r0, #3
 80141c8:	f024 0403 	bic.w	r4, r4, #3
 80141cc:	42a0      	cmp	r0, r4
 80141ce:	d007      	beq.n	80141e0 <sbrk_aligned+0x38>
 80141d0:	1a21      	subs	r1, r4, r0
 80141d2:	4628      	mov	r0, r5
 80141d4:	f000 fb7a 	bl	80148cc <_sbrk_r>
 80141d8:	3001      	adds	r0, #1
 80141da:	d101      	bne.n	80141e0 <sbrk_aligned+0x38>
 80141dc:	f04f 34ff 	mov.w	r4, #4294967295
 80141e0:	4620      	mov	r0, r4
 80141e2:	bd70      	pop	{r4, r5, r6, pc}
 80141e4:	2000cfbc 	.word	0x2000cfbc

080141e8 <_malloc_r>:
 80141e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ec:	1ccd      	adds	r5, r1, #3
 80141ee:	f025 0503 	bic.w	r5, r5, #3
 80141f2:	3508      	adds	r5, #8
 80141f4:	2d0c      	cmp	r5, #12
 80141f6:	bf38      	it	cc
 80141f8:	250c      	movcc	r5, #12
 80141fa:	2d00      	cmp	r5, #0
 80141fc:	4607      	mov	r7, r0
 80141fe:	db01      	blt.n	8014204 <_malloc_r+0x1c>
 8014200:	42a9      	cmp	r1, r5
 8014202:	d905      	bls.n	8014210 <_malloc_r+0x28>
 8014204:	230c      	movs	r3, #12
 8014206:	603b      	str	r3, [r7, #0]
 8014208:	2600      	movs	r6, #0
 801420a:	4630      	mov	r0, r6
 801420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014210:	4e2e      	ldr	r6, [pc, #184]	; (80142cc <_malloc_r+0xe4>)
 8014212:	f000 fc61 	bl	8014ad8 <__malloc_lock>
 8014216:	6833      	ldr	r3, [r6, #0]
 8014218:	461c      	mov	r4, r3
 801421a:	bb34      	cbnz	r4, 801426a <_malloc_r+0x82>
 801421c:	4629      	mov	r1, r5
 801421e:	4638      	mov	r0, r7
 8014220:	f7ff ffc2 	bl	80141a8 <sbrk_aligned>
 8014224:	1c43      	adds	r3, r0, #1
 8014226:	4604      	mov	r4, r0
 8014228:	d14d      	bne.n	80142c6 <_malloc_r+0xde>
 801422a:	6834      	ldr	r4, [r6, #0]
 801422c:	4626      	mov	r6, r4
 801422e:	2e00      	cmp	r6, #0
 8014230:	d140      	bne.n	80142b4 <_malloc_r+0xcc>
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	4631      	mov	r1, r6
 8014236:	4638      	mov	r0, r7
 8014238:	eb04 0803 	add.w	r8, r4, r3
 801423c:	f000 fb46 	bl	80148cc <_sbrk_r>
 8014240:	4580      	cmp	r8, r0
 8014242:	d13a      	bne.n	80142ba <_malloc_r+0xd2>
 8014244:	6821      	ldr	r1, [r4, #0]
 8014246:	3503      	adds	r5, #3
 8014248:	1a6d      	subs	r5, r5, r1
 801424a:	f025 0503 	bic.w	r5, r5, #3
 801424e:	3508      	adds	r5, #8
 8014250:	2d0c      	cmp	r5, #12
 8014252:	bf38      	it	cc
 8014254:	250c      	movcc	r5, #12
 8014256:	4629      	mov	r1, r5
 8014258:	4638      	mov	r0, r7
 801425a:	f7ff ffa5 	bl	80141a8 <sbrk_aligned>
 801425e:	3001      	adds	r0, #1
 8014260:	d02b      	beq.n	80142ba <_malloc_r+0xd2>
 8014262:	6823      	ldr	r3, [r4, #0]
 8014264:	442b      	add	r3, r5
 8014266:	6023      	str	r3, [r4, #0]
 8014268:	e00e      	b.n	8014288 <_malloc_r+0xa0>
 801426a:	6822      	ldr	r2, [r4, #0]
 801426c:	1b52      	subs	r2, r2, r5
 801426e:	d41e      	bmi.n	80142ae <_malloc_r+0xc6>
 8014270:	2a0b      	cmp	r2, #11
 8014272:	d916      	bls.n	80142a2 <_malloc_r+0xba>
 8014274:	1961      	adds	r1, r4, r5
 8014276:	42a3      	cmp	r3, r4
 8014278:	6025      	str	r5, [r4, #0]
 801427a:	bf18      	it	ne
 801427c:	6059      	strne	r1, [r3, #4]
 801427e:	6863      	ldr	r3, [r4, #4]
 8014280:	bf08      	it	eq
 8014282:	6031      	streq	r1, [r6, #0]
 8014284:	5162      	str	r2, [r4, r5]
 8014286:	604b      	str	r3, [r1, #4]
 8014288:	4638      	mov	r0, r7
 801428a:	f104 060b 	add.w	r6, r4, #11
 801428e:	f000 fc29 	bl	8014ae4 <__malloc_unlock>
 8014292:	f026 0607 	bic.w	r6, r6, #7
 8014296:	1d23      	adds	r3, r4, #4
 8014298:	1af2      	subs	r2, r6, r3
 801429a:	d0b6      	beq.n	801420a <_malloc_r+0x22>
 801429c:	1b9b      	subs	r3, r3, r6
 801429e:	50a3      	str	r3, [r4, r2]
 80142a0:	e7b3      	b.n	801420a <_malloc_r+0x22>
 80142a2:	6862      	ldr	r2, [r4, #4]
 80142a4:	42a3      	cmp	r3, r4
 80142a6:	bf0c      	ite	eq
 80142a8:	6032      	streq	r2, [r6, #0]
 80142aa:	605a      	strne	r2, [r3, #4]
 80142ac:	e7ec      	b.n	8014288 <_malloc_r+0xa0>
 80142ae:	4623      	mov	r3, r4
 80142b0:	6864      	ldr	r4, [r4, #4]
 80142b2:	e7b2      	b.n	801421a <_malloc_r+0x32>
 80142b4:	4634      	mov	r4, r6
 80142b6:	6876      	ldr	r6, [r6, #4]
 80142b8:	e7b9      	b.n	801422e <_malloc_r+0x46>
 80142ba:	230c      	movs	r3, #12
 80142bc:	603b      	str	r3, [r7, #0]
 80142be:	4638      	mov	r0, r7
 80142c0:	f000 fc10 	bl	8014ae4 <__malloc_unlock>
 80142c4:	e7a1      	b.n	801420a <_malloc_r+0x22>
 80142c6:	6025      	str	r5, [r4, #0]
 80142c8:	e7de      	b.n	8014288 <_malloc_r+0xa0>
 80142ca:	bf00      	nop
 80142cc:	2000cfb8 	.word	0x2000cfb8

080142d0 <__ssputs_r>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	688e      	ldr	r6, [r1, #8]
 80142d6:	429e      	cmp	r6, r3
 80142d8:	4682      	mov	sl, r0
 80142da:	460c      	mov	r4, r1
 80142dc:	4690      	mov	r8, r2
 80142de:	461f      	mov	r7, r3
 80142e0:	d838      	bhi.n	8014354 <__ssputs_r+0x84>
 80142e2:	898a      	ldrh	r2, [r1, #12]
 80142e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142e8:	d032      	beq.n	8014350 <__ssputs_r+0x80>
 80142ea:	6825      	ldr	r5, [r4, #0]
 80142ec:	6909      	ldr	r1, [r1, #16]
 80142ee:	eba5 0901 	sub.w	r9, r5, r1
 80142f2:	6965      	ldr	r5, [r4, #20]
 80142f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142fc:	3301      	adds	r3, #1
 80142fe:	444b      	add	r3, r9
 8014300:	106d      	asrs	r5, r5, #1
 8014302:	429d      	cmp	r5, r3
 8014304:	bf38      	it	cc
 8014306:	461d      	movcc	r5, r3
 8014308:	0553      	lsls	r3, r2, #21
 801430a:	d531      	bpl.n	8014370 <__ssputs_r+0xa0>
 801430c:	4629      	mov	r1, r5
 801430e:	f7ff ff6b 	bl	80141e8 <_malloc_r>
 8014312:	4606      	mov	r6, r0
 8014314:	b950      	cbnz	r0, 801432c <__ssputs_r+0x5c>
 8014316:	230c      	movs	r3, #12
 8014318:	f8ca 3000 	str.w	r3, [sl]
 801431c:	89a3      	ldrh	r3, [r4, #12]
 801431e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014322:	81a3      	strh	r3, [r4, #12]
 8014324:	f04f 30ff 	mov.w	r0, #4294967295
 8014328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432c:	6921      	ldr	r1, [r4, #16]
 801432e:	464a      	mov	r2, r9
 8014330:	f7fd fbdc 	bl	8011aec <memcpy>
 8014334:	89a3      	ldrh	r3, [r4, #12]
 8014336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801433e:	81a3      	strh	r3, [r4, #12]
 8014340:	6126      	str	r6, [r4, #16]
 8014342:	6165      	str	r5, [r4, #20]
 8014344:	444e      	add	r6, r9
 8014346:	eba5 0509 	sub.w	r5, r5, r9
 801434a:	6026      	str	r6, [r4, #0]
 801434c:	60a5      	str	r5, [r4, #8]
 801434e:	463e      	mov	r6, r7
 8014350:	42be      	cmp	r6, r7
 8014352:	d900      	bls.n	8014356 <__ssputs_r+0x86>
 8014354:	463e      	mov	r6, r7
 8014356:	6820      	ldr	r0, [r4, #0]
 8014358:	4632      	mov	r2, r6
 801435a:	4641      	mov	r1, r8
 801435c:	f000 fba2 	bl	8014aa4 <memmove>
 8014360:	68a3      	ldr	r3, [r4, #8]
 8014362:	1b9b      	subs	r3, r3, r6
 8014364:	60a3      	str	r3, [r4, #8]
 8014366:	6823      	ldr	r3, [r4, #0]
 8014368:	4433      	add	r3, r6
 801436a:	6023      	str	r3, [r4, #0]
 801436c:	2000      	movs	r0, #0
 801436e:	e7db      	b.n	8014328 <__ssputs_r+0x58>
 8014370:	462a      	mov	r2, r5
 8014372:	f000 fbbd 	bl	8014af0 <_realloc_r>
 8014376:	4606      	mov	r6, r0
 8014378:	2800      	cmp	r0, #0
 801437a:	d1e1      	bne.n	8014340 <__ssputs_r+0x70>
 801437c:	6921      	ldr	r1, [r4, #16]
 801437e:	4650      	mov	r0, sl
 8014380:	f7ff fec6 	bl	8014110 <_free_r>
 8014384:	e7c7      	b.n	8014316 <__ssputs_r+0x46>
	...

08014388 <_svfiprintf_r>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	4698      	mov	r8, r3
 801438e:	898b      	ldrh	r3, [r1, #12]
 8014390:	061b      	lsls	r3, r3, #24
 8014392:	b09d      	sub	sp, #116	; 0x74
 8014394:	4607      	mov	r7, r0
 8014396:	460d      	mov	r5, r1
 8014398:	4614      	mov	r4, r2
 801439a:	d50e      	bpl.n	80143ba <_svfiprintf_r+0x32>
 801439c:	690b      	ldr	r3, [r1, #16]
 801439e:	b963      	cbnz	r3, 80143ba <_svfiprintf_r+0x32>
 80143a0:	2140      	movs	r1, #64	; 0x40
 80143a2:	f7ff ff21 	bl	80141e8 <_malloc_r>
 80143a6:	6028      	str	r0, [r5, #0]
 80143a8:	6128      	str	r0, [r5, #16]
 80143aa:	b920      	cbnz	r0, 80143b6 <_svfiprintf_r+0x2e>
 80143ac:	230c      	movs	r3, #12
 80143ae:	603b      	str	r3, [r7, #0]
 80143b0:	f04f 30ff 	mov.w	r0, #4294967295
 80143b4:	e0d1      	b.n	801455a <_svfiprintf_r+0x1d2>
 80143b6:	2340      	movs	r3, #64	; 0x40
 80143b8:	616b      	str	r3, [r5, #20]
 80143ba:	2300      	movs	r3, #0
 80143bc:	9309      	str	r3, [sp, #36]	; 0x24
 80143be:	2320      	movs	r3, #32
 80143c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80143c8:	2330      	movs	r3, #48	; 0x30
 80143ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014574 <_svfiprintf_r+0x1ec>
 80143ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143d2:	f04f 0901 	mov.w	r9, #1
 80143d6:	4623      	mov	r3, r4
 80143d8:	469a      	mov	sl, r3
 80143da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143de:	b10a      	cbz	r2, 80143e4 <_svfiprintf_r+0x5c>
 80143e0:	2a25      	cmp	r2, #37	; 0x25
 80143e2:	d1f9      	bne.n	80143d8 <_svfiprintf_r+0x50>
 80143e4:	ebba 0b04 	subs.w	fp, sl, r4
 80143e8:	d00b      	beq.n	8014402 <_svfiprintf_r+0x7a>
 80143ea:	465b      	mov	r3, fp
 80143ec:	4622      	mov	r2, r4
 80143ee:	4629      	mov	r1, r5
 80143f0:	4638      	mov	r0, r7
 80143f2:	f7ff ff6d 	bl	80142d0 <__ssputs_r>
 80143f6:	3001      	adds	r0, #1
 80143f8:	f000 80aa 	beq.w	8014550 <_svfiprintf_r+0x1c8>
 80143fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143fe:	445a      	add	r2, fp
 8014400:	9209      	str	r2, [sp, #36]	; 0x24
 8014402:	f89a 3000 	ldrb.w	r3, [sl]
 8014406:	2b00      	cmp	r3, #0
 8014408:	f000 80a2 	beq.w	8014550 <_svfiprintf_r+0x1c8>
 801440c:	2300      	movs	r3, #0
 801440e:	f04f 32ff 	mov.w	r2, #4294967295
 8014412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014416:	f10a 0a01 	add.w	sl, sl, #1
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	9307      	str	r3, [sp, #28]
 801441e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014422:	931a      	str	r3, [sp, #104]	; 0x68
 8014424:	4654      	mov	r4, sl
 8014426:	2205      	movs	r2, #5
 8014428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801442c:	4851      	ldr	r0, [pc, #324]	; (8014574 <_svfiprintf_r+0x1ec>)
 801442e:	f7eb fed7 	bl	80001e0 <memchr>
 8014432:	9a04      	ldr	r2, [sp, #16]
 8014434:	b9d8      	cbnz	r0, 801446e <_svfiprintf_r+0xe6>
 8014436:	06d0      	lsls	r0, r2, #27
 8014438:	bf44      	itt	mi
 801443a:	2320      	movmi	r3, #32
 801443c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014440:	0711      	lsls	r1, r2, #28
 8014442:	bf44      	itt	mi
 8014444:	232b      	movmi	r3, #43	; 0x2b
 8014446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801444a:	f89a 3000 	ldrb.w	r3, [sl]
 801444e:	2b2a      	cmp	r3, #42	; 0x2a
 8014450:	d015      	beq.n	801447e <_svfiprintf_r+0xf6>
 8014452:	9a07      	ldr	r2, [sp, #28]
 8014454:	4654      	mov	r4, sl
 8014456:	2000      	movs	r0, #0
 8014458:	f04f 0c0a 	mov.w	ip, #10
 801445c:	4621      	mov	r1, r4
 801445e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014462:	3b30      	subs	r3, #48	; 0x30
 8014464:	2b09      	cmp	r3, #9
 8014466:	d94e      	bls.n	8014506 <_svfiprintf_r+0x17e>
 8014468:	b1b0      	cbz	r0, 8014498 <_svfiprintf_r+0x110>
 801446a:	9207      	str	r2, [sp, #28]
 801446c:	e014      	b.n	8014498 <_svfiprintf_r+0x110>
 801446e:	eba0 0308 	sub.w	r3, r0, r8
 8014472:	fa09 f303 	lsl.w	r3, r9, r3
 8014476:	4313      	orrs	r3, r2
 8014478:	9304      	str	r3, [sp, #16]
 801447a:	46a2      	mov	sl, r4
 801447c:	e7d2      	b.n	8014424 <_svfiprintf_r+0x9c>
 801447e:	9b03      	ldr	r3, [sp, #12]
 8014480:	1d19      	adds	r1, r3, #4
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	9103      	str	r1, [sp, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	bfbb      	ittet	lt
 801448a:	425b      	neglt	r3, r3
 801448c:	f042 0202 	orrlt.w	r2, r2, #2
 8014490:	9307      	strge	r3, [sp, #28]
 8014492:	9307      	strlt	r3, [sp, #28]
 8014494:	bfb8      	it	lt
 8014496:	9204      	strlt	r2, [sp, #16]
 8014498:	7823      	ldrb	r3, [r4, #0]
 801449a:	2b2e      	cmp	r3, #46	; 0x2e
 801449c:	d10c      	bne.n	80144b8 <_svfiprintf_r+0x130>
 801449e:	7863      	ldrb	r3, [r4, #1]
 80144a0:	2b2a      	cmp	r3, #42	; 0x2a
 80144a2:	d135      	bne.n	8014510 <_svfiprintf_r+0x188>
 80144a4:	9b03      	ldr	r3, [sp, #12]
 80144a6:	1d1a      	adds	r2, r3, #4
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	9203      	str	r2, [sp, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	bfb8      	it	lt
 80144b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144b4:	3402      	adds	r4, #2
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014584 <_svfiprintf_r+0x1fc>
 80144bc:	7821      	ldrb	r1, [r4, #0]
 80144be:	2203      	movs	r2, #3
 80144c0:	4650      	mov	r0, sl
 80144c2:	f7eb fe8d 	bl	80001e0 <memchr>
 80144c6:	b140      	cbz	r0, 80144da <_svfiprintf_r+0x152>
 80144c8:	2340      	movs	r3, #64	; 0x40
 80144ca:	eba0 000a 	sub.w	r0, r0, sl
 80144ce:	fa03 f000 	lsl.w	r0, r3, r0
 80144d2:	9b04      	ldr	r3, [sp, #16]
 80144d4:	4303      	orrs	r3, r0
 80144d6:	3401      	adds	r4, #1
 80144d8:	9304      	str	r3, [sp, #16]
 80144da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144de:	4826      	ldr	r0, [pc, #152]	; (8014578 <_svfiprintf_r+0x1f0>)
 80144e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144e4:	2206      	movs	r2, #6
 80144e6:	f7eb fe7b 	bl	80001e0 <memchr>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d038      	beq.n	8014560 <_svfiprintf_r+0x1d8>
 80144ee:	4b23      	ldr	r3, [pc, #140]	; (801457c <_svfiprintf_r+0x1f4>)
 80144f0:	bb1b      	cbnz	r3, 801453a <_svfiprintf_r+0x1b2>
 80144f2:	9b03      	ldr	r3, [sp, #12]
 80144f4:	3307      	adds	r3, #7
 80144f6:	f023 0307 	bic.w	r3, r3, #7
 80144fa:	3308      	adds	r3, #8
 80144fc:	9303      	str	r3, [sp, #12]
 80144fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014500:	4433      	add	r3, r6
 8014502:	9309      	str	r3, [sp, #36]	; 0x24
 8014504:	e767      	b.n	80143d6 <_svfiprintf_r+0x4e>
 8014506:	fb0c 3202 	mla	r2, ip, r2, r3
 801450a:	460c      	mov	r4, r1
 801450c:	2001      	movs	r0, #1
 801450e:	e7a5      	b.n	801445c <_svfiprintf_r+0xd4>
 8014510:	2300      	movs	r3, #0
 8014512:	3401      	adds	r4, #1
 8014514:	9305      	str	r3, [sp, #20]
 8014516:	4619      	mov	r1, r3
 8014518:	f04f 0c0a 	mov.w	ip, #10
 801451c:	4620      	mov	r0, r4
 801451e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014522:	3a30      	subs	r2, #48	; 0x30
 8014524:	2a09      	cmp	r2, #9
 8014526:	d903      	bls.n	8014530 <_svfiprintf_r+0x1a8>
 8014528:	2b00      	cmp	r3, #0
 801452a:	d0c5      	beq.n	80144b8 <_svfiprintf_r+0x130>
 801452c:	9105      	str	r1, [sp, #20]
 801452e:	e7c3      	b.n	80144b8 <_svfiprintf_r+0x130>
 8014530:	fb0c 2101 	mla	r1, ip, r1, r2
 8014534:	4604      	mov	r4, r0
 8014536:	2301      	movs	r3, #1
 8014538:	e7f0      	b.n	801451c <_svfiprintf_r+0x194>
 801453a:	ab03      	add	r3, sp, #12
 801453c:	9300      	str	r3, [sp, #0]
 801453e:	462a      	mov	r2, r5
 8014540:	4b0f      	ldr	r3, [pc, #60]	; (8014580 <_svfiprintf_r+0x1f8>)
 8014542:	a904      	add	r1, sp, #16
 8014544:	4638      	mov	r0, r7
 8014546:	f7fd fb87 	bl	8011c58 <_printf_float>
 801454a:	1c42      	adds	r2, r0, #1
 801454c:	4606      	mov	r6, r0
 801454e:	d1d6      	bne.n	80144fe <_svfiprintf_r+0x176>
 8014550:	89ab      	ldrh	r3, [r5, #12]
 8014552:	065b      	lsls	r3, r3, #25
 8014554:	f53f af2c 	bmi.w	80143b0 <_svfiprintf_r+0x28>
 8014558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801455a:	b01d      	add	sp, #116	; 0x74
 801455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014560:	ab03      	add	r3, sp, #12
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	462a      	mov	r2, r5
 8014566:	4b06      	ldr	r3, [pc, #24]	; (8014580 <_svfiprintf_r+0x1f8>)
 8014568:	a904      	add	r1, sp, #16
 801456a:	4638      	mov	r0, r7
 801456c:	f7fd fe18 	bl	80121a0 <_printf_i>
 8014570:	e7eb      	b.n	801454a <_svfiprintf_r+0x1c2>
 8014572:	bf00      	nop
 8014574:	080150e4 	.word	0x080150e4
 8014578:	080150ee 	.word	0x080150ee
 801457c:	08011c59 	.word	0x08011c59
 8014580:	080142d1 	.word	0x080142d1
 8014584:	080150ea 	.word	0x080150ea

08014588 <__sfputc_r>:
 8014588:	6893      	ldr	r3, [r2, #8]
 801458a:	3b01      	subs	r3, #1
 801458c:	2b00      	cmp	r3, #0
 801458e:	b410      	push	{r4}
 8014590:	6093      	str	r3, [r2, #8]
 8014592:	da08      	bge.n	80145a6 <__sfputc_r+0x1e>
 8014594:	6994      	ldr	r4, [r2, #24]
 8014596:	42a3      	cmp	r3, r4
 8014598:	db01      	blt.n	801459e <__sfputc_r+0x16>
 801459a:	290a      	cmp	r1, #10
 801459c:	d103      	bne.n	80145a6 <__sfputc_r+0x1e>
 801459e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145a2:	f7fe b8b5 	b.w	8012710 <__swbuf_r>
 80145a6:	6813      	ldr	r3, [r2, #0]
 80145a8:	1c58      	adds	r0, r3, #1
 80145aa:	6010      	str	r0, [r2, #0]
 80145ac:	7019      	strb	r1, [r3, #0]
 80145ae:	4608      	mov	r0, r1
 80145b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145b4:	4770      	bx	lr

080145b6 <__sfputs_r>:
 80145b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b8:	4606      	mov	r6, r0
 80145ba:	460f      	mov	r7, r1
 80145bc:	4614      	mov	r4, r2
 80145be:	18d5      	adds	r5, r2, r3
 80145c0:	42ac      	cmp	r4, r5
 80145c2:	d101      	bne.n	80145c8 <__sfputs_r+0x12>
 80145c4:	2000      	movs	r0, #0
 80145c6:	e007      	b.n	80145d8 <__sfputs_r+0x22>
 80145c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145cc:	463a      	mov	r2, r7
 80145ce:	4630      	mov	r0, r6
 80145d0:	f7ff ffda 	bl	8014588 <__sfputc_r>
 80145d4:	1c43      	adds	r3, r0, #1
 80145d6:	d1f3      	bne.n	80145c0 <__sfputs_r+0xa>
 80145d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145dc <_vfiprintf_r>:
 80145dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e0:	460d      	mov	r5, r1
 80145e2:	b09d      	sub	sp, #116	; 0x74
 80145e4:	4614      	mov	r4, r2
 80145e6:	4698      	mov	r8, r3
 80145e8:	4606      	mov	r6, r0
 80145ea:	b118      	cbz	r0, 80145f4 <_vfiprintf_r+0x18>
 80145ec:	6983      	ldr	r3, [r0, #24]
 80145ee:	b90b      	cbnz	r3, 80145f4 <_vfiprintf_r+0x18>
 80145f0:	f7ff f8e2 	bl	80137b8 <__sinit>
 80145f4:	4b89      	ldr	r3, [pc, #548]	; (801481c <_vfiprintf_r+0x240>)
 80145f6:	429d      	cmp	r5, r3
 80145f8:	d11b      	bne.n	8014632 <_vfiprintf_r+0x56>
 80145fa:	6875      	ldr	r5, [r6, #4]
 80145fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145fe:	07d9      	lsls	r1, r3, #31
 8014600:	d405      	bmi.n	801460e <_vfiprintf_r+0x32>
 8014602:	89ab      	ldrh	r3, [r5, #12]
 8014604:	059a      	lsls	r2, r3, #22
 8014606:	d402      	bmi.n	801460e <_vfiprintf_r+0x32>
 8014608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801460a:	f7ff f978 	bl	80138fe <__retarget_lock_acquire_recursive>
 801460e:	89ab      	ldrh	r3, [r5, #12]
 8014610:	071b      	lsls	r3, r3, #28
 8014612:	d501      	bpl.n	8014618 <_vfiprintf_r+0x3c>
 8014614:	692b      	ldr	r3, [r5, #16]
 8014616:	b9eb      	cbnz	r3, 8014654 <_vfiprintf_r+0x78>
 8014618:	4629      	mov	r1, r5
 801461a:	4630      	mov	r0, r6
 801461c:	f7fe f8ca 	bl	80127b4 <__swsetup_r>
 8014620:	b1c0      	cbz	r0, 8014654 <_vfiprintf_r+0x78>
 8014622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014624:	07dc      	lsls	r4, r3, #31
 8014626:	d50e      	bpl.n	8014646 <_vfiprintf_r+0x6a>
 8014628:	f04f 30ff 	mov.w	r0, #4294967295
 801462c:	b01d      	add	sp, #116	; 0x74
 801462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014632:	4b7b      	ldr	r3, [pc, #492]	; (8014820 <_vfiprintf_r+0x244>)
 8014634:	429d      	cmp	r5, r3
 8014636:	d101      	bne.n	801463c <_vfiprintf_r+0x60>
 8014638:	68b5      	ldr	r5, [r6, #8]
 801463a:	e7df      	b.n	80145fc <_vfiprintf_r+0x20>
 801463c:	4b79      	ldr	r3, [pc, #484]	; (8014824 <_vfiprintf_r+0x248>)
 801463e:	429d      	cmp	r5, r3
 8014640:	bf08      	it	eq
 8014642:	68f5      	ldreq	r5, [r6, #12]
 8014644:	e7da      	b.n	80145fc <_vfiprintf_r+0x20>
 8014646:	89ab      	ldrh	r3, [r5, #12]
 8014648:	0598      	lsls	r0, r3, #22
 801464a:	d4ed      	bmi.n	8014628 <_vfiprintf_r+0x4c>
 801464c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801464e:	f7ff f957 	bl	8013900 <__retarget_lock_release_recursive>
 8014652:	e7e9      	b.n	8014628 <_vfiprintf_r+0x4c>
 8014654:	2300      	movs	r3, #0
 8014656:	9309      	str	r3, [sp, #36]	; 0x24
 8014658:	2320      	movs	r3, #32
 801465a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801465e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014662:	2330      	movs	r3, #48	; 0x30
 8014664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014828 <_vfiprintf_r+0x24c>
 8014668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801466c:	f04f 0901 	mov.w	r9, #1
 8014670:	4623      	mov	r3, r4
 8014672:	469a      	mov	sl, r3
 8014674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014678:	b10a      	cbz	r2, 801467e <_vfiprintf_r+0xa2>
 801467a:	2a25      	cmp	r2, #37	; 0x25
 801467c:	d1f9      	bne.n	8014672 <_vfiprintf_r+0x96>
 801467e:	ebba 0b04 	subs.w	fp, sl, r4
 8014682:	d00b      	beq.n	801469c <_vfiprintf_r+0xc0>
 8014684:	465b      	mov	r3, fp
 8014686:	4622      	mov	r2, r4
 8014688:	4629      	mov	r1, r5
 801468a:	4630      	mov	r0, r6
 801468c:	f7ff ff93 	bl	80145b6 <__sfputs_r>
 8014690:	3001      	adds	r0, #1
 8014692:	f000 80aa 	beq.w	80147ea <_vfiprintf_r+0x20e>
 8014696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014698:	445a      	add	r2, fp
 801469a:	9209      	str	r2, [sp, #36]	; 0x24
 801469c:	f89a 3000 	ldrb.w	r3, [sl]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	f000 80a2 	beq.w	80147ea <_vfiprintf_r+0x20e>
 80146a6:	2300      	movs	r3, #0
 80146a8:	f04f 32ff 	mov.w	r2, #4294967295
 80146ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146b0:	f10a 0a01 	add.w	sl, sl, #1
 80146b4:	9304      	str	r3, [sp, #16]
 80146b6:	9307      	str	r3, [sp, #28]
 80146b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80146bc:	931a      	str	r3, [sp, #104]	; 0x68
 80146be:	4654      	mov	r4, sl
 80146c0:	2205      	movs	r2, #5
 80146c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146c6:	4858      	ldr	r0, [pc, #352]	; (8014828 <_vfiprintf_r+0x24c>)
 80146c8:	f7eb fd8a 	bl	80001e0 <memchr>
 80146cc:	9a04      	ldr	r2, [sp, #16]
 80146ce:	b9d8      	cbnz	r0, 8014708 <_vfiprintf_r+0x12c>
 80146d0:	06d1      	lsls	r1, r2, #27
 80146d2:	bf44      	itt	mi
 80146d4:	2320      	movmi	r3, #32
 80146d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146da:	0713      	lsls	r3, r2, #28
 80146dc:	bf44      	itt	mi
 80146de:	232b      	movmi	r3, #43	; 0x2b
 80146e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146e4:	f89a 3000 	ldrb.w	r3, [sl]
 80146e8:	2b2a      	cmp	r3, #42	; 0x2a
 80146ea:	d015      	beq.n	8014718 <_vfiprintf_r+0x13c>
 80146ec:	9a07      	ldr	r2, [sp, #28]
 80146ee:	4654      	mov	r4, sl
 80146f0:	2000      	movs	r0, #0
 80146f2:	f04f 0c0a 	mov.w	ip, #10
 80146f6:	4621      	mov	r1, r4
 80146f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146fc:	3b30      	subs	r3, #48	; 0x30
 80146fe:	2b09      	cmp	r3, #9
 8014700:	d94e      	bls.n	80147a0 <_vfiprintf_r+0x1c4>
 8014702:	b1b0      	cbz	r0, 8014732 <_vfiprintf_r+0x156>
 8014704:	9207      	str	r2, [sp, #28]
 8014706:	e014      	b.n	8014732 <_vfiprintf_r+0x156>
 8014708:	eba0 0308 	sub.w	r3, r0, r8
 801470c:	fa09 f303 	lsl.w	r3, r9, r3
 8014710:	4313      	orrs	r3, r2
 8014712:	9304      	str	r3, [sp, #16]
 8014714:	46a2      	mov	sl, r4
 8014716:	e7d2      	b.n	80146be <_vfiprintf_r+0xe2>
 8014718:	9b03      	ldr	r3, [sp, #12]
 801471a:	1d19      	adds	r1, r3, #4
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	9103      	str	r1, [sp, #12]
 8014720:	2b00      	cmp	r3, #0
 8014722:	bfbb      	ittet	lt
 8014724:	425b      	neglt	r3, r3
 8014726:	f042 0202 	orrlt.w	r2, r2, #2
 801472a:	9307      	strge	r3, [sp, #28]
 801472c:	9307      	strlt	r3, [sp, #28]
 801472e:	bfb8      	it	lt
 8014730:	9204      	strlt	r2, [sp, #16]
 8014732:	7823      	ldrb	r3, [r4, #0]
 8014734:	2b2e      	cmp	r3, #46	; 0x2e
 8014736:	d10c      	bne.n	8014752 <_vfiprintf_r+0x176>
 8014738:	7863      	ldrb	r3, [r4, #1]
 801473a:	2b2a      	cmp	r3, #42	; 0x2a
 801473c:	d135      	bne.n	80147aa <_vfiprintf_r+0x1ce>
 801473e:	9b03      	ldr	r3, [sp, #12]
 8014740:	1d1a      	adds	r2, r3, #4
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	9203      	str	r2, [sp, #12]
 8014746:	2b00      	cmp	r3, #0
 8014748:	bfb8      	it	lt
 801474a:	f04f 33ff 	movlt.w	r3, #4294967295
 801474e:	3402      	adds	r4, #2
 8014750:	9305      	str	r3, [sp, #20]
 8014752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014838 <_vfiprintf_r+0x25c>
 8014756:	7821      	ldrb	r1, [r4, #0]
 8014758:	2203      	movs	r2, #3
 801475a:	4650      	mov	r0, sl
 801475c:	f7eb fd40 	bl	80001e0 <memchr>
 8014760:	b140      	cbz	r0, 8014774 <_vfiprintf_r+0x198>
 8014762:	2340      	movs	r3, #64	; 0x40
 8014764:	eba0 000a 	sub.w	r0, r0, sl
 8014768:	fa03 f000 	lsl.w	r0, r3, r0
 801476c:	9b04      	ldr	r3, [sp, #16]
 801476e:	4303      	orrs	r3, r0
 8014770:	3401      	adds	r4, #1
 8014772:	9304      	str	r3, [sp, #16]
 8014774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014778:	482c      	ldr	r0, [pc, #176]	; (801482c <_vfiprintf_r+0x250>)
 801477a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801477e:	2206      	movs	r2, #6
 8014780:	f7eb fd2e 	bl	80001e0 <memchr>
 8014784:	2800      	cmp	r0, #0
 8014786:	d03f      	beq.n	8014808 <_vfiprintf_r+0x22c>
 8014788:	4b29      	ldr	r3, [pc, #164]	; (8014830 <_vfiprintf_r+0x254>)
 801478a:	bb1b      	cbnz	r3, 80147d4 <_vfiprintf_r+0x1f8>
 801478c:	9b03      	ldr	r3, [sp, #12]
 801478e:	3307      	adds	r3, #7
 8014790:	f023 0307 	bic.w	r3, r3, #7
 8014794:	3308      	adds	r3, #8
 8014796:	9303      	str	r3, [sp, #12]
 8014798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801479a:	443b      	add	r3, r7
 801479c:	9309      	str	r3, [sp, #36]	; 0x24
 801479e:	e767      	b.n	8014670 <_vfiprintf_r+0x94>
 80147a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80147a4:	460c      	mov	r4, r1
 80147a6:	2001      	movs	r0, #1
 80147a8:	e7a5      	b.n	80146f6 <_vfiprintf_r+0x11a>
 80147aa:	2300      	movs	r3, #0
 80147ac:	3401      	adds	r4, #1
 80147ae:	9305      	str	r3, [sp, #20]
 80147b0:	4619      	mov	r1, r3
 80147b2:	f04f 0c0a 	mov.w	ip, #10
 80147b6:	4620      	mov	r0, r4
 80147b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147bc:	3a30      	subs	r2, #48	; 0x30
 80147be:	2a09      	cmp	r2, #9
 80147c0:	d903      	bls.n	80147ca <_vfiprintf_r+0x1ee>
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d0c5      	beq.n	8014752 <_vfiprintf_r+0x176>
 80147c6:	9105      	str	r1, [sp, #20]
 80147c8:	e7c3      	b.n	8014752 <_vfiprintf_r+0x176>
 80147ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80147ce:	4604      	mov	r4, r0
 80147d0:	2301      	movs	r3, #1
 80147d2:	e7f0      	b.n	80147b6 <_vfiprintf_r+0x1da>
 80147d4:	ab03      	add	r3, sp, #12
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	462a      	mov	r2, r5
 80147da:	4b16      	ldr	r3, [pc, #88]	; (8014834 <_vfiprintf_r+0x258>)
 80147dc:	a904      	add	r1, sp, #16
 80147de:	4630      	mov	r0, r6
 80147e0:	f7fd fa3a 	bl	8011c58 <_printf_float>
 80147e4:	4607      	mov	r7, r0
 80147e6:	1c78      	adds	r0, r7, #1
 80147e8:	d1d6      	bne.n	8014798 <_vfiprintf_r+0x1bc>
 80147ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147ec:	07d9      	lsls	r1, r3, #31
 80147ee:	d405      	bmi.n	80147fc <_vfiprintf_r+0x220>
 80147f0:	89ab      	ldrh	r3, [r5, #12]
 80147f2:	059a      	lsls	r2, r3, #22
 80147f4:	d402      	bmi.n	80147fc <_vfiprintf_r+0x220>
 80147f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147f8:	f7ff f882 	bl	8013900 <__retarget_lock_release_recursive>
 80147fc:	89ab      	ldrh	r3, [r5, #12]
 80147fe:	065b      	lsls	r3, r3, #25
 8014800:	f53f af12 	bmi.w	8014628 <_vfiprintf_r+0x4c>
 8014804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014806:	e711      	b.n	801462c <_vfiprintf_r+0x50>
 8014808:	ab03      	add	r3, sp, #12
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	462a      	mov	r2, r5
 801480e:	4b09      	ldr	r3, [pc, #36]	; (8014834 <_vfiprintf_r+0x258>)
 8014810:	a904      	add	r1, sp, #16
 8014812:	4630      	mov	r0, r6
 8014814:	f7fd fcc4 	bl	80121a0 <_printf_i>
 8014818:	e7e4      	b.n	80147e4 <_vfiprintf_r+0x208>
 801481a:	bf00      	nop
 801481c:	08014f48 	.word	0x08014f48
 8014820:	08014f68 	.word	0x08014f68
 8014824:	08014f28 	.word	0x08014f28
 8014828:	080150e4 	.word	0x080150e4
 801482c:	080150ee 	.word	0x080150ee
 8014830:	08011c59 	.word	0x08011c59
 8014834:	080145b7 	.word	0x080145b7
 8014838:	080150ea 	.word	0x080150ea

0801483c <_putc_r>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	460d      	mov	r5, r1
 8014840:	4614      	mov	r4, r2
 8014842:	4606      	mov	r6, r0
 8014844:	b118      	cbz	r0, 801484e <_putc_r+0x12>
 8014846:	6983      	ldr	r3, [r0, #24]
 8014848:	b90b      	cbnz	r3, 801484e <_putc_r+0x12>
 801484a:	f7fe ffb5 	bl	80137b8 <__sinit>
 801484e:	4b1c      	ldr	r3, [pc, #112]	; (80148c0 <_putc_r+0x84>)
 8014850:	429c      	cmp	r4, r3
 8014852:	d124      	bne.n	801489e <_putc_r+0x62>
 8014854:	6874      	ldr	r4, [r6, #4]
 8014856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014858:	07d8      	lsls	r0, r3, #31
 801485a:	d405      	bmi.n	8014868 <_putc_r+0x2c>
 801485c:	89a3      	ldrh	r3, [r4, #12]
 801485e:	0599      	lsls	r1, r3, #22
 8014860:	d402      	bmi.n	8014868 <_putc_r+0x2c>
 8014862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014864:	f7ff f84b 	bl	80138fe <__retarget_lock_acquire_recursive>
 8014868:	68a3      	ldr	r3, [r4, #8]
 801486a:	3b01      	subs	r3, #1
 801486c:	2b00      	cmp	r3, #0
 801486e:	60a3      	str	r3, [r4, #8]
 8014870:	da05      	bge.n	801487e <_putc_r+0x42>
 8014872:	69a2      	ldr	r2, [r4, #24]
 8014874:	4293      	cmp	r3, r2
 8014876:	db1c      	blt.n	80148b2 <_putc_r+0x76>
 8014878:	b2eb      	uxtb	r3, r5
 801487a:	2b0a      	cmp	r3, #10
 801487c:	d019      	beq.n	80148b2 <_putc_r+0x76>
 801487e:	6823      	ldr	r3, [r4, #0]
 8014880:	1c5a      	adds	r2, r3, #1
 8014882:	6022      	str	r2, [r4, #0]
 8014884:	701d      	strb	r5, [r3, #0]
 8014886:	b2ed      	uxtb	r5, r5
 8014888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801488a:	07da      	lsls	r2, r3, #31
 801488c:	d405      	bmi.n	801489a <_putc_r+0x5e>
 801488e:	89a3      	ldrh	r3, [r4, #12]
 8014890:	059b      	lsls	r3, r3, #22
 8014892:	d402      	bmi.n	801489a <_putc_r+0x5e>
 8014894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014896:	f7ff f833 	bl	8013900 <__retarget_lock_release_recursive>
 801489a:	4628      	mov	r0, r5
 801489c:	bd70      	pop	{r4, r5, r6, pc}
 801489e:	4b09      	ldr	r3, [pc, #36]	; (80148c4 <_putc_r+0x88>)
 80148a0:	429c      	cmp	r4, r3
 80148a2:	d101      	bne.n	80148a8 <_putc_r+0x6c>
 80148a4:	68b4      	ldr	r4, [r6, #8]
 80148a6:	e7d6      	b.n	8014856 <_putc_r+0x1a>
 80148a8:	4b07      	ldr	r3, [pc, #28]	; (80148c8 <_putc_r+0x8c>)
 80148aa:	429c      	cmp	r4, r3
 80148ac:	bf08      	it	eq
 80148ae:	68f4      	ldreq	r4, [r6, #12]
 80148b0:	e7d1      	b.n	8014856 <_putc_r+0x1a>
 80148b2:	4629      	mov	r1, r5
 80148b4:	4622      	mov	r2, r4
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7fd ff2a 	bl	8012710 <__swbuf_r>
 80148bc:	4605      	mov	r5, r0
 80148be:	e7e3      	b.n	8014888 <_putc_r+0x4c>
 80148c0:	08014f48 	.word	0x08014f48
 80148c4:	08014f68 	.word	0x08014f68
 80148c8:	08014f28 	.word	0x08014f28

080148cc <_sbrk_r>:
 80148cc:	b538      	push	{r3, r4, r5, lr}
 80148ce:	4d06      	ldr	r5, [pc, #24]	; (80148e8 <_sbrk_r+0x1c>)
 80148d0:	2300      	movs	r3, #0
 80148d2:	4604      	mov	r4, r0
 80148d4:	4608      	mov	r0, r1
 80148d6:	602b      	str	r3, [r5, #0]
 80148d8:	f7f6 fc1a 	bl	800b110 <_sbrk>
 80148dc:	1c43      	adds	r3, r0, #1
 80148de:	d102      	bne.n	80148e6 <_sbrk_r+0x1a>
 80148e0:	682b      	ldr	r3, [r5, #0]
 80148e2:	b103      	cbz	r3, 80148e6 <_sbrk_r+0x1a>
 80148e4:	6023      	str	r3, [r4, #0]
 80148e6:	bd38      	pop	{r3, r4, r5, pc}
 80148e8:	2000cfc0 	.word	0x2000cfc0

080148ec <__sread>:
 80148ec:	b510      	push	{r4, lr}
 80148ee:	460c      	mov	r4, r1
 80148f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148f4:	f000 f92c 	bl	8014b50 <_read_r>
 80148f8:	2800      	cmp	r0, #0
 80148fa:	bfab      	itete	ge
 80148fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80148fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014900:	181b      	addge	r3, r3, r0
 8014902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014906:	bfac      	ite	ge
 8014908:	6563      	strge	r3, [r4, #84]	; 0x54
 801490a:	81a3      	strhlt	r3, [r4, #12]
 801490c:	bd10      	pop	{r4, pc}

0801490e <__swrite>:
 801490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014912:	461f      	mov	r7, r3
 8014914:	898b      	ldrh	r3, [r1, #12]
 8014916:	05db      	lsls	r3, r3, #23
 8014918:	4605      	mov	r5, r0
 801491a:	460c      	mov	r4, r1
 801491c:	4616      	mov	r6, r2
 801491e:	d505      	bpl.n	801492c <__swrite+0x1e>
 8014920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014924:	2302      	movs	r3, #2
 8014926:	2200      	movs	r2, #0
 8014928:	f000 f898 	bl	8014a5c <_lseek_r>
 801492c:	89a3      	ldrh	r3, [r4, #12]
 801492e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014936:	81a3      	strh	r3, [r4, #12]
 8014938:	4632      	mov	r2, r6
 801493a:	463b      	mov	r3, r7
 801493c:	4628      	mov	r0, r5
 801493e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014942:	f000 b817 	b.w	8014974 <_write_r>

08014946 <__sseek>:
 8014946:	b510      	push	{r4, lr}
 8014948:	460c      	mov	r4, r1
 801494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801494e:	f000 f885 	bl	8014a5c <_lseek_r>
 8014952:	1c43      	adds	r3, r0, #1
 8014954:	89a3      	ldrh	r3, [r4, #12]
 8014956:	bf15      	itete	ne
 8014958:	6560      	strne	r0, [r4, #84]	; 0x54
 801495a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801495e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014962:	81a3      	strheq	r3, [r4, #12]
 8014964:	bf18      	it	ne
 8014966:	81a3      	strhne	r3, [r4, #12]
 8014968:	bd10      	pop	{r4, pc}

0801496a <__sclose>:
 801496a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801496e:	f000 b831 	b.w	80149d4 <_close_r>
	...

08014974 <_write_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4d07      	ldr	r5, [pc, #28]	; (8014994 <_write_r+0x20>)
 8014978:	4604      	mov	r4, r0
 801497a:	4608      	mov	r0, r1
 801497c:	4611      	mov	r1, r2
 801497e:	2200      	movs	r2, #0
 8014980:	602a      	str	r2, [r5, #0]
 8014982:	461a      	mov	r2, r3
 8014984:	f7f6 fb70 	bl	800b068 <_write>
 8014988:	1c43      	adds	r3, r0, #1
 801498a:	d102      	bne.n	8014992 <_write_r+0x1e>
 801498c:	682b      	ldr	r3, [r5, #0]
 801498e:	b103      	cbz	r3, 8014992 <_write_r+0x1e>
 8014990:	6023      	str	r3, [r4, #0]
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	2000cfc0 	.word	0x2000cfc0

08014998 <__assert_func>:
 8014998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801499a:	4614      	mov	r4, r2
 801499c:	461a      	mov	r2, r3
 801499e:	4b09      	ldr	r3, [pc, #36]	; (80149c4 <__assert_func+0x2c>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	4605      	mov	r5, r0
 80149a4:	68d8      	ldr	r0, [r3, #12]
 80149a6:	b14c      	cbz	r4, 80149bc <__assert_func+0x24>
 80149a8:	4b07      	ldr	r3, [pc, #28]	; (80149c8 <__assert_func+0x30>)
 80149aa:	9100      	str	r1, [sp, #0]
 80149ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149b0:	4906      	ldr	r1, [pc, #24]	; (80149cc <__assert_func+0x34>)
 80149b2:	462b      	mov	r3, r5
 80149b4:	f000 f81e 	bl	80149f4 <fiprintf>
 80149b8:	f000 f8e9 	bl	8014b8e <abort>
 80149bc:	4b04      	ldr	r3, [pc, #16]	; (80149d0 <__assert_func+0x38>)
 80149be:	461c      	mov	r4, r3
 80149c0:	e7f3      	b.n	80149aa <__assert_func+0x12>
 80149c2:	bf00      	nop
 80149c4:	2000000c 	.word	0x2000000c
 80149c8:	080150f5 	.word	0x080150f5
 80149cc:	08015102 	.word	0x08015102
 80149d0:	08015130 	.word	0x08015130

080149d4 <_close_r>:
 80149d4:	b538      	push	{r3, r4, r5, lr}
 80149d6:	4d06      	ldr	r5, [pc, #24]	; (80149f0 <_close_r+0x1c>)
 80149d8:	2300      	movs	r3, #0
 80149da:	4604      	mov	r4, r0
 80149dc:	4608      	mov	r0, r1
 80149de:	602b      	str	r3, [r5, #0]
 80149e0:	f7f6 fb62 	bl	800b0a8 <_close>
 80149e4:	1c43      	adds	r3, r0, #1
 80149e6:	d102      	bne.n	80149ee <_close_r+0x1a>
 80149e8:	682b      	ldr	r3, [r5, #0]
 80149ea:	b103      	cbz	r3, 80149ee <_close_r+0x1a>
 80149ec:	6023      	str	r3, [r4, #0]
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	2000cfc0 	.word	0x2000cfc0

080149f4 <fiprintf>:
 80149f4:	b40e      	push	{r1, r2, r3}
 80149f6:	b503      	push	{r0, r1, lr}
 80149f8:	4601      	mov	r1, r0
 80149fa:	ab03      	add	r3, sp, #12
 80149fc:	4805      	ldr	r0, [pc, #20]	; (8014a14 <fiprintf+0x20>)
 80149fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a02:	6800      	ldr	r0, [r0, #0]
 8014a04:	9301      	str	r3, [sp, #4]
 8014a06:	f7ff fde9 	bl	80145dc <_vfiprintf_r>
 8014a0a:	b002      	add	sp, #8
 8014a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a10:	b003      	add	sp, #12
 8014a12:	4770      	bx	lr
 8014a14:	2000000c 	.word	0x2000000c

08014a18 <_fstat_r>:
 8014a18:	b538      	push	{r3, r4, r5, lr}
 8014a1a:	4d07      	ldr	r5, [pc, #28]	; (8014a38 <_fstat_r+0x20>)
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	4604      	mov	r4, r0
 8014a20:	4608      	mov	r0, r1
 8014a22:	4611      	mov	r1, r2
 8014a24:	602b      	str	r3, [r5, #0]
 8014a26:	f7f6 fb4b 	bl	800b0c0 <_fstat>
 8014a2a:	1c43      	adds	r3, r0, #1
 8014a2c:	d102      	bne.n	8014a34 <_fstat_r+0x1c>
 8014a2e:	682b      	ldr	r3, [r5, #0]
 8014a30:	b103      	cbz	r3, 8014a34 <_fstat_r+0x1c>
 8014a32:	6023      	str	r3, [r4, #0]
 8014a34:	bd38      	pop	{r3, r4, r5, pc}
 8014a36:	bf00      	nop
 8014a38:	2000cfc0 	.word	0x2000cfc0

08014a3c <_isatty_r>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	4d06      	ldr	r5, [pc, #24]	; (8014a58 <_isatty_r+0x1c>)
 8014a40:	2300      	movs	r3, #0
 8014a42:	4604      	mov	r4, r0
 8014a44:	4608      	mov	r0, r1
 8014a46:	602b      	str	r3, [r5, #0]
 8014a48:	f7f6 fb4a 	bl	800b0e0 <_isatty>
 8014a4c:	1c43      	adds	r3, r0, #1
 8014a4e:	d102      	bne.n	8014a56 <_isatty_r+0x1a>
 8014a50:	682b      	ldr	r3, [r5, #0]
 8014a52:	b103      	cbz	r3, 8014a56 <_isatty_r+0x1a>
 8014a54:	6023      	str	r3, [r4, #0]
 8014a56:	bd38      	pop	{r3, r4, r5, pc}
 8014a58:	2000cfc0 	.word	0x2000cfc0

08014a5c <_lseek_r>:
 8014a5c:	b538      	push	{r3, r4, r5, lr}
 8014a5e:	4d07      	ldr	r5, [pc, #28]	; (8014a7c <_lseek_r+0x20>)
 8014a60:	4604      	mov	r4, r0
 8014a62:	4608      	mov	r0, r1
 8014a64:	4611      	mov	r1, r2
 8014a66:	2200      	movs	r2, #0
 8014a68:	602a      	str	r2, [r5, #0]
 8014a6a:	461a      	mov	r2, r3
 8014a6c:	f7f6 fb43 	bl	800b0f6 <_lseek>
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	d102      	bne.n	8014a7a <_lseek_r+0x1e>
 8014a74:	682b      	ldr	r3, [r5, #0]
 8014a76:	b103      	cbz	r3, 8014a7a <_lseek_r+0x1e>
 8014a78:	6023      	str	r3, [r4, #0]
 8014a7a:	bd38      	pop	{r3, r4, r5, pc}
 8014a7c:	2000cfc0 	.word	0x2000cfc0

08014a80 <__ascii_mbtowc>:
 8014a80:	b082      	sub	sp, #8
 8014a82:	b901      	cbnz	r1, 8014a86 <__ascii_mbtowc+0x6>
 8014a84:	a901      	add	r1, sp, #4
 8014a86:	b142      	cbz	r2, 8014a9a <__ascii_mbtowc+0x1a>
 8014a88:	b14b      	cbz	r3, 8014a9e <__ascii_mbtowc+0x1e>
 8014a8a:	7813      	ldrb	r3, [r2, #0]
 8014a8c:	600b      	str	r3, [r1, #0]
 8014a8e:	7812      	ldrb	r2, [r2, #0]
 8014a90:	1e10      	subs	r0, r2, #0
 8014a92:	bf18      	it	ne
 8014a94:	2001      	movne	r0, #1
 8014a96:	b002      	add	sp, #8
 8014a98:	4770      	bx	lr
 8014a9a:	4610      	mov	r0, r2
 8014a9c:	e7fb      	b.n	8014a96 <__ascii_mbtowc+0x16>
 8014a9e:	f06f 0001 	mvn.w	r0, #1
 8014aa2:	e7f8      	b.n	8014a96 <__ascii_mbtowc+0x16>

08014aa4 <memmove>:
 8014aa4:	4288      	cmp	r0, r1
 8014aa6:	b510      	push	{r4, lr}
 8014aa8:	eb01 0402 	add.w	r4, r1, r2
 8014aac:	d902      	bls.n	8014ab4 <memmove+0x10>
 8014aae:	4284      	cmp	r4, r0
 8014ab0:	4623      	mov	r3, r4
 8014ab2:	d807      	bhi.n	8014ac4 <memmove+0x20>
 8014ab4:	1e43      	subs	r3, r0, #1
 8014ab6:	42a1      	cmp	r1, r4
 8014ab8:	d008      	beq.n	8014acc <memmove+0x28>
 8014aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ac2:	e7f8      	b.n	8014ab6 <memmove+0x12>
 8014ac4:	4402      	add	r2, r0
 8014ac6:	4601      	mov	r1, r0
 8014ac8:	428a      	cmp	r2, r1
 8014aca:	d100      	bne.n	8014ace <memmove+0x2a>
 8014acc:	bd10      	pop	{r4, pc}
 8014ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ad6:	e7f7      	b.n	8014ac8 <memmove+0x24>

08014ad8 <__malloc_lock>:
 8014ad8:	4801      	ldr	r0, [pc, #4]	; (8014ae0 <__malloc_lock+0x8>)
 8014ada:	f7fe bf10 	b.w	80138fe <__retarget_lock_acquire_recursive>
 8014ade:	bf00      	nop
 8014ae0:	2000cfb4 	.word	0x2000cfb4

08014ae4 <__malloc_unlock>:
 8014ae4:	4801      	ldr	r0, [pc, #4]	; (8014aec <__malloc_unlock+0x8>)
 8014ae6:	f7fe bf0b 	b.w	8013900 <__retarget_lock_release_recursive>
 8014aea:	bf00      	nop
 8014aec:	2000cfb4 	.word	0x2000cfb4

08014af0 <_realloc_r>:
 8014af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014af4:	4680      	mov	r8, r0
 8014af6:	4614      	mov	r4, r2
 8014af8:	460e      	mov	r6, r1
 8014afa:	b921      	cbnz	r1, 8014b06 <_realloc_r+0x16>
 8014afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b00:	4611      	mov	r1, r2
 8014b02:	f7ff bb71 	b.w	80141e8 <_malloc_r>
 8014b06:	b92a      	cbnz	r2, 8014b14 <_realloc_r+0x24>
 8014b08:	f7ff fb02 	bl	8014110 <_free_r>
 8014b0c:	4625      	mov	r5, r4
 8014b0e:	4628      	mov	r0, r5
 8014b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b14:	f000 f842 	bl	8014b9c <_malloc_usable_size_r>
 8014b18:	4284      	cmp	r4, r0
 8014b1a:	4607      	mov	r7, r0
 8014b1c:	d802      	bhi.n	8014b24 <_realloc_r+0x34>
 8014b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014b22:	d812      	bhi.n	8014b4a <_realloc_r+0x5a>
 8014b24:	4621      	mov	r1, r4
 8014b26:	4640      	mov	r0, r8
 8014b28:	f7ff fb5e 	bl	80141e8 <_malloc_r>
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	d0ed      	beq.n	8014b0e <_realloc_r+0x1e>
 8014b32:	42bc      	cmp	r4, r7
 8014b34:	4622      	mov	r2, r4
 8014b36:	4631      	mov	r1, r6
 8014b38:	bf28      	it	cs
 8014b3a:	463a      	movcs	r2, r7
 8014b3c:	f7fc ffd6 	bl	8011aec <memcpy>
 8014b40:	4631      	mov	r1, r6
 8014b42:	4640      	mov	r0, r8
 8014b44:	f7ff fae4 	bl	8014110 <_free_r>
 8014b48:	e7e1      	b.n	8014b0e <_realloc_r+0x1e>
 8014b4a:	4635      	mov	r5, r6
 8014b4c:	e7df      	b.n	8014b0e <_realloc_r+0x1e>
	...

08014b50 <_read_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4d07      	ldr	r5, [pc, #28]	; (8014b70 <_read_r+0x20>)
 8014b54:	4604      	mov	r4, r0
 8014b56:	4608      	mov	r0, r1
 8014b58:	4611      	mov	r1, r2
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	602a      	str	r2, [r5, #0]
 8014b5e:	461a      	mov	r2, r3
 8014b60:	f7f6 fa64 	bl	800b02c <_read>
 8014b64:	1c43      	adds	r3, r0, #1
 8014b66:	d102      	bne.n	8014b6e <_read_r+0x1e>
 8014b68:	682b      	ldr	r3, [r5, #0]
 8014b6a:	b103      	cbz	r3, 8014b6e <_read_r+0x1e>
 8014b6c:	6023      	str	r3, [r4, #0]
 8014b6e:	bd38      	pop	{r3, r4, r5, pc}
 8014b70:	2000cfc0 	.word	0x2000cfc0

08014b74 <__ascii_wctomb>:
 8014b74:	b149      	cbz	r1, 8014b8a <__ascii_wctomb+0x16>
 8014b76:	2aff      	cmp	r2, #255	; 0xff
 8014b78:	bf85      	ittet	hi
 8014b7a:	238a      	movhi	r3, #138	; 0x8a
 8014b7c:	6003      	strhi	r3, [r0, #0]
 8014b7e:	700a      	strbls	r2, [r1, #0]
 8014b80:	f04f 30ff 	movhi.w	r0, #4294967295
 8014b84:	bf98      	it	ls
 8014b86:	2001      	movls	r0, #1
 8014b88:	4770      	bx	lr
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	4770      	bx	lr

08014b8e <abort>:
 8014b8e:	b508      	push	{r3, lr}
 8014b90:	2006      	movs	r0, #6
 8014b92:	f000 f833 	bl	8014bfc <raise>
 8014b96:	2001      	movs	r0, #1
 8014b98:	f7f6 fa3e 	bl	800b018 <_exit>

08014b9c <_malloc_usable_size_r>:
 8014b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ba0:	1f18      	subs	r0, r3, #4
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	bfbc      	itt	lt
 8014ba6:	580b      	ldrlt	r3, [r1, r0]
 8014ba8:	18c0      	addlt	r0, r0, r3
 8014baa:	4770      	bx	lr

08014bac <_raise_r>:
 8014bac:	291f      	cmp	r1, #31
 8014bae:	b538      	push	{r3, r4, r5, lr}
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	460d      	mov	r5, r1
 8014bb4:	d904      	bls.n	8014bc0 <_raise_r+0x14>
 8014bb6:	2316      	movs	r3, #22
 8014bb8:	6003      	str	r3, [r0, #0]
 8014bba:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbe:	bd38      	pop	{r3, r4, r5, pc}
 8014bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bc2:	b112      	cbz	r2, 8014bca <_raise_r+0x1e>
 8014bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bc8:	b94b      	cbnz	r3, 8014bde <_raise_r+0x32>
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f000 f830 	bl	8014c30 <_getpid_r>
 8014bd0:	462a      	mov	r2, r5
 8014bd2:	4601      	mov	r1, r0
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bda:	f000 b817 	b.w	8014c0c <_kill_r>
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	d00a      	beq.n	8014bf8 <_raise_r+0x4c>
 8014be2:	1c59      	adds	r1, r3, #1
 8014be4:	d103      	bne.n	8014bee <_raise_r+0x42>
 8014be6:	2316      	movs	r3, #22
 8014be8:	6003      	str	r3, [r0, #0]
 8014bea:	2001      	movs	r0, #1
 8014bec:	e7e7      	b.n	8014bbe <_raise_r+0x12>
 8014bee:	2400      	movs	r4, #0
 8014bf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	4798      	blx	r3
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	e7e0      	b.n	8014bbe <_raise_r+0x12>

08014bfc <raise>:
 8014bfc:	4b02      	ldr	r3, [pc, #8]	; (8014c08 <raise+0xc>)
 8014bfe:	4601      	mov	r1, r0
 8014c00:	6818      	ldr	r0, [r3, #0]
 8014c02:	f7ff bfd3 	b.w	8014bac <_raise_r>
 8014c06:	bf00      	nop
 8014c08:	2000000c 	.word	0x2000000c

08014c0c <_kill_r>:
 8014c0c:	b538      	push	{r3, r4, r5, lr}
 8014c0e:	4d07      	ldr	r5, [pc, #28]	; (8014c2c <_kill_r+0x20>)
 8014c10:	2300      	movs	r3, #0
 8014c12:	4604      	mov	r4, r0
 8014c14:	4608      	mov	r0, r1
 8014c16:	4611      	mov	r1, r2
 8014c18:	602b      	str	r3, [r5, #0]
 8014c1a:	f7f6 f9ed 	bl	800aff8 <_kill>
 8014c1e:	1c43      	adds	r3, r0, #1
 8014c20:	d102      	bne.n	8014c28 <_kill_r+0x1c>
 8014c22:	682b      	ldr	r3, [r5, #0]
 8014c24:	b103      	cbz	r3, 8014c28 <_kill_r+0x1c>
 8014c26:	6023      	str	r3, [r4, #0]
 8014c28:	bd38      	pop	{r3, r4, r5, pc}
 8014c2a:	bf00      	nop
 8014c2c:	2000cfc0 	.word	0x2000cfc0

08014c30 <_getpid_r>:
 8014c30:	f7f6 b9da 	b.w	800afe8 <_getpid>

08014c34 <_init>:
 8014c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c36:	bf00      	nop
 8014c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3a:	bc08      	pop	{r3}
 8014c3c:	469e      	mov	lr, r3
 8014c3e:	4770      	bx	lr

08014c40 <_fini>:
 8014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c42:	bf00      	nop
 8014c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c46:	bc08      	pop	{r3}
 8014c48:	469e      	mov	lr, r3
 8014c4a:	4770      	bx	lr
